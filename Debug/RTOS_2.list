
RTOS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b3c0  0800b3c0  0001b3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b4  0800b8b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8b4  0800b8b4  0001b8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8bc  0800b8bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b60  200001e0  0800baa4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d40  0800baa4  00024d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1a3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003923  00000000  00000000  0003b3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  0003ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d84  00000000  00000000  00041910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b93  00000000  00000000  00046694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9495  00000000  00000000  00060227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001496bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  0014970c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3a4 	.word	0x0800b3a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b3a4 	.word	0x0800b3a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 ff2a 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f854 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f9f2 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9c:	f000 f9d0 	bl	8001340 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fa0:	f000 f8bc 	bl	800111c <MX_ADC1_Init>
  MX_TIM6_Init();
 8000fa4:	f000 f96c 	bl	8001280 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000fa8:	f000 f9a0 	bl	80012ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fac:	f000 f91a 	bl	80011e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb0:	f004 fa04 	bl	80053bc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <main+0x80>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <main+0x84>)
 8000fbc:	f004 fb0a 	bl	80055d4 <osTimerNew>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <main+0x88>)
 8000fc4:	6013      	str	r3, [r2, #0]
//  HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(AdcVals_t), &myQueue01_attributes);
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <main+0x8c>)
 8000fc8:	2104      	movs	r1, #4
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f004 fb7e 	bl	80056cc <osMessageQueueNew>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <main+0x90>)
 8000fd4:	6013      	str	r3, [r2, #0]

  /* creation of SendQueue */
  SendQueueHandle = osMessageQueueNew (16, sizeof(CalcVals_t), &SendQueue_attributes);
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <main+0x94>)
 8000fd8:	214c      	movs	r1, #76	; 0x4c
 8000fda:	2010      	movs	r0, #16
 8000fdc:	f004 fb76 	bl	80056cc <osMessageQueueNew>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <main+0x98>)
 8000fe4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <main+0x9c>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <main+0xa0>)
 8000fec:	f004 fa30 	bl	8005450 <osThreadNew>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <main+0xa4>)
 8000ff4:	6013      	str	r3, [r2, #0]

  /* creation of SendTask */
  SendTaskHandle = osThreadNew(StartSendTask, NULL, &SendTask_attributes);
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <main+0xa8>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <main+0xac>)
 8000ffc:	f004 fa28 	bl	8005450 <osThreadNew>
 8001000:	4603      	mov	r3, r0
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <main+0xb0>)
 8001004:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001006:	f004 f9fd 	bl	8005404 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0x7e>
 800100c:	0800b4a8 	.word	0x0800b4a8
 8001010:	0800170d 	.word	0x0800170d
 8001014:	20000388 	.word	0x20000388
 8001018:	0800b478 	.word	0x0800b478
 800101c:	20000380 	.word	0x20000380
 8001020:	0800b490 	.word	0x0800b490
 8001024:	20000384 	.word	0x20000384
 8001028:	0800b430 	.word	0x0800b430
 800102c:	08001605 	.word	0x08001605
 8001030:	20000378 	.word	0x20000378
 8001034:	0800b454 	.word	0x0800b454
 8001038:	08001691 	.word	0x08001691
 800103c:	2000037c 	.word	0x2000037c

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2234      	movs	r2, #52	; 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f007 facc 	bl	80085ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a29      	ldr	r2, [pc, #164]	; (8001114 <SystemClock_Config+0xd4>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <SystemClock_Config+0xd4>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <SystemClock_Config+0xd8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800108c:	4a22      	ldr	r2, [pc, #136]	; (8001118 <SystemClock_Config+0xd8>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <SystemClock_Config+0xd8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b4:	2310      	movs	r3, #16
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010be:	2304      	movs	r3, #4
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fde6 	bl	8003ca0 <HAL_RCC_OscConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010da:	f000 fb93 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	230f      	movs	r3, #15
 80010e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e2:	2302      	movs	r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fa54 	bl	80035a8 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001106:	f000 fb7d 	bl	8001804 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	; 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <MX_ADC1_Init+0xc0>)
 8001132:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800113a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <MX_ADC1_Init+0xbc>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001144:	2201      	movs	r2, #1
 8001146:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <MX_ADC1_Init+0xbc>)
 800114a:	2200      	movs	r2, #0
 800114c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001160:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_ADC1_Init+0xbc>)
 800116e:	2202      	movs	r2, #2
 8001170:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_ADC1_Init+0xbc>)
 800117c:	2201      	movs	r2, #1
 800117e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001180:	4815      	ldr	r0, [pc, #84]	; (80011d8 <MX_ADC1_Init+0xbc>)
 8001182:	f000 fe73 	bl	8001e6c <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800118c:	f000 fb3a 	bl	8001804 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001198:	2303      	movs	r3, #3
 800119a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_ADC1_Init+0xbc>)
 80011a2:	f001 f937 	bl	8002414 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011ac:	f000 fb2a 	bl	8001804 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_ADC1_Init+0xc4>)
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011b8:	2307      	movs	r3, #7
 80011ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_ADC1_Init+0xbc>)
 80011c2:	f001 f927 	bl	8002414 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80011cc:	f000 fb1a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001fc 	.word	0x200001fc
 80011dc:	40012000 	.word	0x40012000
 80011e0:	10000012 	.word	0x10000012

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_TIM2_Init+0x98>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 642;
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_TIM2_Init+0x98>)
 800120a:	f240 2282 	movw	r2, #642	; 0x282
 800120e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM2_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_TIM2_Init+0x98>)
 8001218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_TIM2_Init+0x98>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_TIM2_Init+0x98>)
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_TIM2_Init+0x98>)
 800122e:	f002 ffd5 	bl	80041dc <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 fae4 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_TIM2_Init+0x98>)
 800124a:	f003 f9f7 	bl	800463c <HAL_TIM_ConfigClockSource>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001254:	f000 fad6 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001258:	2320      	movs	r3, #32
 800125a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM2_Init+0x98>)
 8001266:	f003 fc13 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001270:	f000 fac8 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002a4 	.word	0x200002a4

08001280 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_TIM6_Init+0x64>)
 8001290:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <MX_TIM6_Init+0x68>)
 8001292:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 642;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_TIM6_Init+0x64>)
 8001296:	f240 2282 	movw	r2, #642	; 0x282
 800129a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_TIM6_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012b2:	f002 ff93 	bl	80041dc <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012bc:	f000 faa2 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012c0:	2320      	movs	r3, #32
 80012c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012ce:	f003 fbdf 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012d8:	f000 fa94 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200002ec 	.word	0x200002ec
 80012e8:	40001000 	.word	0x40001000

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f003 fc44 	bl	8004bb0 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 fa69 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000334 	.word	0x20000334
 800133c:	40004400 	.word	0x40004400

08001340 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_DMA_Init+0x3c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <MX_DMA_Init+0x3c>)
 8001350:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_DMA_Init+0x3c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	2038      	movs	r0, #56	; 0x38
 8001368:	f001 fbbc 	bl	8002ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800136c:	2038      	movs	r0, #56	; 0x38
 800136e:	f001 fbd5 	bl	8002b1c <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_GPIO_Init+0xd0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <MX_GPIO_Init+0xd4>)
 800140c:	f002 f898 	bl	8003540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_GPIO_Init+0xd8>)
 8001428:	f001 fef6 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800142c:	2320      	movs	r3, #32
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_GPIO_Init+0xd4>)
 8001444:	f001 fee8 	bl	8003218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800

0800145c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	buf_full = 1;
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000038c 	.word	0x2000038c

0800147c <FFT_FreqCalculate>:


void FFT_FreqCalculate(CalcVals_t* calc, AdcVals_t* raw)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
// there should be FFT implemented
	calc->freq = raw->volt;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <AverageTempCalculate>:

void AverageTempCalculate(CalcVals_t* calc, AdcVals_t* raw)
{
 800149e:	b590      	push	{r4, r7, lr}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
	uint8_t i;

	// check temperature buffer if full -> reset
	if(calc->count == 15) calc->count = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	d103      	bne.n	80014ba <AverageTempCalculate+0x1c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	// add Temperature value to the buffer
	calc->buff[calc->count++] = TempCalculate(raw->temp);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	b299      	uxth	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	b2d0      	uxtb	r0, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 80014d0:	461c      	mov	r4, r3
 80014d2:	4608      	mov	r0, r1
 80014d4:	f000 f840 	bl	8001558 <TempCalculate>
 80014d8:	eef0 7a40 	vmov.f32	s15, s0
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	00a3      	lsls	r3, r4, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	edc3 7a00 	vstr	s15, [r3]

	calc->avg = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44

	for(i = 0; i < 32; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e01b      	b.n	800152c <AverageTempCalculate+0x8e>
	{
		if(calc->buff[i] == 0) break;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	d014      	beq.n	8001534 <AverageTempCalculate+0x96>
		calc->avg += calc->buff[i];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for(i = 0; i < 32; i++)
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	3301      	adds	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b1f      	cmp	r3, #31
 8001530:	d9e0      	bls.n	80014f4 <AverageTempCalculate+0x56>
 8001532:	e000      	b.n	8001536 <AverageTempCalculate+0x98>
		if(calc->buff[i] == 0) break;
 8001534:	bf00      	nop
	}

	calc->avg /= i;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}

08001558 <TempCalculate>:

float TempCalculate(uint16_t ADC_value)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
	float temp = (((ADC_value * V_REFF / 4095 - V25) / AVG_SLOP) + 25);
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fffd 	bl	8000564 <__aeabi_i2d>
 800156a:	a31e      	add	r3, pc, #120	; (adr r3, 80015e4 <TempCalculate+0x8c>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff f862 	bl	8000638 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	a31b      	add	r3, pc, #108	; (adr r3, 80015ec <TempCalculate+0x94>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f983 	bl	800088c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	a319      	add	r3, pc, #100	; (adr r3, 80015f4 <TempCalculate+0x9c>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7fe fe98 	bl	80002c8 <__aeabi_dsub>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	a316      	add	r3, pc, #88	; (adr r3, 80015fc <TempCalculate+0xa4>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f971 	bl	800088c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <TempCalculate+0x88>)
 80015b8:	f7fe fe88 	bl	80002cc <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fb10 	bl	8000be8 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	60fb      	str	r3, [r7, #12]

	return temp;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	ee07 3a90 	vmov	s15, r3

}
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	f3af 8000 	nop.w
 80015e0:	40390000 	.word	0x40390000
 80015e4:	66666666 	.word	0x66666666
 80015e8:	400a6666 	.word	0x400a6666
 80015ec:	00000000 	.word	0x00000000
 80015f0:	40affe00 	.word	0x40affe00
 80015f4:	851eb852 	.word	0x851eb852
 80015f8:	3fe851eb 	.word	0x3fe851eb
 80015fc:	47ae147b 	.word	0x47ae147b
 8001600:	3f647ae1 	.word	0x3f647ae1

08001604 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b096      	sub	sp, #88	; 0x58
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	AdcVals_t raw;
	CalcVals_t calculated = {0};
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	224c      	movs	r2, #76	; 0x4c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f006 ffe9 	bl	80085ec <memset>

	HAL_TIM_Base_Start(&htim2);
 800161a:	4819      	ldr	r0, [pc, #100]	; (8001680 <StartDefaultTask+0x7c>)
 800161c:	f002 fe2e 	bl	800427c <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, &raw, 2);
 8001620:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001624:	2202      	movs	r2, #2
 8001626:	4619      	mov	r1, r3
 8001628:	4816      	ldr	r0, [pc, #88]	; (8001684 <StartDefaultTask+0x80>)
 800162a:	f000 fdc1 	bl	80021b0 <HAL_ADC_Start_DMA>

	for(;;)
	{
		// Check if there is some messages in queue
//		if(osMessageQueueGetCount(myQueue01Handle)) {
		if(buf_full) {
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <StartDefaultTask+0x84>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d01f      	beq.n	8001678 <StartDefaultTask+0x74>
			// Receiving a message
//			if(osMessageQueueGet(myQueue01Handle, (void*)&raw, 0, 0) != osOK) Error_Handler();
			// calculate temp value then average value and put it in structure
			AverageTempCalculate(&calculated ,&raw);
 8001638:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff2b 	bl	800149e <AverageTempCalculate>
			// FFT frequency calculaton was not implemented
			FFT_FreqCalculate(&calculated ,&raw);
 8001648:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff12 	bl	800147c <FFT_FreqCalculate>

			//Put calculated data in queue to be send over UART
			if(osMessageQueuePut(SendQueueHandle, (void*)&calculated, 0, 0) != osOK) Error_Handler();
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <StartDefaultTask+0x88>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	f107 0108 	add.w	r1, r7, #8
 8001660:	2300      	movs	r3, #0
 8001662:	2200      	movs	r2, #0
 8001664:	f004 f8a6 	bl	80057b4 <osMessageQueuePut>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <StartDefaultTask+0x6e>
 800166e:	f000 f8c9 	bl	8001804 <Error_Handler>
			buf_full = 0;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <StartDefaultTask+0x84>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
		}

		osDelay(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f003 ff7b 	bl	8005574 <osDelay>
		if(buf_full) {
 800167e:	e7d6      	b.n	800162e <StartDefaultTask+0x2a>
 8001680:	200002a4 	.word	0x200002a4
 8001684:	200001fc 	.word	0x200001fc
 8001688:	2000038c 	.word	0x2000038c
 800168c:	20000384 	.word	0x20000384

08001690 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0a6      	sub	sp, #152	; 0x98
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	uint8_t txbuf[64];
  /* Infinite loop */
  for(;;)
  {
	// Check if there is some messages in queue
	if(osMessageQueueGetCount(SendQueueHandle)) {
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <StartSendTask+0x70>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 f947 	bl	8005930 <osMessageQueueGetCount>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d026      	beq.n	80016f6 <StartSendTask+0x66>
		// Receiving a message
		if(osMessageQueueGet(SendQueueHandle, (void*)&vals, 0, 0) != osOK) Error_Handler();
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <StartSendTask+0x70>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80016b0:	2300      	movs	r3, #0
 80016b2:	2200      	movs	r2, #0
 80016b4:	f004 f8de 	bl	8005874 <osMessageQueueGet>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <StartSendTask+0x32>
 80016be:	f000 f8a1 	bl	8001804 <Error_Handler>

		sprintf((char*)txbuf, "Average Temperature: %f\r\n", vals.avg);
 80016c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff5e 	bl	8000588 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	f107 000c 	add.w	r0, r7, #12
 80016d4:	490b      	ldr	r1, [pc, #44]	; (8001704 <StartSendTask+0x74>)
 80016d6:	f007 fbfb 	bl	8008ed0 <siprintf>
		HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd96 	bl	8000210 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f107 010c 	add.w	r1, r7, #12
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <StartSendTask+0x78>)
 80016f2:	f003 faaa 	bl	8004c4a <HAL_UART_Transmit>

	}
    osDelay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f003 ff3c 	bl	8005574 <osDelay>
	if(osMessageQueueGetCount(SendQueueHandle)) {
 80016fc:	e7cc      	b.n	8001698 <StartSendTask+0x8>
 80016fe:	bf00      	nop
 8001700:	20000384 	.word	0x20000384
 8001704:	0800b3fc 	.word	0x0800b3fc
 8001708:	20000334 	.word	0x20000334

0800170c <Callback01>:
  /* USER CODE END StartSendTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

	AdcVals_t adc_vals;

	// Get ADCs here
	HAL_ADC_Start(&hadc1);
 8001714:	4816      	ldr	r0, [pc, #88]	; (8001770 <Callback01+0x64>)
 8001716:	f000 fbed 	bl	8001ef4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 800171a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <Callback01+0x64>)
 8001720:	f000 fcba 	bl	8002098 <HAL_ADC_PollForConversion>
	adc_vals.volt = HAL_ADC_GetValue(&hadc1);
 8001724:	4812      	ldr	r0, [pc, #72]	; (8001770 <Callback01+0x64>)
 8001726:	f000 fe53 	bl	80023d0 <HAL_ADC_GetValue>
 800172a:	4603      	mov	r3, r0
 800172c:	b29b      	uxth	r3, r3
 800172e:	81bb      	strh	r3, [r7, #12]

	HAL_ADC_Start(&hadc1);
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <Callback01+0x64>)
 8001732:	f000 fbdf 	bl	8001ef4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8001736:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <Callback01+0x64>)
 800173c:	f000 fcac 	bl	8002098 <HAL_ADC_PollForConversion>
	adc_vals.temp = HAL_ADC_GetValue(&hadc1);
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <Callback01+0x64>)
 8001742:	f000 fe45 	bl	80023d0 <HAL_ADC_GetValue>
 8001746:	4603      	mov	r3, r0
 8001748:	b29b      	uxth	r3, r3
 800174a:	81fb      	strh	r3, [r7, #14]

	if(osMessageQueuePut(myQueue01Handle, (void*)&adc_vals, 0, 0) != osOK) Error_Handler();
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <Callback01+0x68>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	f107 010c 	add.w	r1, r7, #12
 8001754:	2300      	movs	r3, #0
 8001756:	2200      	movs	r2, #0
 8001758:	f004 f82c 	bl	80057b4 <osMessageQueuePut>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <Callback01+0x5a>
 8001762:	f000 f84f 	bl	8001804 <Error_Handler>
  /* USER CODE END Callback01 */
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001fc 	.word	0x200001fc
 8001774:	20000380 	.word	0x20000380

08001778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800178a:	f000 fb4f 	bl	8001e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM6) {
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d127      	bne.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0x70>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001798:	2120      	movs	r1, #32
 800179a:	4817      	ldr	r0, [pc, #92]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800179c:	f001 fee9 	bl	8003572 <HAL_GPIO_TogglePin>

	  AdcVals_t adc_vals;

	  // Get ADCs here
	  HAL_ADC_Start(&hadc1);
 80017a0:	4816      	ldr	r0, [pc, #88]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017a2:	f000 fba7 	bl	8001ef4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 500);
 80017a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017aa:	4814      	ldr	r0, [pc, #80]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017ac:	f000 fc74 	bl	8002098 <HAL_ADC_PollForConversion>
	  adc_vals.volt = HAL_ADC_GetValue(&hadc1);
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017b2:	f000 fe0d 	bl	80023d0 <HAL_ADC_GetValue>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	81bb      	strh	r3, [r7, #12]

	  HAL_ADC_Start(&hadc1);
 80017bc:	480f      	ldr	r0, [pc, #60]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017be:	f000 fb99 	bl	8001ef4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 500);
 80017c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017c8:	f000 fc66 	bl	8002098 <HAL_ADC_PollForConversion>
	  adc_vals.temp = HAL_ADC_GetValue(&hadc1);
 80017cc:	480b      	ldr	r0, [pc, #44]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017ce:	f000 fdff 	bl	80023d0 <HAL_ADC_GetValue>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	81fb      	strh	r3, [r7, #14]

	  if(osMessageQueuePut(myQueue01Handle, (void*)&adc_vals, 0, 0) != osOK);// Error_Handler();
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f107 010c 	add.w	r1, r7, #12
 80017e0:	2300      	movs	r3, #0
 80017e2:	2200      	movs	r2, #0
 80017e4:	f003 ffe6 	bl	80057b4 <osMessageQueuePut>
  }
  /* USER CODE END Callback 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40000400 	.word	0x40000400
 80017f4:	40001000 	.word	0x40001000
 80017f8:	40020000 	.word	0x40020000
 80017fc:	200001fc 	.word	0x200001fc
 8001800:	20000380 	.word	0x20000380

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>
	...

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_MspInit+0x54>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_MspInit+0x54>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x54>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_MspInit+0x54>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_MspInit+0x54>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_MspInit+0x54>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	210f      	movs	r1, #15
 8001852:	f06f 0001 	mvn.w	r0, #1
 8001856:	f001 f945 	bl	8002ae4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <HAL_ADC_MspInit+0xdc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d157      	bne.n	800193a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_ADC_MspInit+0xe0>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <HAL_ADC_MspInit+0xe0>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_ADC_MspInit+0xe0>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_ADC_MspInit+0xe0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_ADC_MspInit+0xe0>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_ADC_MspInit+0xe0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018c2:	2301      	movs	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c6:	2303      	movs	r3, #3
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	481d      	ldr	r0, [pc, #116]	; (800194c <HAL_ADC_MspInit+0xe4>)
 80018d6:	f001 fc9f 	bl	8003218 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_ADC_MspInit+0xec>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 80018f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 80018fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001900:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 8001904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001908:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 800190c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001910:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 8001920:	f001 f90a 	bl	8002b38 <HAL_DMA_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800192a:	f7ff ff6b 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 8001932:	639a      	str	r2, [r3, #56]	; 0x38
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_ADC_MspInit+0xe8>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40012000 	.word	0x40012000
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	20000244 	.word	0x20000244
 8001954:	40026410 	.word	0x40026410

08001958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d116      	bne.n	8001998 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_TIM_Base_MspInit+0x80>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_TIM_Base_MspInit+0x80>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_TIM_Base_MspInit+0x80>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	201c      	movs	r0, #28
 800198c:	f001 f8aa 	bl	8002ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001990:	201c      	movs	r0, #28
 8001992:	f001 f8c3 	bl	8002b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001996:	e01a      	b.n	80019ce <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_TIM_Base_MspInit+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d115      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_TIM_Base_MspInit+0x80>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_TIM_Base_MspInit+0x80>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_TIM_Base_MspInit+0x80>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2105      	movs	r1, #5
 80019c2:	2036      	movs	r0, #54	; 0x36
 80019c4:	f001 f88e 	bl	8002ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c8:	2036      	movs	r0, #54	; 0x36
 80019ca:	f001 f8a7 	bl	8002b1c <HAL_NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40001000 	.word	0x40001000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <HAL_UART_MspInit+0x84>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12b      	bne.n	8001a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <HAL_UART_MspInit+0x8c>)
 8001a56:	f001 fbdf 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40004400 	.word	0x40004400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_InitTick+0xe4>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <HAL_InitTick+0xe4>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_InitTick+0xe4>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a9c:	f107 0210 	add.w	r2, r7, #16
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fe98 	bl	80037dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ab6:	f001 fe69 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8001aba:	6378      	str	r0, [r7, #52]	; 0x34
 8001abc:	e004      	b.n	8001ac8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001abe:	f001 fe65 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <HAL_InitTick+0xe8>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_InitTick+0xec>)
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <HAL_InitTick+0xf0>)
 8001ada:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_InitTick+0xec>)
 8001ade:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_InitTick+0xec>)
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_InitTick+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_InitTick+0xec>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_InitTick+0xec>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001afc:	4817      	ldr	r0, [pc, #92]	; (8001b5c <HAL_InitTick+0xec>)
 8001afe:	f002 fb6d 	bl	80041dc <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11b      	bne.n	8001b48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001b10:	4812      	ldr	r0, [pc, #72]	; (8001b5c <HAL_InitTick+0xec>)
 8001b12:	f002 fc1b 	bl	800434c <HAL_TIM_Base_Start_IT>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b24:	201d      	movs	r0, #29
 8001b26:	f000 fff9 	bl	8002b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d808      	bhi.n	8001b42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	201d      	movs	r0, #29
 8001b36:	f000 ffd5 	bl	8002ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0xf4>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e002      	b.n	8001b48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3738      	adds	r7, #56	; 0x38
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	20000390 	.word	0x20000390
 8001b60:	40000400 	.word	0x40000400
 8001b64:	20000004 	.word	0x20000004

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM2_IRQHandler+0x10>)
 8001b9a:	f002 fc47 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002a4 	.word	0x200002a4

08001ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM3_IRQHandler+0x10>)
 8001bae:	f002 fc3d 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000390 	.word	0x20000390

08001bbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM6_DAC_IRQHandler+0x10>)
 8001bc2:	f002 fc33 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200002ec 	.word	0x200002ec

08001bd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA2_Stream0_IRQHandler+0x10>)
 8001bd6:	f001 f8b5 	bl	8002d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000244 	.word	0x20000244

08001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_kill>:

int _kill(int pid, int sig)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bfe:	f006 fcbd 	bl	800857c <__errno>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2216      	movs	r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
  return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_exit>:

void _exit (int status)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffe7 	bl	8001bf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c26:	e7fe      	b.n	8001c26 <_exit+0x12>

08001c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
  }

  return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
  }
  return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f006 fc22 	bl	800857c <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20020000 	.word	0x20020000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	200003d8 	.word	0x200003d8
 8001d6c:	20004d40 	.word	0x20004d40

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db0:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dbe:	f7ff ffd7 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 fbe1 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff f8e1 	bl	8000f8c <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dd8:	0800b8c4 	.word	0x0800b8c4
  ldr r2, =_sbss
 8001ddc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001de0:	20004d40 	.word	0x20004d40

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_Init+0x40>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_Init+0x40>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x40>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fe5c 	bl	8002ace <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	200f      	movs	r0, #15
 8001e18:	f7ff fe2a 	bl	8001a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fcf8 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	200003dc 	.word	0x200003dc

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200003dc 	.word	0x200003dc

08001e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e033      	b.n	8001eea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fcec 	bl	8001868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eb2:	f023 0302 	bic.w	r3, r3, #2
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fbda 	bl	8002678 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eda:	e001      	b.n	8001ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Start+0x1a>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0b2      	b.n	8002074 <HAL_ADC_Start+0x180>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d018      	beq.n	8001f56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f34:	4b52      	ldr	r3, [pc, #328]	; (8002080 <HAL_ADC_Start+0x18c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_ADC_Start+0x190>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9a      	lsrs	r2, r3, #18
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f48:	e002      	b.n	8001f50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d17a      	bne.n	800205a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f023 0206 	bic.w	r2, r3, #6
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_ADC_Start+0x194>)
 8001fc2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12a      	bne.n	8002030 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_ADC_Start+0x198>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d015      	beq.n	8002010 <HAL_ADC_Start+0x11c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a29      	ldr	r2, [pc, #164]	; (8002090 <HAL_ADC_Start+0x19c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d105      	bne.n	8001ffa <HAL_ADC_Start+0x106>
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_ADC_Start+0x194>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_ADC_Start+0x1a0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d136      	bne.n	8002072 <HAL_ADC_Start+0x17e>
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_ADC_Start+0x194>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d130      	bne.n	8002072 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d129      	bne.n	8002072 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	e020      	b.n	8002072 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_ADC_Start+0x198>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11b      	bne.n	8002072 <HAL_ADC_Start+0x17e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d114      	bne.n	8002072 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e00b      	b.n	8002072 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000000 	.word	0x20000000
 8002084:	431bde83 	.word	0x431bde83
 8002088:	40012300 	.word	0x40012300
 800208c:	40012000 	.word	0x40012000
 8002090:	40012100 	.word	0x40012100
 8002094:	40012200 	.word	0x40012200

08002098 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b4:	d113      	bne.n	80020de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c4:	d10b      	bne.n	80020de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e063      	b.n	80021a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020de:	f7ff feb9 	bl	8001e54 <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e4:	e021      	b.n	800212a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ec:	d01d      	beq.n	800212a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_ADC_PollForConversion+0x6c>
 80020f4:	f7ff feae 	bl	8001e54 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d212      	bcs.n	800212a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d00b      	beq.n	800212a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e03d      	b.n	80021a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	d1d6      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0212 	mvn.w	r2, #18
 8002140:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d123      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11f      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800217c:	2b00      	cmp	r3, #0
 800217e:	d111      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Start_DMA+0x1e>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0e9      	b.n	80023a2 <HAL_ADC_Start_DMA+0x1f2>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d018      	beq.n	8002216 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_ADC_Start_DMA+0x1fc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6d      	ldr	r2, [pc, #436]	; (80023b0 <HAL_ADC_Start_DMA+0x200>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0c9a      	lsrs	r2, r3, #18
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002208:	e002      	b.n	8002210 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	3b01      	subs	r3, #1
 800220e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002224:	d107      	bne.n	8002236 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002234:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	f040 80a1 	bne.w	8002388 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002270:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002284:	d106      	bne.n	8002294 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f023 0206 	bic.w	r2, r3, #6
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
 8002292:	e002      	b.n	800229a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a2:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <HAL_ADC_Start_DMA+0x204>)
 80022a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4a43      	ldr	r2, [pc, #268]	; (80023b8 <HAL_ADC_Start_DMA+0x208>)
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_ADC_Start_DMA+0x20c>)
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <HAL_ADC_Start_DMA+0x210>)
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	334c      	adds	r3, #76	; 0x4c
 80022f2:	4619      	mov	r1, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f000 fccc 	bl	8002c94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2b00      	cmp	r3, #0
 8002306:	d12a      	bne.n	800235e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <HAL_ADC_Start_DMA+0x214>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d015      	beq.n	800233e <HAL_ADC_Start_DMA+0x18e>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <HAL_ADC_Start_DMA+0x218>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d105      	bne.n	8002328 <HAL_ADC_Start_DMA+0x178>
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_ADC_Start_DMA+0x204>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_ADC_Start_DMA+0x21c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d136      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_ADC_Start_DMA+0x204>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d130      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d129      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e020      	b.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_ADC_Start_DMA+0x214>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d11b      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d114      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000
 80023b0:	431bde83 	.word	0x431bde83
 80023b4:	40012300 	.word	0x40012300
 80023b8:	08002871 	.word	0x08002871
 80023bc:	0800292b 	.word	0x0800292b
 80023c0:	08002947 	.word	0x08002947
 80023c4:	40012000 	.word	0x40012000
 80023c8:	40012100 	.word	0x40012100
 80023cc:	40012200 	.word	0x40012200

080023d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1c>
 800242c:	2302      	movs	r3, #2
 800242e:	e113      	b.n	8002658 <HAL_ADC_ConfigChannel+0x244>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d925      	bls.n	800248c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43da      	mvns	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	400a      	ands	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	4603      	mov	r3, r0
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4403      	add	r3, r0
 800247e:	3b1e      	subs	r3, #30
 8002480:	409a      	lsls	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	e022      	b.n	80024d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	2207      	movs	r2, #7
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	400a      	ands	r2, r1
 80024ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4403      	add	r3, r0
 80024c8:	409a      	lsls	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d824      	bhi.n	8002524 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3b05      	subs	r3, #5
 80024ec:	221f      	movs	r2, #31
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b05      	subs	r3, #5
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	635a      	str	r2, [r3, #52]	; 0x34
 8002522:	e04c      	b.n	80025be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d824      	bhi.n	8002576 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b23      	subs	r3, #35	; 0x23
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	3b23      	subs	r3, #35	; 0x23
 8002568:	fa00 f203 	lsl.w	r2, r0, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
 8002574:	e023      	b.n	80025be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b41      	subs	r3, #65	; 0x41
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b41      	subs	r3, #65	; 0x41
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025be:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_ADC_ConfigChannel+0x250>)
 80025c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_ADC_ConfigChannel+0x254>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10f      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d8>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d10b      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <HAL_ADC_ConfigChannel+0x254>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_ADC_ConfigChannel+0x23a>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <HAL_ADC_ConfigChannel+0x258>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x1f4>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b11      	cmp	r3, #17
 8002606:	d122      	bne.n	800264e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_ADC_ConfigChannel+0x258>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_ADC_ConfigChannel+0x25c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_ADC_ConfigChannel+0x260>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	0c9a      	lsrs	r2, r3, #18
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40012300 	.word	0x40012300
 8002668:	40012000 	.word	0x40012000
 800266c:	10000012 	.word	0x10000012
 8002670:	20000000 	.word	0x20000000
 8002674:	431bde83 	.word	0x431bde83

08002678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002680:	4b79      	ldr	r3, [pc, #484]	; (8002868 <ADC_Init+0x1f0>)
 8002682:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	4a58      	ldr	r2, [pc, #352]	; (800286c <ADC_Init+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6899      	ldr	r1, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	e00f      	b.n	8002776 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002774:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0202 	bic.w	r2, r2, #2
 8002784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7e1b      	ldrb	r3, [r3, #24]
 8002790:	005a      	lsls	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	3b01      	subs	r3, #1
 80027d0:	035a      	lsls	r2, r3, #13
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	e007      	b.n	80027ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	3b01      	subs	r3, #1
 8002808:	051a      	lsls	r2, r3, #20
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282e:	025a      	lsls	r2, r3, #9
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6899      	ldr	r1, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	029a      	lsls	r2, r3, #10
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40012300 	.word	0x40012300
 800286c:	0f000001 	.word	0x0f000001

08002870 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d13c      	bne.n	8002904 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d12b      	bne.n	80028fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d127      	bne.n	80028fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d119      	bne.n	80028fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0220 	bic.w	r2, r2, #32
 80028d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7fe fdad 	bl	800145c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002902:	e00e      	b.n	8002922 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fd74 	bl	80023fe <HAL_ADC_ErrorCallback>
}
 8002916:	e004      	b.n	8002922 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff fd56 	bl	80023ea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f043 0204 	orr.w	r2, r3, #4
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff fd49 	bl	80023fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800299c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	60d3      	str	r3, [r2, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <__NVIC_GetPriorityGrouping+0x18>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 0307 	and.w	r3, r3, #7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0b      	blt.n	8002a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <__NVIC_EnableIRQ+0x38>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	; (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	; (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f1c3 0307 	rsb	r3, r3, #7
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	bf28      	it	cs
 8002a86:	2304      	movcs	r3, #4
 8002a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d902      	bls.n	8002a98 <NVIC_EncodePriority+0x30>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b03      	subs	r3, #3
 8002a96:	e000      	b.n	8002a9a <NVIC_EncodePriority+0x32>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	4313      	orrs	r3, r2
         );
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff4c 	bl	8002974 <__NVIC_SetPriorityGrouping>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af6:	f7ff ff61 	bl	80029bc <__NVIC_GetPriorityGrouping>
 8002afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f7ff ffb1 	bl	8002a68 <NVIC_EncodePriority>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff80 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff54 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff f986 	bl	8001e54 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e099      	b.n	8002c88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b74:	e00f      	b.n	8002b96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b76:	f7ff f96d 	bl	8001e54 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d908      	bls.n	8002b96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e078      	b.n	8002c88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e8      	bne.n	8002b76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_DMA_Init+0x158>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d107      	bne.n	8002c00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0307 	bic.w	r3, r3, #7
 8002c16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d117      	bne.n	8002c5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa6f 	bl	8003120 <DMA_CheckFifoParam>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c56:	2301      	movs	r3, #1
 8002c58:	e016      	b.n	8002c88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa26 	bl	80030b4 <DMA_CalcBaseAndBitshift>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	223f      	movs	r2, #63	; 0x3f
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	f010803f 	.word	0xf010803f

08002c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Start_IT+0x26>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e040      	b.n	8002d3c <HAL_DMA_Start_IT+0xa8>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d12f      	bne.n	8002d2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f9b8 	bl	8003058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	223f      	movs	r2, #63	; 0x3f
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0216 	orr.w	r2, r2, #22
 8002d02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e005      	b.n	8002d3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d50:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <HAL_DMA_IRQHandler+0x248>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a8e      	ldr	r2, [pc, #568]	; (8002f90 <HAL_DMA_IRQHandler+0x24c>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0a9b      	lsrs	r3, r3, #10
 8002d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2208      	movs	r2, #8
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	2201      	movs	r2, #1
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	2204      	movs	r2, #4
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2204      	movs	r2, #4
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	2210      	movs	r2, #16
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d043      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03c      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2210      	movs	r2, #16
 8002e40:	409a      	lsls	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d024      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
 8002e72:	e01f      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	e016      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0208 	bic.w	r2, r2, #8
 8002ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2220      	movs	r2, #32
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 808f 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8087 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	2220      	movs	r2, #32
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d136      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0216 	bic.w	r2, r2, #22
 8002efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x1da>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0208 	bic.w	r2, r2, #8
 8002f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	223f      	movs	r2, #63	; 0x3f
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d07e      	beq.n	8003050 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
        }
        return;
 8002f5a:	e079      	b.n	8003050 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d031      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e02c      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d023      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
 8002fa4:	e01e      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0210 	bic.w	r2, r2, #16
 8002fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d032      	beq.n	8003052 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d022      	beq.n	800303e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3301      	adds	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	d307      	bcc.n	800302c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f2      	bne.n	8003010 <HAL_DMA_IRQHandler+0x2cc>
 800302a:	e000      	b.n	800302e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800302c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e000      	b.n	8003052 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003050:	bf00      	nop
    }
  }
}
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d108      	bne.n	8003098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003096:	e007      	b.n	80030a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3b10      	subs	r3, #16
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <DMA_CalcBaseAndBitshift+0x64>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <DMA_CalcBaseAndBitshift+0x68>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d909      	bls.n	80030f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	659a      	str	r2, [r3, #88]	; 0x58
 80030f4:	e007      	b.n	8003106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	aaaaaaab 	.word	0xaaaaaaab
 800311c:	0800b4d0 	.word	0x0800b4d0

08003120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11f      	bne.n	800317a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d856      	bhi.n	80031ee <DMA_CheckFifoParam+0xce>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <DMA_CheckFifoParam+0x28>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800316b 	.word	0x0800316b
 8003150:	08003159 	.word	0x08003159
 8003154:	080031ef 	.word	0x080031ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003168:	e043      	b.n	80031f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003172:	d140      	bne.n	80031f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003178:	e03d      	b.n	80031f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d121      	bne.n	80031c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d837      	bhi.n	80031fa <DMA_CheckFifoParam+0xda>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x70>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031a7 	.word	0x080031a7
 8003198:	080031a1 	.word	0x080031a1
 800319c:	080031b9 	.word	0x080031b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e030      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d025      	beq.n	80031fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b6:	e022      	b.n	80031fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031c6:	e01c      	b.n	8003202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d903      	bls.n	80031d6 <DMA_CheckFifoParam+0xb6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031d4:	e018      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      break;
 80031da:	e015      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e00b      	b.n	8003206 <DMA_CheckFifoParam+0xe6>
      break;
 80031ee:	bf00      	nop
 80031f0:	e00a      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e008      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e006      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;   
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
    }
  } 
  
  return status; 
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e165      	b.n	8003500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 8154 	bne.w	80034fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d005      	beq.n	800326a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003266:	2b02      	cmp	r3, #2
 8003268:	d130      	bne.n	80032cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0201 	and.w	r2, r3, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d017      	beq.n	8003308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d123      	bne.n	800335c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80ae 	beq.w	80034fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_GPIO_Init+0x300>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a5c      	ldr	r2, [pc, #368]	; (8003518 <HAL_GPIO_Init+0x300>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b5a      	ldr	r3, [pc, #360]	; (8003518 <HAL_GPIO_Init+0x300>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ba:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_GPIO_Init+0x304>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4f      	ldr	r2, [pc, #316]	; (8003520 <HAL_GPIO_Init+0x308>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d025      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4e      	ldr	r2, [pc, #312]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <HAL_GPIO_Init+0x216>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <HAL_GPIO_Init+0x310>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_GPIO_Init+0x212>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4c      	ldr	r2, [pc, #304]	; (800352c <HAL_GPIO_Init+0x314>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_GPIO_Init+0x318>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00d      	beq.n	8003422 <HAL_GPIO_Init+0x20a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4a      	ldr	r2, [pc, #296]	; (8003534 <HAL_GPIO_Init+0x31c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x206>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a49      	ldr	r2, [pc, #292]	; (8003538 <HAL_GPIO_Init+0x320>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_GPIO_Init+0x202>
 8003416:	2306      	movs	r3, #6
 8003418:	e00c      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 800341a:	2307      	movs	r3, #7
 800341c:	e00a      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 800341e:	2305      	movs	r3, #5
 8003420:	e008      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 8003422:	2304      	movs	r3, #4
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 8003426:	2303      	movs	r3, #3
 8003428:	e004      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 800342a:	2302      	movs	r3, #2
 800342c:	e002      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_GPIO_Init+0x21c>
 8003432:	2300      	movs	r3, #0
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	f002 0203 	and.w	r2, r2, #3
 800343a:	0092      	lsls	r2, r2, #2
 800343c:	4093      	lsls	r3, r2
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003444:	4935      	ldr	r1, [pc, #212]	; (800351c <HAL_GPIO_Init+0x304>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003452:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_GPIO_Init+0x324>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003476:	4a31      	ldr	r2, [pc, #196]	; (800353c <HAL_GPIO_Init+0x324>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800347c:	4b2f      	ldr	r3, [pc, #188]	; (800353c <HAL_GPIO_Init+0x324>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <HAL_GPIO_Init+0x324>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_GPIO_Init+0x324>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <HAL_GPIO_Init+0x324>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_GPIO_Init+0x324>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <HAL_GPIO_Init+0x324>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3301      	adds	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2b0f      	cmp	r3, #15
 8003504:	f67f ae96 	bls.w	8003234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	40013800 	.word	0x40013800
 8003520:	40020000 	.word	0x40020000
 8003524:	40020400 	.word	0x40020400
 8003528:	40020800 	.word	0x40020800
 800352c:	40020c00 	.word	0x40020c00
 8003530:	40021000 	.word	0x40021000
 8003534:	40021400 	.word	0x40021400
 8003538:	40021800 	.word	0x40021800
 800353c:	40013c00 	.word	0x40013c00

08003540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	807b      	strh	r3, [r7, #2]
 800354c:	4613      	mov	r3, r2
 800354e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003550:	787b      	ldrb	r3, [r7, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800355c:	e003      	b.n	8003566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	041a      	lsls	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	619a      	str	r2, [r3, #24]
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	041a      	lsls	r2, r3, #16
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43d9      	mvns	r1, r3
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	400b      	ands	r3, r1
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	619a      	str	r2, [r3, #24]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7fe fbdc 	bl	8001e54 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7fe fbd8 	bl	8001e54 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f887 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f98e 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0800b4b8 	.word	0x0800b4b8
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000000 	.word	0x20000000

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	0800b4c8 	.word	0x0800b4c8

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	0800b4c8 	.word	0x0800b4c8

080037dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	220f      	movs	r2, #15
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_RCC_GetClockConfig+0x60>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40023c00 	.word	0x40023c00

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0ae      	sub	sp, #184	; 0xb8
 8003846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003866:	4bcb      	ldr	r3, [pc, #812]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b0c      	cmp	r3, #12
 8003870:	f200 8206 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x440>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038b1 	.word	0x080038b1
 8003880:	08003c81 	.word	0x08003c81
 8003884:	08003c81 	.word	0x08003c81
 8003888:	08003c81 	.word	0x08003c81
 800388c:	080038b9 	.word	0x080038b9
 8003890:	08003c81 	.word	0x08003c81
 8003894:	08003c81 	.word	0x08003c81
 8003898:	08003c81 	.word	0x08003c81
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	08003c81 	.word	0x08003c81
 80038a4:	08003c81 	.word	0x08003c81
 80038a8:	08003c81 	.word	0x08003c81
 80038ac:	08003ab1 	.word	0x08003ab1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4bb9      	ldr	r3, [pc, #740]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x358>)
 80038b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80038b6:	e1e7      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b8:	4bb8      	ldr	r3, [pc, #736]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x35c>)
 80038ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038be:	e1e3      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4bb4      	ldr	r3, [pc, #720]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038cc:	4bb1      	ldr	r3, [pc, #708]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d071      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d8:	4bae      	ldr	r3, [pc, #696]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80038e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038fe:	4622      	mov	r2, r4
 8003900:	462b      	mov	r3, r5
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	0159      	lsls	r1, r3, #5
 800390c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003910:	0150      	lsls	r0, r2, #5
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4621      	mov	r1, r4
 8003918:	1a51      	subs	r1, r2, r1
 800391a:	6439      	str	r1, [r7, #64]	; 0x40
 800391c:	4629      	mov	r1, r5
 800391e:	eb63 0301 	sbc.w	r3, r3, r1
 8003922:	647b      	str	r3, [r7, #68]	; 0x44
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003930:	4649      	mov	r1, r9
 8003932:	018b      	lsls	r3, r1, #6
 8003934:	4641      	mov	r1, r8
 8003936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800393a:	4641      	mov	r1, r8
 800393c:	018a      	lsls	r2, r1, #6
 800393e:	4641      	mov	r1, r8
 8003940:	1a51      	subs	r1, r2, r1
 8003942:	63b9      	str	r1, [r7, #56]	; 0x38
 8003944:	4649      	mov	r1, r9
 8003946:	eb63 0301 	sbc.w	r3, r3, r1
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003958:	4649      	mov	r1, r9
 800395a:	00cb      	lsls	r3, r1, #3
 800395c:	4641      	mov	r1, r8
 800395e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003962:	4641      	mov	r1, r8
 8003964:	00ca      	lsls	r2, r1, #3
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	4603      	mov	r3, r0
 800396c:	4622      	mov	r2, r4
 800396e:	189b      	adds	r3, r3, r2
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
 8003972:	462b      	mov	r3, r5
 8003974:	460a      	mov	r2, r1
 8003976:	eb42 0303 	adc.w	r3, r2, r3
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003988:	4629      	mov	r1, r5
 800398a:	024b      	lsls	r3, r1, #9
 800398c:	4621      	mov	r1, r4
 800398e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003992:	4621      	mov	r1, r4
 8003994:	024a      	lsls	r2, r1, #9
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039ac:	f7fd f96c 	bl	8000c88 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ba:	e067      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039bc:	4b75      	ldr	r3, [pc, #468]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80039cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039d6:	2300      	movs	r3, #0
 80039d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4621      	mov	r1, r4
 80039f8:	1a51      	subs	r1, r2, r1
 80039fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80039fc:	4629      	mov	r1, r5
 80039fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a10:	4649      	mov	r1, r9
 8003a12:	018b      	lsls	r3, r1, #6
 8003a14:	4641      	mov	r1, r8
 8003a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	018a      	lsls	r2, r1, #6
 8003a1e:	4641      	mov	r1, r8
 8003a20:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a24:	4649      	mov	r1, r9
 8003a26:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a3e:	4692      	mov	sl, r2
 8003a40:	469b      	mov	fp, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	eb1a 0303 	adds.w	r3, sl, r3
 8003a48:	623b      	str	r3, [r7, #32]
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	028b      	lsls	r3, r1, #10
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a68:	4621      	mov	r1, r4
 8003a6a:	028a      	lsls	r2, r1, #10
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a74:	2200      	movs	r2, #0
 8003a76:	673b      	str	r3, [r7, #112]	; 0x70
 8003a78:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a7e:	f7fd f903 	bl	8000c88 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4613      	mov	r3, r2
 8003a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003aae:	e0eb      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d06b      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac8:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	2200      	movs	r2, #0
 8003ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	663b      	str	r3, [r7, #96]	; 0x60
 8003adc:	2300      	movs	r3, #0
 8003ade:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0159      	lsls	r1, r3, #5
 8003af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af6:	0150      	lsls	r0, r2, #5
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4621      	mov	r1, r4
 8003afe:	1a51      	subs	r1, r2, r1
 8003b00:	61b9      	str	r1, [r7, #24]
 8003b02:	4629      	mov	r1, r5
 8003b04:	eb63 0301 	sbc.w	r3, r3, r1
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b16:	4659      	mov	r1, fp
 8003b18:	018b      	lsls	r3, r1, #6
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b20:	4651      	mov	r1, sl
 8003b22:	018a      	lsls	r2, r1, #6
 8003b24:	4651      	mov	r1, sl
 8003b26:	ebb2 0801 	subs.w	r8, r2, r1
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b44:	4690      	mov	r8, r2
 8003b46:	4699      	mov	r9, r3
 8003b48:	4623      	mov	r3, r4
 8003b4a:	eb18 0303 	adds.w	r3, r8, r3
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	462b      	mov	r3, r5
 8003b52:	eb49 0303 	adc.w	r3, r9, r3
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b64:	4629      	mov	r1, r5
 8003b66:	024b      	lsls	r3, r1, #9
 8003b68:	4621      	mov	r1, r4
 8003b6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b6e:	4621      	mov	r1, r4
 8003b70:	024a      	lsls	r2, r1, #9
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b84:	f7fd f880 	bl	8000c88 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b92:	e065      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x420>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba0:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	4611      	mov	r1, r2
 8003bac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003bba:	4642      	mov	r2, r8
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	f04f 0000 	mov.w	r0, #0
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	0159      	lsls	r1, r3, #5
 8003bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bcc:	0150      	lsls	r0, r2, #5
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	1a51      	subs	r1, r2, r1
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	4649      	mov	r1, r9
 8003bda:	eb63 0301 	sbc.w	r3, r3, r1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003bec:	4659      	mov	r1, fp
 8003bee:	018b      	lsls	r3, r1, #6
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	018a      	lsls	r2, r1, #6
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	1a54      	subs	r4, r2, r1
 8003bfe:	4659      	mov	r1, fp
 8003c00:	eb63 0501 	sbc.w	r5, r3, r1
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	00eb      	lsls	r3, r5, #3
 8003c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c12:	00e2      	lsls	r2, r4, #3
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	4643      	mov	r3, r8
 8003c1a:	18e3      	adds	r3, r4, r3
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	eb45 0303 	adc.w	r3, r5, r3
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c32:	4629      	mov	r1, r5
 8003c34:	028b      	lsls	r3, r1, #10
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	028a      	lsls	r2, r1, #10
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c48:	2200      	movs	r2, #0
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c52:	f7fd f819 	bl	8000c88 <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0f1b      	lsrs	r3, r3, #28
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c7e:	e003      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	37b8      	adds	r7, #184	; 0xb8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e28d      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8083 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cc0:	4b94      	ldr	r3, [pc, #592]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d019      	beq.n	8003d00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ccc:	4b91      	ldr	r3, [pc, #580]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cd8:	4b8e      	ldr	r3, [pc, #568]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce4:	d00c      	beq.n	8003d00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce6:	4b8b      	ldr	r3, [pc, #556]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d112      	bne.n	8003d18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf2:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	4b84      	ldr	r3, [pc, #528]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05b      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x124>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d157      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e25a      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d106      	bne.n	8003d30 <HAL_RCC_OscConfig+0x90>
 8003d22:	4b7c      	ldr	r3, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7b      	ldr	r2, [pc, #492]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCC_OscConfig+0xcc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0xb4>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b73      	ldr	r3, [pc, #460]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a72      	ldr	r2, [pc, #456]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0xcc>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b6c      	ldr	r3, [pc, #432]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe f86e 	bl	8001e54 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe f86a 	bl	8001e54 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e21f      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0xdc>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe f85a 	bl	8001e54 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe f856 	bl	8001e54 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e20b      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	4b57      	ldr	r3, [pc, #348]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x104>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d06f      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dd2:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d017      	beq.n	8003e0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dde:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d105      	bne.n	8003df6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dea:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x186>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1d3      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4937      	ldr	r1, [pc, #220]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	e03a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <HAL_RCC_OscConfig+0x278>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe f803 	bl	8001e54 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fd ffff 	bl	8001e54 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1b4      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4925      	ldr	r1, [pc, #148]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x278>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd ffe2 	bl	8001e54 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fd ffde 	bl	8001e54 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e193      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d036      	beq.n	8003f2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd ffc2 	bl	8001e54 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fd ffbe 	bl	8001e54 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e173      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x234>
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fd ffab 	bl	8001e54 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fd ffa7 	bl	8001e54 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d907      	bls.n	8003f20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e15c      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	42470000 	.word	0x42470000
 8003f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	4b8a      	ldr	r3, [pc, #552]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ea      	bne.n	8003f02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8097 	beq.w	8004068 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4b83      	ldr	r3, [pc, #524]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b7f      	ldr	r3, [pc, #508]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a7e      	ldr	r2, [pc, #504]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b7c      	ldr	r3, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b79      	ldr	r3, [pc, #484]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d118      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f76:	4b76      	ldr	r3, [pc, #472]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a75      	ldr	r2, [pc, #468]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f82:	f7fd ff67 	bl	8001e54 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fd ff63 	bl	8001e54 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e118      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_RCC_OscConfig+0x4b0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x31e>
 8003fb0:	4b66      	ldr	r3, [pc, #408]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	e01c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x358>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x340>
 8003fc6:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a60      	ldr	r2, [pc, #384]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	4b5e      	ldr	r3, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a5d      	ldr	r2, [pc, #372]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x358>
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a59      	ldr	r2, [pc, #356]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a56      	ldr	r2, [pc, #344]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8003ff2:	f023 0304 	bic.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fd ff28 	bl	8001e54 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fd ff24 	bl	8001e54 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0d7      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ee      	beq.n	8004008 <HAL_RCC_OscConfig+0x368>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd ff12 	bl	8001e54 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fd ff0e 	bl	8001e54 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0c1      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ee      	bne.n	8004034 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	4a3a      	ldr	r2, [pc, #232]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80ad 	beq.w	80041cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d060      	beq.n	8004140 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d145      	bne.n	8004112 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_RCC_OscConfig+0x4b4>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd fee2 	bl	8001e54 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd fede 	bl	8001e54 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e093      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	071b      	lsls	r3, r3, #28
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x4b4>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd feb3 	bl	8001e54 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd feaf 	bl	8001e54 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e064      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x452>
 8004110:	e05c      	b.n	80041cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x4b4>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd fe9c 	bl	8001e54 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fd fe98 	bl	8001e54 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e04d      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x4ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x480>
 800413e:	e045      	b.n	80041cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e040      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <HAL_RCC_OscConfig+0x538>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d030      	beq.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d129      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d122      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d119      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d10f      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e041      	b.n	8004272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fba8 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fafe 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d001      	beq.n	8004294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e046      	b.n	8004322 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_TIM_Base_Start+0xb4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d022      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d01d      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_TIM_Base_Start+0xb8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d018      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <HAL_TIM_Base_Start+0xbc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_TIM_Base_Start+0xc0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_TIM_Base_Start+0xc4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <HAL_TIM_Base_Start+0xc8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_TIM_Base_Start+0x70>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_TIM_Base_Start+0xcc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d111      	bne.n	8004310 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d010      	beq.n	8004320 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430e:	e007      	b.n	8004320 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40010400 	.word	0x40010400
 8004344:	40014000 	.word	0x40014000
 8004348:	40001800 	.word	0x40001800

0800434c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d001      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e04e      	b.n	8004402 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a23      	ldr	r2, [pc, #140]	; (8004410 <HAL_TIM_Base_Start_IT+0xc4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d022      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438e:	d01d      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <HAL_TIM_Base_Start_IT+0xc8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <HAL_TIM_Base_Start_IT+0xcc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_TIM_Base_Start_IT+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_TIM_Base_Start_IT+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_TIM_Base_Start_IT+0xd8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_TIM_Base_Start_IT+0xdc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d010      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	e007      	b.n	8004400 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40010400 	.word	0x40010400
 8004424:	40014000 	.word	0x40014000
 8004428:	40001800 	.word	0x40001800

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9b5 	bl	80047de <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9a7 	bl	80047ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f9b8 	bl	80047f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f98b 	bl	80047de <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f97d 	bl	80047ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f98e 	bl	80047f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f961 	bl	80047de <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f953 	bl	80047ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f964 	bl	80047f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f937 	bl	80047de <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f929 	bl	80047ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f93a 	bl	80047f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd f8e4 	bl	8001778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fae0 	bl	8004b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8ff 	bl	8004806 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 faaa 	bl	8004b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_TIM_ConfigClockSource+0x1c>
 8004654:	2302      	movs	r3, #2
 8004656:	e0b4      	b.n	80047c2 <HAL_TIM_ConfigClockSource+0x186>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d03e      	beq.n	8004710 <HAL_TIM_ConfigClockSource+0xd4>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	f200 8087 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	f000 8086 	beq.w	80047ae <HAL_TIM_ConfigClockSource+0x172>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d87f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d01a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xa6>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d87b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d050      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x11a>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d877      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d03c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0xfa>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d873      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d058      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x13a>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d86f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d064      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d86b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d060      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d867      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05c      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d05a      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15a>
 80046e0:	e062      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f000 f9ad 	bl	8004a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      break;
 800470e:	e04f      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f000 f996 	bl	8004a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004732:	609a      	str	r2, [r3, #8]
      break;
 8004734:	e03c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f90a 	bl	800495c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2150      	movs	r1, #80	; 0x50
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f963 	bl	8004a1a <TIM_ITRx_SetConfig>
      break;
 8004754:	e02c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f929 	bl	80049ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2160      	movs	r1, #96	; 0x60
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f953 	bl	8004a1a <TIM_ITRx_SetConfig>
      break;
 8004774:	e01c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	461a      	mov	r2, r3
 8004784:	f000 f8ea 	bl	800495c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2140      	movs	r1, #64	; 0x40
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f943 	bl	8004a1a <TIM_ITRx_SetConfig>
      break;
 8004794:	e00c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f000 f93a 	bl	8004a1a <TIM_ITRx_SetConfig>
      break;
 80047a6:	e003      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a40      	ldr	r2, [pc, #256]	; (8004930 <TIM_Base_SetConfig+0x114>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d00f      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3d      	ldr	r2, [pc, #244]	; (8004934 <TIM_Base_SetConfig+0x118>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3c      	ldr	r2, [pc, #240]	; (8004938 <TIM_Base_SetConfig+0x11c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3b      	ldr	r2, [pc, #236]	; (800493c <TIM_Base_SetConfig+0x120>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <TIM_Base_SetConfig+0x124>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d108      	bne.n	800486e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2f      	ldr	r2, [pc, #188]	; (8004930 <TIM_Base_SetConfig+0x114>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d02b      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487c:	d027      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2c      	ldr	r2, [pc, #176]	; (8004934 <TIM_Base_SetConfig+0x118>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d023      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2b      	ldr	r2, [pc, #172]	; (8004938 <TIM_Base_SetConfig+0x11c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01f      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2a      	ldr	r2, [pc, #168]	; (800493c <TIM_Base_SetConfig+0x120>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a29      	ldr	r2, [pc, #164]	; (8004940 <TIM_Base_SetConfig+0x124>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a28      	ldr	r2, [pc, #160]	; (8004944 <TIM_Base_SetConfig+0x128>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <TIM_Base_SetConfig+0x12c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a26      	ldr	r2, [pc, #152]	; (800494c <TIM_Base_SetConfig+0x130>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a25      	ldr	r2, [pc, #148]	; (8004950 <TIM_Base_SetConfig+0x134>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a24      	ldr	r2, [pc, #144]	; (8004954 <TIM_Base_SetConfig+0x138>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a23      	ldr	r2, [pc, #140]	; (8004958 <TIM_Base_SetConfig+0x13c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <TIM_Base_SetConfig+0x114>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0xf8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <TIM_Base_SetConfig+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d103      	bne.n	800491c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	615a      	str	r2, [r3, #20]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800
 800493c:	40000c00 	.word	0x40000c00
 8004940:	40010400 	.word	0x40010400
 8004944:	40014000 	.word	0x40014000
 8004948:	40014400 	.word	0x40014400
 800494c:	40014800 	.word	0x40014800
 8004950:	40001800 	.word	0x40001800
 8004954:	40001c00 	.word	0x40001c00
 8004958:	40002000 	.word	0x40002000

0800495c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 030a 	bic.w	r3, r3, #10
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b087      	sub	sp, #28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0210 	bic.w	r2, r3, #16
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	031b      	lsls	r3, r3, #12
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f043 0307 	orr.w	r3, r3, #7
 8004a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	021a      	lsls	r2, r3, #8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e05a      	b.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a21      	ldr	r2, [pc, #132]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d022      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d01d      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d018      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d10c      	bne.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40010400 	.word	0x40010400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40001800 	.word	0x40001800

08004b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e03f      	b.n	8004c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc ff02 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f929 	bl	8004e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b08a      	sub	sp, #40	; 0x28
 8004c4e:	af02      	add	r7, sp, #8
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d17c      	bne.n	8004d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_UART_Transmit+0x2c>
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e075      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Transmit+0x3e>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e06e      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	; 0x21
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fd f8d9 	bl	8001e54 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb8:	d108      	bne.n	8004ccc <HAL_UART_Transmit+0x82>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	e003      	b.n	8004cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cdc:	e02a      	b.n	8004d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2180      	movs	r1, #128	; 0x80
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f840 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e036      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	3302      	adds	r3, #2
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e007      	b.n	8004d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1cf      	bne.n	8004cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f810 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e006      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b090      	sub	sp, #64	; 0x40
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7e:	e050      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d86:	d04c      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8e:	f7fd f861 	bl	8001e54 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d241      	bcs.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dbe:	637a      	str	r2, [r7, #52]	; 0x34
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3314      	adds	r3, #20
 8004df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df2:	623a      	str	r2, [r7, #32]
 8004df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d09f      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3740      	adds	r7, #64	; 0x40
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b0c0      	sub	sp, #256	; 0x100
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	68d9      	ldr	r1, [r3, #12]
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	ea40 0301 	orr.w	r3, r0, r1
 8004e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ea4:	f021 010c 	bic.w	r1, r1, #12
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec6:	6999      	ldr	r1, [r3, #24]
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	ea40 0301 	orr.w	r3, r0, r1
 8004ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b8f      	ldr	r3, [pc, #572]	; (8005118 <UART_SetConfig+0x2cc>)
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d005      	beq.n	8004eec <UART_SetConfig+0xa0>
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b8d      	ldr	r3, [pc, #564]	; (800511c <UART_SetConfig+0x2d0>)
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d104      	bne.n	8004ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7fe fc62 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ef4:	e003      	b.n	8004efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ef6:	f7fe fc49 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004efa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	f040 810c 	bne.w	8005124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	1891      	adds	r1, r2, r2
 8004f24:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f26:	415b      	adcs	r3, r3
 8004f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f2e:	4621      	mov	r1, r4
 8004f30:	eb12 0801 	adds.w	r8, r2, r1
 8004f34:	4629      	mov	r1, r5
 8004f36:	eb43 0901 	adc.w	r9, r3, r1
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4e:	4690      	mov	r8, r2
 8004f50:	4699      	mov	r9, r3
 8004f52:	4623      	mov	r3, r4
 8004f54:	eb18 0303 	adds.w	r3, r8, r3
 8004f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	eb49 0303 	adc.w	r3, r9, r3
 8004f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	18db      	adds	r3, r3, r3
 8004f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f80:	4613      	mov	r3, r2
 8004f82:	eb42 0303 	adc.w	r3, r2, r3
 8004f86:	657b      	str	r3, [r7, #84]	; 0x54
 8004f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f90:	f7fb fe7a 	bl	8000c88 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4b61      	ldr	r3, [pc, #388]	; (8005120 <UART_SetConfig+0x2d4>)
 8004f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	011c      	lsls	r4, r3, #4
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe4:	4692      	mov	sl, r2
 8004fe6:	469b      	mov	fp, r3
 8004fe8:	4643      	mov	r3, r8
 8004fea:	eb1a 0303 	adds.w	r3, sl, r3
 8004fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800500c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005010:	460b      	mov	r3, r1
 8005012:	18db      	adds	r3, r3, r3
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
 8005016:	4613      	mov	r3, r2
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
 800501e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005026:	f7fb fe2f 	bl	8000c88 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4611      	mov	r1, r2
 8005030:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <UART_SetConfig+0x2d4>)
 8005032:	fba3 2301 	umull	r2, r3, r3, r1
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2264      	movs	r2, #100	; 0x64
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	1acb      	subs	r3, r1, r3
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005046:	4b36      	ldr	r3, [pc, #216]	; (8005120 <UART_SetConfig+0x2d4>)
 8005048:	fba3 2302 	umull	r2, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005054:	441c      	add	r4, r3
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005070:	415b      	adcs	r3, r3
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6339      	str	r1, [r7, #48]	; 0x30
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ac:	464b      	mov	r3, r9
 80050ae:	460a      	mov	r2, r1
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050cc:	460b      	mov	r3, r1
 80050ce:	18db      	adds	r3, r3, r3
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d2:	4613      	mov	r3, r2
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050e2:	f7fb fdd1 	bl	8000c88 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <UART_SetConfig+0x2d4>)
 80050ec:	fba3 1302 	umull	r1, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <UART_SetConfig+0x2d4>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 0207 	and.w	r2, r3, #7
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4422      	add	r2, r4
 8005112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005114:	e105      	b.n	8005322 <UART_SetConfig+0x4d6>
 8005116:	bf00      	nop
 8005118:	40011000 	.word	0x40011000
 800511c:	40011400 	.word	0x40011400
 8005120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800512e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005136:	4642      	mov	r2, r8
 8005138:	464b      	mov	r3, r9
 800513a:	1891      	adds	r1, r2, r2
 800513c:	6239      	str	r1, [r7, #32]
 800513e:	415b      	adcs	r3, r3
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005146:	4641      	mov	r1, r8
 8005148:	1854      	adds	r4, r2, r1
 800514a:	4649      	mov	r1, r9
 800514c:	eb43 0501 	adc.w	r5, r3, r1
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	00eb      	lsls	r3, r5, #3
 800515a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800515e:	00e2      	lsls	r2, r4, #3
 8005160:	4614      	mov	r4, r2
 8005162:	461d      	mov	r5, r3
 8005164:	4643      	mov	r3, r8
 8005166:	18e3      	adds	r3, r4, r3
 8005168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800516c:	464b      	mov	r3, r9
 800516e:	eb45 0303 	adc.w	r3, r5, r3
 8005172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005192:	4629      	mov	r1, r5
 8005194:	008b      	lsls	r3, r1, #2
 8005196:	4621      	mov	r1, r4
 8005198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519c:	4621      	mov	r1, r4
 800519e:	008a      	lsls	r2, r1, #2
 80051a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051a4:	f7fb fd70 	bl	8000c88 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4b60      	ldr	r3, [pc, #384]	; (8005330 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 2302 	umull	r2, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	011c      	lsls	r4, r3, #4
 80051b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	61b9      	str	r1, [r7, #24]
 80051d0:	415b      	adcs	r3, r3
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d8:	4641      	mov	r1, r8
 80051da:	1851      	adds	r1, r2, r1
 80051dc:	6139      	str	r1, [r7, #16]
 80051de:	4649      	mov	r1, r9
 80051e0:	414b      	adcs	r3, r1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f0:	4659      	mov	r1, fp
 80051f2:	00cb      	lsls	r3, r1, #3
 80051f4:	4651      	mov	r1, sl
 80051f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fa:	4651      	mov	r1, sl
 80051fc:	00ca      	lsls	r2, r1, #3
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	4603      	mov	r3, r0
 8005204:	4642      	mov	r2, r8
 8005206:	189b      	adds	r3, r3, r2
 8005208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800520c:	464b      	mov	r3, r9
 800520e:	460a      	mov	r2, r1
 8005210:	eb42 0303 	adc.w	r3, r2, r3
 8005214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	67bb      	str	r3, [r7, #120]	; 0x78
 8005222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005230:	4649      	mov	r1, r9
 8005232:	008b      	lsls	r3, r1, #2
 8005234:	4641      	mov	r1, r8
 8005236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523a:	4641      	mov	r1, r8
 800523c:	008a      	lsls	r2, r1, #2
 800523e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005242:	f7fb fd21 	bl	8000c88 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4b39      	ldr	r3, [pc, #228]	; (8005330 <UART_SetConfig+0x4e4>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	3332      	adds	r3, #50	; 0x32
 800525e:	4a34      	ldr	r2, [pc, #208]	; (8005330 <UART_SetConfig+0x4e4>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800526a:	441c      	add	r4, r3
 800526c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005270:	2200      	movs	r2, #0
 8005272:	673b      	str	r3, [r7, #112]	; 0x70
 8005274:	677a      	str	r2, [r7, #116]	; 0x74
 8005276:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	1891      	adds	r1, r2, r2
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	415b      	adcs	r3, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800528a:	4641      	mov	r1, r8
 800528c:	1851      	adds	r1, r2, r1
 800528e:	6039      	str	r1, [r7, #0]
 8005290:	4649      	mov	r1, r9
 8005292:	414b      	adcs	r3, r1
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a2:	4659      	mov	r1, fp
 80052a4:	00cb      	lsls	r3, r1, #3
 80052a6:	4651      	mov	r1, sl
 80052a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ac:	4651      	mov	r1, sl
 80052ae:	00ca      	lsls	r2, r1, #3
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	4603      	mov	r3, r0
 80052b6:	4642      	mov	r2, r8
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80052bc:	464b      	mov	r3, r9
 80052be:	460a      	mov	r2, r1
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	663b      	str	r3, [r7, #96]	; 0x60
 80052d0:	667a      	str	r2, [r7, #100]	; 0x64
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052de:	4649      	mov	r1, r9
 80052e0:	008b      	lsls	r3, r1, #2
 80052e2:	4641      	mov	r1, r8
 80052e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e8:	4641      	mov	r1, r8
 80052ea:	008a      	lsls	r2, r1, #2
 80052ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052f0:	f7fb fcca 	bl	8000c88 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <UART_SetConfig+0x4e4>)
 80052fa:	fba3 1302 	umull	r1, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2164      	movs	r1, #100	; 0x64
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	3332      	adds	r3, #50	; 0x32
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <UART_SetConfig+0x4e4>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4422      	add	r2, r4
 8005320:	609a      	str	r2, [r3, #8]
}
 8005322:	bf00      	nop
 8005324:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	51eb851f 	.word	0x51eb851f

08005334 <__NVIC_SetPriority>:
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005344:	2b00      	cmp	r3, #0
 8005346:	db0a      	blt.n	800535e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	490c      	ldr	r1, [pc, #48]	; (8005380 <__NVIC_SetPriority+0x4c>)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	0112      	lsls	r2, r2, #4
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	440b      	add	r3, r1
 8005358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800535c:	e00a      	b.n	8005374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4908      	ldr	r1, [pc, #32]	; (8005384 <__NVIC_SetPriority+0x50>)
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	3b04      	subs	r3, #4
 800536c:	0112      	lsls	r2, r2, #4
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	440b      	add	r3, r1
 8005372:	761a      	strb	r2, [r3, #24]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000e100 	.word	0xe000e100
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SysTick_Handler+0x1c>)
 800538e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005390:	f001 ffd6 	bl	8007340 <xTaskGetSchedulerState>
 8005394:	4603      	mov	r3, r0
 8005396:	2b01      	cmp	r3, #1
 8005398:	d001      	beq.n	800539e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800539a:	f002 fe75 	bl	8008088 <xPortSysTickHandler>
  }
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e010 	.word	0xe000e010

080053a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053ac:	2100      	movs	r1, #0
 80053ae:	f06f 0004 	mvn.w	r0, #4
 80053b2:	f7ff ffbf 	bl	8005334 <__NVIC_SetPriority>
#endif
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
 80053c6:	603b      	str	r3, [r7, #0]
  return(result);
 80053c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053ce:	f06f 0305 	mvn.w	r3, #5
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	e00c      	b.n	80053f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <osKernelInitialize+0x44>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d105      	bne.n	80053ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <osKernelInitialize+0x44>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	e002      	b.n	80053f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053f0:	687b      	ldr	r3, [r7, #4]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	200003e0 	.word	0x200003e0

08005404 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800540a:	f3ef 8305 	mrs	r3, IPSR
 800540e:	603b      	str	r3, [r7, #0]
  return(result);
 8005410:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005416:	f06f 0305 	mvn.w	r3, #5
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	e010      	b.n	8005440 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <osKernelStart+0x48>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d109      	bne.n	800543a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005426:	f7ff ffbf 	bl	80053a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <osKernelStart+0x48>)
 800542c:	2202      	movs	r2, #2
 800542e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005430:	f001 fb3e 	bl	8006ab0 <vTaskStartScheduler>
      stat = osOK;
 8005434:	2300      	movs	r3, #0
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	e002      	b.n	8005440 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800543e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005440:	687b      	ldr	r3, [r7, #4]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200003e0 	.word	0x200003e0

08005450 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b08e      	sub	sp, #56	; 0x38
 8005454:	af04      	add	r7, sp, #16
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005460:	f3ef 8305 	mrs	r3, IPSR
 8005464:	617b      	str	r3, [r7, #20]
  return(result);
 8005466:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005468:	2b00      	cmp	r3, #0
 800546a:	d17e      	bne.n	800556a <osThreadNew+0x11a>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d07b      	beq.n	800556a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005476:	2318      	movs	r3, #24
 8005478:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005482:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d045      	beq.n	8005516 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <osThreadNew+0x48>
        name = attr->name;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <osThreadNew+0x6e>
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b38      	cmp	r3, #56	; 0x38
 80054b0:	d805      	bhi.n	80054be <osThreadNew+0x6e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <osThreadNew+0x72>
        return (NULL);
 80054be:	2300      	movs	r3, #0
 80054c0:	e054      	b.n	800556c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	089b      	lsrs	r3, r3, #2
 80054d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <osThreadNew+0xa8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b5b      	cmp	r3, #91	; 0x5b
 80054e0:	d90a      	bls.n	80054f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <osThreadNew+0xa8>
        mem = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e010      	b.n	800551a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10c      	bne.n	800551a <osThreadNew+0xca>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <osThreadNew+0xca>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <osThreadNew+0xca>
          mem = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e001      	b.n	800551a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d110      	bne.n	8005542 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005528:	9202      	str	r2, [sp, #8]
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6a3a      	ldr	r2, [r7, #32]
 8005534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f001 f8e4 	bl	8006704 <xTaskCreateStatic>
 800553c:	4603      	mov	r3, r0
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e013      	b.n	800556a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d110      	bne.n	800556a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	b29a      	uxth	r2, r3
 800554c:	f107 0310 	add.w	r3, r7, #16
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 f92f 	bl	80067be <xTaskCreate>
 8005560:	4603      	mov	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d001      	beq.n	800556a <osThreadNew+0x11a>
            hTask = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800556a:	693b      	ldr	r3, [r7, #16]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3728      	adds	r7, #40	; 0x28
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800557c:	f3ef 8305 	mrs	r3, IPSR
 8005580:	60bb      	str	r3, [r7, #8]
  return(result);
 8005582:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <osDelay+0x1c>
    stat = osErrorISR;
 8005588:	f06f 0305 	mvn.w	r3, #5
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e007      	b.n	80055a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 fa54 	bl	8006a48 <vTaskDelay>
    }
  }

  return (stat);
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f002 fb8c 	bl	8007cd0 <pvTimerGetTimerID>
 80055b8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <TimerCallback+0x22>
    callb->func (callb->arg);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	6852      	ldr	r2, [r2, #4]
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
  }
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08c      	sub	sp, #48	; 0x30
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	460b      	mov	r3, r1
 80055e2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e8:	f3ef 8305 	mrs	r3, IPSR
 80055ec:	613b      	str	r3, [r7, #16]
  return(result);
 80055ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d163      	bne.n	80056bc <osTimerNew+0xe8>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d060      	beq.n	80056bc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80055fa:	2008      	movs	r0, #8
 80055fc:	f002 fdd4 	bl	80081a8 <pvPortMalloc>
 8005600:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d059      	beq.n	80056bc <osTimerNew+0xe8>
      callb->func = func;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <osTimerNew+0x4c>
        reload = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	e001      	b.n	8005624 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005620:	2301      	movs	r3, #1
 8005622:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005628:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01c      	beq.n	800566e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <osTimerNew+0x6e>
          name = attr->name;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d006      	beq.n	8005658 <osTimerNew+0x84>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b2b      	cmp	r3, #43	; 0x2b
 8005650:	d902      	bls.n	8005658 <osTimerNew+0x84>
          mem = 1;
 8005652:	2301      	movs	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e00c      	b.n	8005672 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d108      	bne.n	8005672 <osTimerNew+0x9e>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <osTimerNew+0x9e>
            mem = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e001      	b.n	8005672 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d10c      	bne.n	8005692 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <osTimerNew+0xf4>)
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	2101      	movs	r1, #1
 8005688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800568a:	f001 ffa2 	bl	80075d2 <xTimerCreateStatic>
 800568e:	6238      	str	r0, [r7, #32]
 8005690:	e00b      	b.n	80056aa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d108      	bne.n	80056aa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <osTimerNew+0xf4>)
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	2101      	movs	r1, #1
 80056a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056a4:	f001 ff74 	bl	8007590 <xTimerCreate>
 80056a8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <osTimerNew+0xe8>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <osTimerNew+0xe8>
        vPortFree (callb);
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f002 fe42 	bl	8008340 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80056bc:	6a3b      	ldr	r3, [r7, #32]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3728      	adds	r7, #40	; 0x28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	080055ab 	.word	0x080055ab

080056cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056dc:	f3ef 8305 	mrs	r3, IPSR
 80056e0:	613b      	str	r3, [r7, #16]
  return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d15f      	bne.n	80057a8 <osMessageQueueNew+0xdc>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d05c      	beq.n	80057a8 <osMessageQueueNew+0xdc>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d059      	beq.n	80057a8 <osMessageQueueNew+0xdc>
    mem = -1;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d029      	beq.n	8005754 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d012      	beq.n	800572e <osMessageQueueNew+0x62>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b4f      	cmp	r3, #79	; 0x4f
 800570e:	d90e      	bls.n	800572e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <osMessageQueueNew+0x62>
        mem = 1;
 8005728:	2301      	movs	r3, #1
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e014      	b.n	8005758 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d110      	bne.n	8005758 <osMessageQueueNew+0x8c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10c      	bne.n	8005758 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <osMessageQueueNew+0x8c>
          mem = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e001      	b.n	8005758 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10b      	bne.n	8005776 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2100      	movs	r1, #0
 8005768:	9100      	str	r1, [sp, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fa4f 	bl	8005c10 <xQueueGenericCreateStatic>
 8005772:	61f8      	str	r0, [r7, #28]
 8005774:	e008      	b.n	8005788 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800577c:	2200      	movs	r2, #0
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fabd 	bl	8005d00 <xQueueGenericCreate>
 8005786:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e001      	b.n	80057a0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	69f8      	ldr	r0, [r7, #28]
 80057a4:	f000 ff50 	bl	8006648 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80057a8:	69fb      	ldr	r3, [r7, #28]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057cc:	f3ef 8305 	mrs	r3, IPSR
 80057d0:	617b      	str	r3, [r7, #20]
  return(result);
 80057d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d028      	beq.n	800582a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <osMessageQueuePut+0x36>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <osMessageQueuePut+0x36>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80057ea:	f06f 0303 	mvn.w	r3, #3
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	e038      	b.n	8005864 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80057f6:	f107 0210 	add.w	r2, r7, #16
 80057fa:	2300      	movs	r3, #0
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	69b8      	ldr	r0, [r7, #24]
 8005800:	f000 fbda 	bl	8005fb8 <xQueueGenericSendFromISR>
 8005804:	4603      	mov	r3, r0
 8005806:	2b01      	cmp	r3, #1
 8005808:	d003      	beq.n	8005812 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800580a:	f06f 0302 	mvn.w	r3, #2
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e028      	b.n	8005864 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d025      	beq.n	8005864 <osMessageQueuePut+0xb0>
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <osMessageQueuePut+0xbc>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	e01c      	b.n	8005864 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <osMessageQueuePut+0x82>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d103      	bne.n	800583e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005836:	f06f 0303 	mvn.w	r3, #3
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e012      	b.n	8005864 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800583e:	2300      	movs	r3, #0
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	69b8      	ldr	r0, [r7, #24]
 8005846:	f000 fab9 	bl	8005dbc <xQueueGenericSend>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d009      	beq.n	8005864 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005856:	f06f 0301 	mvn.w	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	e002      	b.n	8005864 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800585e:	f06f 0302 	mvn.w	r3, #2
 8005862:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005864:	69fb      	ldr	r3, [r7, #28]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800588a:	f3ef 8305 	mrs	r3, IPSR
 800588e:	617b      	str	r3, [r7, #20]
  return(result);
 8005890:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005892:	2b00      	cmp	r3, #0
 8005894:	d028      	beq.n	80058e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <osMessageQueueGet+0x34>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <osMessageQueueGet+0x34>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80058a8:	f06f 0303 	mvn.w	r3, #3
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	e037      	b.n	8005920 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80058b4:	f107 0310 	add.w	r3, r7, #16
 80058b8:	461a      	mov	r2, r3
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	69b8      	ldr	r0, [r7, #24]
 80058be:	f000 fcf7 	bl	80062b0 <xQueueReceiveFromISR>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d003      	beq.n	80058d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80058c8:	f06f 0302 	mvn.w	r3, #2
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e027      	b.n	8005920 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d024      	beq.n	8005920 <osMessageQueueGet+0xac>
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <osMessageQueueGet+0xb8>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	e01b      	b.n	8005920 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <osMessageQueueGet+0x80>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80058f4:	f06f 0303 	mvn.w	r3, #3
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	e011      	b.n	8005920 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	69b8      	ldr	r0, [r7, #24]
 8005902:	f000 fbf5 	bl	80060f0 <xQueueReceive>
 8005906:	4603      	mov	r3, r0
 8005908:	2b01      	cmp	r3, #1
 800590a:	d009      	beq.n	8005920 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005912:	f06f 0301 	mvn.w	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e002      	b.n	8005920 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800591a:	f06f 0302 	mvn.w	r3, #2
 800591e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005920:	69fb      	ldr	r3, [r7, #28]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e00e      	b.n	8005966 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005948:	f3ef 8305 	mrs	r3, IPSR
 800594c:	60fb      	str	r3, [r7, #12]
  return(result);
 800594e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005954:	6938      	ldr	r0, [r7, #16]
 8005956:	f000 fd49 	bl	80063ec <uxQueueMessagesWaitingFromISR>
 800595a:	6178      	str	r0, [r7, #20]
 800595c:	e003      	b.n	8005966 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800595e:	6938      	ldr	r0, [r7, #16]
 8005960:	f000 fd26 	bl	80063b0 <uxQueueMessagesWaiting>
 8005964:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005966:	697b      	ldr	r3, [r7, #20]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a07      	ldr	r2, [pc, #28]	; (800599c <vApplicationGetIdleTaskMemory+0x2c>)
 8005980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a06      	ldr	r2, [pc, #24]	; (80059a0 <vApplicationGetIdleTaskMemory+0x30>)
 8005986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2280      	movs	r2, #128	; 0x80
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	200003e4 	.word	0x200003e4
 80059a0:	20000440 	.word	0x20000440

080059a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80059b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <vApplicationGetTimerTaskMemory+0x30>)
 80059ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000640 	.word	0x20000640
 80059d4:	2000069c 	.word	0x2000069c

080059d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f103 0208 	add.w	r2, r3, #8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f103 0208 	add.w	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f103 0208 	add.w	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a90:	d103      	bne.n	8005a9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e00c      	b.n	8005ab4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e002      	b.n	8005aa8 <vListInsert+0x2e>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d2f6      	bcs.n	8005aa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6892      	ldr	r2, [r2, #8]
 8005b02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6852      	ldr	r2, [r2, #4]
 8005b0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d103      	bne.n	8005b20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	1e5a      	subs	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b6a:	f002 f9fb 	bl	8007f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	441a      	add	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	68f9      	ldr	r1, [r7, #12]
 8005b9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	22ff      	movs	r2, #255	; 0xff
 8005bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	22ff      	movs	r2, #255	; 0xff
 8005bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d114      	bne.n	8005bea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01a      	beq.n	8005bfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3310      	adds	r3, #16
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 f9f9 	bl	8006fc4 <xTaskRemoveFromEventList>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d012      	beq.n	8005bfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <xQueueGenericReset+0xcc>)
 8005bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	e009      	b.n	8005bfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3310      	adds	r3, #16
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fef2 	bl	80059d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff feed 	bl	80059d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bfe:	f002 f9e1 	bl	8007fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c02:	2301      	movs	r3, #1
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08e      	sub	sp, #56	; 0x38
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <xQueueGenericCreateStatic+0x52>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <xQueueGenericCreateStatic+0x56>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericCreateStatic+0x58>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <xQueueGenericCreateStatic+0x7e>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <xQueueGenericCreateStatic+0x82>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <xQueueGenericCreateStatic+0x84>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	61fb      	str	r3, [r7, #28]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cae:	2350      	movs	r3, #80	; 0x50
 8005cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b50      	cmp	r3, #80	; 0x50
 8005cb6:	d00a      	beq.n	8005cce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61bb      	str	r3, [r7, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f83f 	bl	8005d74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3730      	adds	r7, #48	; 0x30
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	613b      	str	r3, [r7, #16]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	3350      	adds	r3, #80	; 0x50
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f002 fa35 	bl	80081a8 <pvPortMalloc>
 8005d3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d011      	beq.n	8005d6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	3350      	adds	r3, #80	; 0x50
 8005d4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d58:	79fa      	ldrb	r2, [r7, #7]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f805 	bl	8005d74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005da2:	2101      	movs	r1, #1
 8005da4:	69b8      	ldr	r0, [r7, #24]
 8005da6:	f7ff fecb 	bl	8005b40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08e      	sub	sp, #56	; 0x38
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xQueueGenericSend+0x32>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d103      	bne.n	8005dfc <xQueueGenericSend+0x40>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <xQueueGenericSend+0x44>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <xQueueGenericSend+0x46>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <xQueueGenericSend+0x60>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d103      	bne.n	8005e2a <xQueueGenericSend+0x6e>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <xQueueGenericSend+0x72>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <xQueueGenericSend+0x74>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericSend+0x8e>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	623b      	str	r3, [r7, #32]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e4a:	f001 fa79 	bl	8007340 <xTaskGetSchedulerState>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <xQueueGenericSend+0x9e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <xQueueGenericSend+0xa2>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <xQueueGenericSend+0xa4>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	61fb      	str	r3, [r7, #28]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e7a:	f002 f873 	bl	8007f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <xQueueGenericSend+0xd4>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d129      	bne.n	8005ee4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e96:	f000 fac7 	bl	8006428 <prvCopyDataToQueue>
 8005e9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d010      	beq.n	8005ec6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	3324      	adds	r3, #36	; 0x24
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 f88b 	bl	8006fc4 <xTaskRemoveFromEventList>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d013      	beq.n	8005edc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005eb4:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <xQueueGenericSend+0x1f8>)
 8005eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	e00a      	b.n	8005edc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ecc:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <xQueueGenericSend+0x1f8>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005edc:	f002 f872 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e063      	b.n	8005fac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eea:	f002 f86b 	bl	8007fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e05c      	b.n	8005fac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ef8:	f107 0314 	add.w	r3, r7, #20
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f8c5 	bl	800708c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f02:	2301      	movs	r3, #1
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f06:	f002 f85d 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f0a:	f000 fe37 	bl	8006b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f0e:	f002 f829 	bl	8007f64 <vPortEnterCritical>
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f18:	b25b      	sxtb	r3, r3
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f1e:	d103      	bne.n	8005f28 <xQueueGenericSend+0x16c>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f34:	d103      	bne.n	8005f3e <xQueueGenericSend+0x182>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f3e:	f002 f841 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f42:	1d3a      	adds	r2, r7, #4
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 f8b4 	bl	80070b8 <xTaskCheckForTimeOut>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d124      	bne.n	8005fa0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f58:	f000 fb5e 	bl	8006618 <prvIsQueueFull>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	3310      	adds	r3, #16
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 ffda 	bl	8006f24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f72:	f000 fae9 	bl	8006548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f76:	f000 fe0f 	bl	8006b98 <xTaskResumeAll>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f af7c 	bne.w	8005e7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <xQueueGenericSend+0x1f8>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	e772      	b.n	8005e7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f96:	f000 fad7 	bl	8006548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f9a:	f000 fdfd 	bl	8006b98 <xTaskResumeAll>
 8005f9e:	e76c      	b.n	8005e7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa2:	f000 fad1 	bl	8006548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fa6:	f000 fdf7 	bl	8006b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005faa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3738      	adds	r7, #56	; 0x38
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b090      	sub	sp, #64	; 0x40
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <xQueueGenericSendFromISR+0x3c>
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <xQueueGenericSendFromISR+0x40>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <xQueueGenericSendFromISR+0x42>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d103      	bne.n	8006022 <xQueueGenericSendFromISR+0x6a>
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <xQueueGenericSendFromISR+0x6e>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <xQueueGenericSendFromISR+0x70>
 8006026:	2300      	movs	r3, #0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	623b      	str	r3, [r7, #32]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006042:	f002 f871 	bl	8008128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006046:	f3ef 8211 	mrs	r2, BASEPRI
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61fa      	str	r2, [r7, #28]
 800605c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800605e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <xQueueGenericSendFromISR+0xbc>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d12f      	bne.n	80060d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800607a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800608a:	f000 f9cd 	bl	8006428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800608e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006096:	d112      	bne.n	80060be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d016      	beq.n	80060ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	3324      	adds	r3, #36	; 0x24
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 ff8d 	bl	8006fc4 <xTaskRemoveFromEventList>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00e      	beq.n	80060ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e007      	b.n	80060ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	b25a      	sxtb	r2, r3
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060ce:	2301      	movs	r3, #1
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060d2:	e001      	b.n	80060d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3740      	adds	r7, #64	; 0x40
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <xQueueReceive+0x30>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	623b      	str	r3, [r7, #32]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <xQueueReceive+0x3e>
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xQueueReceive+0x42>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueReceive+0x44>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueReceive+0x5e>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61fb      	str	r3, [r7, #28]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800614e:	f001 f8f7 	bl	8007340 <xTaskGetSchedulerState>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <xQueueReceive+0x6e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <xQueueReceive+0x72>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <xQueueReceive+0x74>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xQueueReceive+0x8e>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	61bb      	str	r3, [r7, #24]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800617e:	f001 fef1 	bl	8007f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01f      	beq.n	80061ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006192:	f000 f9b3 	bl	80064fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1e5a      	subs	r2, r3, #1
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00f      	beq.n	80061c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	3310      	adds	r3, #16
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 ff0a 	bl	8006fc4 <xTaskRemoveFromEventList>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061b6:	4b3d      	ldr	r3, [pc, #244]	; (80062ac <xQueueReceive+0x1bc>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061c6:	f001 fefd 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e069      	b.n	80062a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061d4:	f001 fef6 	bl	8007fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061d8:	2300      	movs	r3, #0
 80061da:	e062      	b.n	80062a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff50 	bl	800708c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061f0:	f001 fee8 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061f4:	f000 fcc2 	bl	8006b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061f8:	f001 feb4 	bl	8007f64 <vPortEnterCritical>
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006202:	b25b      	sxtb	r3, r3
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006208:	d103      	bne.n	8006212 <xQueueReceive+0x122>
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006218:	b25b      	sxtb	r3, r3
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800621e:	d103      	bne.n	8006228 <xQueueReceive+0x138>
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006228:	f001 fecc 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800622c:	1d3a      	adds	r2, r7, #4
 800622e:	f107 0310 	add.w	r3, r7, #16
 8006232:	4611      	mov	r1, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f000 ff3f 	bl	80070b8 <xTaskCheckForTimeOut>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d123      	bne.n	8006288 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006242:	f000 f9d3 	bl	80065ec <prvIsQueueEmpty>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d017      	beq.n	800627c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	3324      	adds	r3, #36	; 0x24
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fe65 	bl	8006f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800625a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625c:	f000 f974 	bl	8006548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006260:	f000 fc9a 	bl	8006b98 <xTaskResumeAll>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d189      	bne.n	800617e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800626a:	4b10      	ldr	r3, [pc, #64]	; (80062ac <xQueueReceive+0x1bc>)
 800626c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	e780      	b.n	800617e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 f963 	bl	8006548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006282:	f000 fc89 	bl	8006b98 <xTaskResumeAll>
 8006286:	e77a      	b.n	800617e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628a:	f000 f95d 	bl	8006548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800628e:	f000 fc83 	bl	8006b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006294:	f000 f9aa 	bl	80065ec <prvIsQueueEmpty>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	f43f af6f 	beq.w	800617e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3730      	adds	r7, #48	; 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08e      	sub	sp, #56	; 0x38
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	623b      	str	r3, [r7, #32]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <xQueueReceiveFromISR+0x3a>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <xQueueReceiveFromISR+0x3e>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xQueueReceiveFromISR+0x40>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	61fb      	str	r3, [r7, #28]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800630a:	f001 ff0d 	bl	8008128 <vPortValidateInterruptPriority>
	__asm volatile
 800630e:	f3ef 8211 	mrs	r2, BASEPRI
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	61ba      	str	r2, [r7, #24]
 8006324:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006326:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d02f      	beq.n	8006396 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800633c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006344:	f000 f8da 	bl	80064fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006350:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006358:	d112      	bne.n	8006380 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d016      	beq.n	8006390 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	3310      	adds	r3, #16
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fe2c 	bl	8006fc4 <xTaskRemoveFromEventList>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00e      	beq.n	8006390 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e007      	b.n	8006390 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006384:	3301      	adds	r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	b25a      	sxtb	r2, r3
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006390:	2301      	movs	r3, #1
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	e001      	b.n	800639a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3738      	adds	r7, #56	; 0x38
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	60bb      	str	r3, [r7, #8]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80063d4:	f001 fdc6 	bl	8007f64 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80063de:	f001 fdf1 	bl	8007fc4 <vPortExitCritical>

	return uxReturn;
 80063e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	60fb      	str	r3, [r7, #12]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800641a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10d      	bne.n	8006462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d14d      	bne.n	80064ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 ff92 	bl	800737c <xTaskPriorityDisinherit>
 8006458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	e043      	b.n	80064ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d119      	bne.n	800649c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6858      	ldr	r0, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	461a      	mov	r2, r3
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	f002 f8ac 	bl	80085d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	441a      	add	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	d32b      	bcc.n	80064ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	e026      	b.n	80064ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68d8      	ldr	r0, [r3, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	461a      	mov	r2, r3
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	f002 f892 	bl	80085d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	425b      	negs	r3, r3
 80064b6:	441a      	add	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d207      	bcs.n	80064d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	425b      	negs	r3, r3
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d105      	bne.n	80064ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	441a      	add	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	d303      	bcc.n	8006530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68d9      	ldr	r1, [r3, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	461a      	mov	r2, r3
 800653a:	6838      	ldr	r0, [r7, #0]
 800653c:	f002 f848 	bl	80085d0 <memcpy>
	}
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006550:	f001 fd08 	bl	8007f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800655a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800655c:	e011      	b.n	8006582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d012      	beq.n	800658c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fd2a 	bl	8006fc4 <xTaskRemoveFromEventList>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006576:	f000 fe01 	bl	800717c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	3b01      	subs	r3, #1
 800657e:	b2db      	uxtb	r3, r3
 8006580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	dce9      	bgt.n	800655e <prvUnlockQueue+0x16>
 800658a:	e000      	b.n	800658e <prvUnlockQueue+0x46>
					break;
 800658c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	22ff      	movs	r2, #255	; 0xff
 8006592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006596:	f001 fd15 	bl	8007fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800659a:	f001 fce3 	bl	8007f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065a6:	e011      	b.n	80065cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d012      	beq.n	80065d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3310      	adds	r3, #16
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fd05 	bl	8006fc4 <xTaskRemoveFromEventList>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065c0:	f000 fddc 	bl	800717c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dce9      	bgt.n	80065a8 <prvUnlockQueue+0x60>
 80065d4:	e000      	b.n	80065d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	22ff      	movs	r2, #255	; 0xff
 80065dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065e0:	f001 fcf0 	bl	8007fc4 <vPortExitCritical>
}
 80065e4:	bf00      	nop
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065f4:	f001 fcb6 	bl	8007f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e001      	b.n	800660a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800660a:	f001 fcdb 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 800660e:	68fb      	ldr	r3, [r7, #12]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006620:	f001 fca0 	bl	8007f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662c:	429a      	cmp	r2, r3
 800662e:	d102      	bne.n	8006636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	e001      	b.n	800663a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800663a:	f001 fcc3 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 800663e:	68fb      	ldr	r3, [r7, #12]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e014      	b.n	8006682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006658:	4a0f      	ldr	r2, [pc, #60]	; (8006698 <vQueueAddToRegistry+0x50>)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006664:	490c      	ldr	r1, [pc, #48]	; (8006698 <vQueueAddToRegistry+0x50>)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <vQueueAddToRegistry+0x50>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	4413      	add	r3, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800667a:	e006      	b.n	800668a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b07      	cmp	r3, #7
 8006686:	d9e7      	bls.n	8006658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000a9c 	.word	0x20000a9c

0800669c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066ac:	f001 fc5a 	bl	8007f64 <vPortEnterCritical>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066bc:	d103      	bne.n	80066c6 <vQueueWaitForMessageRestricted+0x2a>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d2:	d103      	bne.n	80066dc <vQueueWaitForMessageRestricted+0x40>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066dc:	f001 fc72 	bl	8007fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3324      	adds	r3, #36	; 0x24
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fc3b 	bl	8006f6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f7ff ff26 	bl	8006548 <prvUnlockQueue>
	}
 80066fc:	bf00      	nop
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08e      	sub	sp, #56	; 0x38
 8006708:	af04      	add	r7, sp, #16
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	623b      	str	r3, [r7, #32]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xTaskCreateStatic+0x46>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	61fb      	str	r3, [r7, #28]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800674a:	235c      	movs	r3, #92	; 0x5c
 800674c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b5c      	cmp	r3, #92	; 0x5c
 8006752:	d00a      	beq.n	800676a <xTaskCreateStatic+0x66>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	61bb      	str	r3, [r7, #24]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800676a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01e      	beq.n	80067b0 <xTaskCreateStatic+0xac>
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006780:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	2202      	movs	r2, #2
 8006786:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800678a:	2300      	movs	r3, #0
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	f107 0314 	add.w	r3, r7, #20
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f850 	bl	8006848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067aa:	f000 f8dd 	bl	8006968 <prvAddNewTaskToReadyList>
 80067ae:	e001      	b.n	80067b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067b4:	697b      	ldr	r3, [r7, #20]
	}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3728      	adds	r7, #40	; 0x28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b08c      	sub	sp, #48	; 0x30
 80067c2:	af04      	add	r7, sp, #16
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 fce8 	bl	80081a8 <pvPortMalloc>
 80067d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067e0:	205c      	movs	r0, #92	; 0x5c
 80067e2:	f001 fce1 	bl	80081a8 <pvPortMalloc>
 80067e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
 80067f4:	e005      	b.n	8006802 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067f6:	6978      	ldr	r0, [r7, #20]
 80067f8:	f001 fda2 	bl	8008340 <vPortFree>
 80067fc:	e001      	b.n	8006802 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d017      	beq.n	8006838 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	2300      	movs	r3, #0
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	9302      	str	r3, [sp, #8]
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f80e 	bl	8006848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800682c:	69f8      	ldr	r0, [r7, #28]
 800682e:	f000 f89b 	bl	8006968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006832:	2301      	movs	r3, #1
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	e002      	b.n	800683e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800683c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800683e:	69bb      	ldr	r3, [r7, #24]
	}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	461a      	mov	r2, r3
 8006860:	21a5      	movs	r1, #165	; 0xa5
 8006862:	f001 fec3 	bl	80085ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006870:	3b01      	subs	r3, #1
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	617b      	str	r3, [r7, #20]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01f      	beq.n	80068e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	e012      	b.n	80068d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	7819      	ldrb	r1, [r3, #0]
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	3334      	adds	r3, #52	; 0x34
 80068bc:	460a      	mov	r2, r1
 80068be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d9e9      	bls.n	80068ac <prvInitialiseNewTask+0x64>
 80068d8:	e000      	b.n	80068dc <prvInitialiseNewTask+0x94>
			{
				break;
 80068da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068e4:	e003      	b.n	80068ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	2b37      	cmp	r3, #55	; 0x37
 80068f2:	d901      	bls.n	80068f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068f4:	2337      	movs	r3, #55	; 0x37
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	2200      	movs	r2, #0
 8006908:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	3304      	adds	r3, #4
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff f882 	bl	8005a18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	3318      	adds	r3, #24
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff f87d 	bl	8005a18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	2200      	movs	r2, #0
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	69b8      	ldr	r0, [r7, #24]
 8006948:	f001 f9e2 	bl	8007d10 <pxPortInitialiseStack>
 800694c:	4602      	mov	r2, r0
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800695e:	bf00      	nop
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006970:	f001 faf8 	bl	8007f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006974:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 800697c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800697e:	4b2c      	ldr	r3, [pc, #176]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006986:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800698c:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d110      	bne.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006994:	f000 fc16 	bl	80071c4 <prvInitialiseTaskLists>
 8006998:	e00d      	b.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800699a:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <prvAddNewTaskToReadyList+0xcc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d802      	bhi.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069b6:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 80069be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069cc:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <prvAddNewTaskToReadyList+0xd4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d903      	bls.n	80069dc <prvAddNewTaskToReadyList+0x74>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <prvAddNewTaskToReadyList+0xd4>)
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <prvAddNewTaskToReadyList+0xd8>)
 80069ea:	441a      	add	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7ff f81d 	bl	8005a32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069f8:	f001 fae4 	bl	8007fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069fc:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <prvAddNewTaskToReadyList+0xcc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d207      	bcs.n	8006a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <prvAddNewTaskToReadyList+0xdc>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000fb0 	.word	0x20000fb0
 8006a30:	20000adc 	.word	0x20000adc
 8006a34:	20000fbc 	.word	0x20000fbc
 8006a38:	20000fcc 	.word	0x20000fcc
 8006a3c:	20000fb8 	.word	0x20000fb8
 8006a40:	20000ae0 	.word	0x20000ae0
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d017      	beq.n	8006a8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <vTaskDelay+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <vTaskDelay+0x30>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a78:	f000 f880 	bl	8006b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fcea 	bl	8007458 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a84:	f000 f888 	bl	8006b98 <xTaskResumeAll>
 8006a88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d107      	bne.n	8006aa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <vTaskDelay+0x64>)
 8006a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000fd8 	.word	0x20000fd8
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006abe:	463a      	mov	r2, r7
 8006ac0:	1d39      	adds	r1, r7, #4
 8006ac2:	f107 0308 	add.w	r3, r7, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe ff52 	bl	8005970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	9202      	str	r2, [sp, #8]
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2300      	movs	r3, #0
 8006adc:	460a      	mov	r2, r1
 8006ade:	4921      	ldr	r1, [pc, #132]	; (8006b64 <vTaskStartScheduler+0xb4>)
 8006ae0:	4821      	ldr	r0, [pc, #132]	; (8006b68 <vTaskStartScheduler+0xb8>)
 8006ae2:	f7ff fe0f 	bl	8006704 <xTaskCreateStatic>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <vTaskStartScheduler+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aec:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <vTaskStartScheduler+0xbc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e001      	b.n	8006afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d102      	bne.n	8006b0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b04:	f000 fcfc 	bl	8007500 <xTimerCreateTimerTask>
 8006b08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d116      	bne.n	8006b3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
}
 8006b22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b24:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <vTaskStartScheduler+0xc0>)
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <vTaskStartScheduler+0xc4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <vTaskStartScheduler+0xc8>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b38:	f001 f972 	bl	8007e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b3c:	e00e      	b.n	8006b5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b44:	d10a      	bne.n	8006b5c <vTaskStartScheduler+0xac>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60fb      	str	r3, [r7, #12]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <vTaskStartScheduler+0xaa>
}
 8006b5c:	bf00      	nop
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	0800b418 	.word	0x0800b418
 8006b68:	08007195 	.word	0x08007195
 8006b6c:	20000fd4 	.word	0x20000fd4
 8006b70:	20000fd0 	.word	0x20000fd0
 8006b74:	20000fbc 	.word	0x20000fbc
 8006b78:	20000fb4 	.word	0x20000fb4

08006b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <vTaskSuspendAll+0x18>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	4a03      	ldr	r2, [pc, #12]	; (8006b94 <vTaskSuspendAll+0x18>)
 8006b88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b8a:	bf00      	nop
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000fd8 	.word	0x20000fd8

08006b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ba6:	4b42      	ldr	r3, [pc, #264]	; (8006cb0 <xTaskResumeAll+0x118>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	603b      	str	r3, [r7, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bc4:	f001 f9ce 	bl	8007f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bc8:	4b39      	ldr	r3, [pc, #228]	; (8006cb0 <xTaskResumeAll+0x118>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	4a38      	ldr	r2, [pc, #224]	; (8006cb0 <xTaskResumeAll+0x118>)
 8006bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd2:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <xTaskResumeAll+0x118>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d162      	bne.n	8006ca0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <xTaskResumeAll+0x11c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d05e      	beq.n	8006ca0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be2:	e02f      	b.n	8006c44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be4:	4b34      	ldr	r3, [pc, #208]	; (8006cb8 <xTaskResumeAll+0x120>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3318      	adds	r3, #24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe ff7b 	bl	8005aec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe ff76 	bl	8005aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c04:	4b2d      	ldr	r3, [pc, #180]	; (8006cbc <xTaskResumeAll+0x124>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d903      	bls.n	8006c14 <xTaskResumeAll+0x7c>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <xTaskResumeAll+0x124>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <xTaskResumeAll+0x128>)
 8006c22:	441a      	add	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f7fe ff01 	bl	8005a32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <xTaskResumeAll+0x12c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <xTaskResumeAll+0x130>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c44:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <xTaskResumeAll+0x120>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1cb      	bne.n	8006be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c52:	f000 fb55 	bl	8007300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c56:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <xTaskResumeAll+0x134>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d010      	beq.n	8006c84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c62:	f000 f847 	bl	8006cf4 <xTaskIncrementTick>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c6c:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <xTaskResumeAll+0x130>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f1      	bne.n	8006c62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <xTaskResumeAll+0x134>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c84:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <xTaskResumeAll+0x130>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <xTaskResumeAll+0x138>)
 8006c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca0:	f001 f990 	bl	8007fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000fd8 	.word	0x20000fd8
 8006cb4:	20000fb0 	.word	0x20000fb0
 8006cb8:	20000f70 	.word	0x20000f70
 8006cbc:	20000fb8 	.word	0x20000fb8
 8006cc0:	20000ae0 	.word	0x20000ae0
 8006cc4:	20000adc 	.word	0x20000adc
 8006cc8:	20000fc4 	.word	0x20000fc4
 8006ccc:	20000fc0 	.word	0x20000fc0
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <xTaskGetTickCount+0x1c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ce0:	687b      	ldr	r3, [r7, #4]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000fb4 	.word	0x20000fb4

08006cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cfe:	4b4f      	ldr	r3, [pc, #316]	; (8006e3c <xTaskIncrementTick+0x148>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 808f 	bne.w	8006e26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d08:	4b4d      	ldr	r3, [pc, #308]	; (8006e40 <xTaskIncrementTick+0x14c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d10:	4a4b      	ldr	r2, [pc, #300]	; (8006e40 <xTaskIncrementTick+0x14c>)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d120      	bne.n	8006d5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d1c:	4b49      	ldr	r3, [pc, #292]	; (8006e44 <xTaskIncrementTick+0x150>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <xTaskIncrementTick+0x48>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	603b      	str	r3, [r7, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xTaskIncrementTick+0x46>
 8006d3c:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <xTaskIncrementTick+0x150>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	4b41      	ldr	r3, [pc, #260]	; (8006e48 <xTaskIncrementTick+0x154>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3f      	ldr	r2, [pc, #252]	; (8006e44 <xTaskIncrementTick+0x150>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	; (8006e48 <xTaskIncrementTick+0x154>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	4b3e      	ldr	r3, [pc, #248]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	4a3d      	ldr	r2, [pc, #244]	; (8006e4c <xTaskIncrementTick+0x158>)
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	f000 fad1 	bl	8007300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d5e:	4b3c      	ldr	r3, [pc, #240]	; (8006e50 <xTaskIncrementTick+0x15c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d349      	bcc.n	8006dfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d68:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <xTaskIncrementTick+0x150>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d72:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <xTaskIncrementTick+0x15c>)
 8006d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d78:	601a      	str	r2, [r3, #0]
					break;
 8006d7a:	e03f      	b.n	8006dfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <xTaskIncrementTick+0x150>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d203      	bcs.n	8006d9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d94:	4a2e      	ldr	r2, [pc, #184]	; (8006e50 <xTaskIncrementTick+0x15c>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d9a:	e02f      	b.n	8006dfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fea3 	bl	8005aec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	3318      	adds	r3, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fe9a 	bl	8005aec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <xTaskIncrementTick+0x160>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d903      	bls.n	8006dcc <xTaskIncrementTick+0xd8>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <xTaskIncrementTick+0x160>)
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4a1f      	ldr	r2, [pc, #124]	; (8006e58 <xTaskIncrementTick+0x164>)
 8006dda:	441a      	add	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f7fe fe25 	bl	8005a32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <xTaskIncrementTick+0x168>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3b8      	bcc.n	8006d68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfa:	e7b5      	b.n	8006d68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <xTaskIncrementTick+0x168>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	4915      	ldr	r1, [pc, #84]	; (8006e58 <xTaskIncrementTick+0x164>)
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d901      	bls.n	8006e18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e18:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <xTaskIncrementTick+0x16c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	e004      	b.n	8006e30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xTaskIncrementTick+0x170>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <xTaskIncrementTick+0x170>)
 8006e2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e30:	697b      	ldr	r3, [r7, #20]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000fd8 	.word	0x20000fd8
 8006e40:	20000fb4 	.word	0x20000fb4
 8006e44:	20000f68 	.word	0x20000f68
 8006e48:	20000f6c 	.word	0x20000f6c
 8006e4c:	20000fc8 	.word	0x20000fc8
 8006e50:	20000fd0 	.word	0x20000fd0
 8006e54:	20000fb8 	.word	0x20000fb8
 8006e58:	20000ae0 	.word	0x20000ae0
 8006e5c:	20000adc 	.word	0x20000adc
 8006e60:	20000fc4 	.word	0x20000fc4
 8006e64:	20000fc0 	.word	0x20000fc0

08006e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e6e:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <vTaskSwitchContext+0xa8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e76:	4b27      	ldr	r3, [pc, #156]	; (8006f14 <vTaskSwitchContext+0xac>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e7c:	e041      	b.n	8006f02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006e7e:	4b25      	ldr	r3, [pc, #148]	; (8006f14 <vTaskSwitchContext+0xac>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e84:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <vTaskSwitchContext+0xb0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	e010      	b.n	8006eae <vTaskSwitchContext+0x46>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	607b      	str	r3, [r7, #4]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskSwitchContext+0x3e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	491b      	ldr	r1, [pc, #108]	; (8006f1c <vTaskSwitchContext+0xb4>)
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0e4      	beq.n	8006e8c <vTaskSwitchContext+0x24>
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <vTaskSwitchContext+0xb4>)
 8006ece:	4413      	add	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	605a      	str	r2, [r3, #4]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d104      	bne.n	8006ef2 <vTaskSwitchContext+0x8a>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <vTaskSwitchContext+0xb8>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	4a06      	ldr	r2, [pc, #24]	; (8006f18 <vTaskSwitchContext+0xb0>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6013      	str	r3, [r2, #0]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000fd8 	.word	0x20000fd8
 8006f14:	20000fc4 	.word	0x20000fc4
 8006f18:	20000fb8 	.word	0x20000fb8
 8006f1c:	20000ae0 	.word	0x20000ae0
 8006f20:	20000adc 	.word	0x20000adc

08006f24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	60fb      	str	r3, [r7, #12]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f4a:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <vTaskPlaceOnEventList+0x44>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3318      	adds	r3, #24
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fe fd91 	bl	8005a7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6838      	ldr	r0, [r7, #0]
 8006f5c:	f000 fa7c 	bl	8007458 <prvAddCurrentTaskToDelayedList>
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000adc 	.word	0x20000adc

08006f6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	617b      	str	r3, [r7, #20]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3318      	adds	r3, #24
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7fe fd48 	bl	8005a32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	68b8      	ldr	r0, [r7, #8]
 8006fb2:	f000 fa51 	bl	8007458 <prvAddCurrentTaskToDelayedList>
	}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000adc 	.word	0x20000adc

08006fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60fb      	str	r3, [r7, #12]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	3318      	adds	r3, #24
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fd79 	bl	8005aec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <xTaskRemoveFromEventList+0xb0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d11d      	bne.n	800703e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	3304      	adds	r3, #4
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fd70 	bl	8005aec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	4b19      	ldr	r3, [pc, #100]	; (8007078 <xTaskRemoveFromEventList+0xb4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d903      	bls.n	8007020 <xTaskRemoveFromEventList+0x5c>
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	4a16      	ldr	r2, [pc, #88]	; (8007078 <xTaskRemoveFromEventList+0xb4>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a13      	ldr	r2, [pc, #76]	; (800707c <xTaskRemoveFromEventList+0xb8>)
 800702e:	441a      	add	r2, r3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f7fe fcfb 	bl	8005a32 <vListInsertEnd>
 800703c:	e005      	b.n	800704a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3318      	adds	r3, #24
 8007042:	4619      	mov	r1, r3
 8007044:	480e      	ldr	r0, [pc, #56]	; (8007080 <xTaskRemoveFromEventList+0xbc>)
 8007046:	f7fe fcf4 	bl	8005a32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <xTaskRemoveFromEventList+0xc0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	429a      	cmp	r2, r3
 8007056:	d905      	bls.n	8007064 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <xTaskRemoveFromEventList+0xc4>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e001      	b.n	8007068 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007068:	697b      	ldr	r3, [r7, #20]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000fd8 	.word	0x20000fd8
 8007078:	20000fb8 	.word	0x20000fb8
 800707c:	20000ae0 	.word	0x20000ae0
 8007080:	20000f70 	.word	0x20000f70
 8007084:	20000adc 	.word	0x20000adc
 8007088:	20000fc4 	.word	0x20000fc4

0800708c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <vTaskInternalSetTimeOutState+0x24>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <vTaskInternalSetTimeOutState+0x28>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000fc8 	.word	0x20000fc8
 80070b4:	20000fb4 	.word	0x20000fb4

080070b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	613b      	str	r3, [r7, #16]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	60fb      	str	r3, [r7, #12]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070fa:	f000 ff33 	bl	8007f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <xTaskCheckForTimeOut+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007116:	d102      	bne.n	800711e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e023      	b.n	8007166 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <xTaskCheckForTimeOut+0xc0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d007      	beq.n	800713a <xTaskCheckForTimeOut+0x82>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e015      	b.n	8007166 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	429a      	cmp	r2, r3
 8007142:	d20b      	bcs.n	800715c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ff9b 	bl	800708c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	e004      	b.n	8007166 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007162:	2301      	movs	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007166:	f000 ff2d 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 800716a:	69fb      	ldr	r3, [r7, #28]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000fb4 	.word	0x20000fb4
 8007178:	20000fc8 	.word	0x20000fc8

0800717c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <vTaskMissedYield+0x14>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20000fc4 	.word	0x20000fc4

08007194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800719c:	f000 f852 	bl	8007244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <prvIdleTask+0x28>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d9f9      	bls.n	800719c <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <prvIdleTask+0x2c>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b8:	e7f0      	b.n	800719c <prvIdleTask+0x8>
 80071ba:	bf00      	nop
 80071bc:	20000ae0 	.word	0x20000ae0
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	e00c      	b.n	80071ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <prvInitialiseTaskLists+0x60>)
 80071dc:	4413      	add	r3, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fbfa 	bl	80059d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3301      	adds	r3, #1
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b37      	cmp	r3, #55	; 0x37
 80071ee:	d9ef      	bls.n	80071d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071f0:	480d      	ldr	r0, [pc, #52]	; (8007228 <prvInitialiseTaskLists+0x64>)
 80071f2:	f7fe fbf1 	bl	80059d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071f6:	480d      	ldr	r0, [pc, #52]	; (800722c <prvInitialiseTaskLists+0x68>)
 80071f8:	f7fe fbee 	bl	80059d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071fc:	480c      	ldr	r0, [pc, #48]	; (8007230 <prvInitialiseTaskLists+0x6c>)
 80071fe:	f7fe fbeb 	bl	80059d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007202:	480c      	ldr	r0, [pc, #48]	; (8007234 <prvInitialiseTaskLists+0x70>)
 8007204:	f7fe fbe8 	bl	80059d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007208:	480b      	ldr	r0, [pc, #44]	; (8007238 <prvInitialiseTaskLists+0x74>)
 800720a:	f7fe fbe5 	bl	80059d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <prvInitialiseTaskLists+0x78>)
 8007210:	4a05      	ldr	r2, [pc, #20]	; (8007228 <prvInitialiseTaskLists+0x64>)
 8007212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007214:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <prvInitialiseTaskLists+0x7c>)
 8007216:	4a05      	ldr	r2, [pc, #20]	; (800722c <prvInitialiseTaskLists+0x68>)
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000ae0 	.word	0x20000ae0
 8007228:	20000f40 	.word	0x20000f40
 800722c:	20000f54 	.word	0x20000f54
 8007230:	20000f70 	.word	0x20000f70
 8007234:	20000f84 	.word	0x20000f84
 8007238:	20000f9c 	.word	0x20000f9c
 800723c:	20000f68 	.word	0x20000f68
 8007240:	20000f6c 	.word	0x20000f6c

08007244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800724a:	e019      	b.n	8007280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800724c:	f000 fe8a 	bl	8007f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <prvCheckTasksWaitingTermination+0x50>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fc45 	bl	8005aec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007262:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <prvCheckTasksWaitingTermination+0x54>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a0b      	ldr	r2, [pc, #44]	; (8007298 <prvCheckTasksWaitingTermination+0x54>)
 800726a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <prvCheckTasksWaitingTermination+0x58>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	4a0a      	ldr	r2, [pc, #40]	; (800729c <prvCheckTasksWaitingTermination+0x58>)
 8007274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007276:	f000 fea5 	bl	8007fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f810 	bl	80072a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007280:	4b06      	ldr	r3, [pc, #24]	; (800729c <prvCheckTasksWaitingTermination+0x58>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e1      	bne.n	800724c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000f84 	.word	0x20000f84
 8007298:	20000fb0 	.word	0x20000fb0
 800729c:	20000f98 	.word	0x20000f98

080072a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d108      	bne.n	80072c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 f842 	bl	8008340 <vPortFree>
				vPortFree( pxTCB );
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f83f 	bl	8008340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072c2:	e018      	b.n	80072f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d103      	bne.n	80072d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f836 	bl	8008340 <vPortFree>
	}
 80072d4:	e00f      	b.n	80072f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d00a      	beq.n	80072f6 <prvDeleteTCB+0x56>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <prvDeleteTCB+0x54>
	}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvResetNextTaskUnblockTime+0x38>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvResetNextTaskUnblockTime+0x3c>)
 8007312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007318:	e008      	b.n	800732c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <prvResetNextTaskUnblockTime+0x38>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a04      	ldr	r2, [pc, #16]	; (800733c <prvResetNextTaskUnblockTime+0x3c>)
 800732a:	6013      	str	r3, [r2, #0]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000f68 	.word	0x20000f68
 800733c:	20000fd0 	.word	0x20000fd0

08007340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007346:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <xTaskGetSchedulerState+0x34>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d102      	bne.n	8007354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800734e:	2301      	movs	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e008      	b.n	8007366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007354:	4b08      	ldr	r3, [pc, #32]	; (8007378 <xTaskGetSchedulerState+0x38>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800735c:	2302      	movs	r3, #2
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e001      	b.n	8007366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007366:	687b      	ldr	r3, [r7, #4]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20000fbc 	.word	0x20000fbc
 8007378:	20000fd8 	.word	0x20000fd8

0800737c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d056      	beq.n	8007440 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007392:	4b2e      	ldr	r3, [pc, #184]	; (800744c <xTaskPriorityDisinherit+0xd0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	429a      	cmp	r2, r3
 800739a:	d00a      	beq.n	80073b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60fb      	str	r3, [r7, #12]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60bb      	str	r3, [r7, #8]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d02c      	beq.n	8007440 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d128      	bne.n	8007440 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3304      	adds	r3, #4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fb7a 	bl	8005aec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <xTaskPriorityDisinherit+0xd4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d903      	bls.n	8007420 <xTaskPriorityDisinherit+0xa4>
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <xTaskPriorityDisinherit+0xd4>)
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4a09      	ldr	r2, [pc, #36]	; (8007454 <xTaskPriorityDisinherit+0xd8>)
 800742e:	441a      	add	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	3304      	adds	r3, #4
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f7fe fafb 	bl	8005a32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007440:	697b      	ldr	r3, [r7, #20]
	}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000adc 	.word	0x20000adc
 8007450:	20000fb8 	.word	0x20000fb8
 8007454:	20000ae0 	.word	0x20000ae0

08007458 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <prvAddCurrentTaskToDelayedList+0x94>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3304      	adds	r3, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fb3c 	bl	8005aec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747a:	d10a      	bne.n	8007492 <prvAddCurrentTaskToDelayedList+0x3a>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007482:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3304      	adds	r3, #4
 8007488:	4619      	mov	r1, r3
 800748a:	4819      	ldr	r0, [pc, #100]	; (80074f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800748c:	f7fe fad1 	bl	8005a32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007490:	e026      	b.n	80074e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4413      	add	r3, r2
 8007498:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <prvAddCurrentTaskToDelayedList+0x94>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d209      	bcs.n	80074be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074aa:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <prvAddCurrentTaskToDelayedList+0x94>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7fe fadf 	bl	8005a7a <vListInsert>
}
 80074bc:	e010      	b.n	80074e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <prvAddCurrentTaskToDelayedList+0x94>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3304      	adds	r3, #4
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f7fe fad5 	bl	8005a7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d202      	bcs.n	80074e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074da:	4a08      	ldr	r2, [pc, #32]	; (80074fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	6013      	str	r3, [r2, #0]
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000fb4 	.word	0x20000fb4
 80074ec:	20000adc 	.word	0x20000adc
 80074f0:	20000f9c 	.word	0x20000f9c
 80074f4:	20000f6c 	.word	0x20000f6c
 80074f8:	20000f68 	.word	0x20000f68
 80074fc:	20000fd0 	.word	0x20000fd0

08007500 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800750a:	f000 fba1 	bl	8007c50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800750e:	4b1c      	ldr	r3, [pc, #112]	; (8007580 <xTimerCreateTimerTask+0x80>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d021      	beq.n	800755a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800751e:	1d3a      	adds	r2, r7, #4
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	f107 030c 	add.w	r3, r7, #12
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe fa3b 	bl	80059a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	9202      	str	r2, [sp, #8]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	2302      	movs	r3, #2
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	2300      	movs	r3, #0
 800753e:	460a      	mov	r2, r1
 8007540:	4910      	ldr	r1, [pc, #64]	; (8007584 <xTimerCreateTimerTask+0x84>)
 8007542:	4811      	ldr	r0, [pc, #68]	; (8007588 <xTimerCreateTimerTask+0x88>)
 8007544:	f7ff f8de 	bl	8006704 <xTaskCreateStatic>
 8007548:	4603      	mov	r3, r0
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <xTimerCreateTimerTask+0x8c>)
 800754c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <xTimerCreateTimerTask+0x8c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007556:	2301      	movs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	613b      	str	r3, [r7, #16]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007576:	697b      	ldr	r3, [r7, #20]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	2000100c 	.word	0x2000100c
 8007584:	0800b420 	.word	0x0800b420
 8007588:	080077f9 	.word	0x080077f9
 800758c:	20001010 	.word	0x20001010

08007590 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800759e:	202c      	movs	r0, #44	; 0x2c
 80075a0:	f000 fe02 	bl	80081a8 <pvPortMalloc>
 80075a4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f843 	bl	800764e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80075c8:	697b      	ldr	r3, [r7, #20]
	}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b08a      	sub	sp, #40	; 0x28
 80075d6:	af02      	add	r7, sp, #8
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80075e0:	232c      	movs	r3, #44	; 0x2c
 80075e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2b2c      	cmp	r3, #44	; 0x2c
 80075e8:	d00a      	beq.n	8007600 <xTimerCreateStatic+0x2e>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	61bb      	str	r3, [r7, #24]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007600:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <xTimerCreateStatic+0x4c>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	617b      	str	r3, [r7, #20]
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f805 	bl	800764e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007644:	69fb      	ldr	r3, [r7, #28]
	}
 8007646:	4618      	mov	r0, r3
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	617b      	str	r3, [r7, #20]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01e      	beq.n	80076bc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800767e:	f000 fae7 	bl	8007c50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe f9ba 	bl	8005a18 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076b0:	f043 0304 	orr.w	r3, r3, #4
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80076bc:	bf00      	nop
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	623b      	str	r3, [r7, #32]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076f2:	4b1a      	ldr	r3, [pc, #104]	; (800775c <xTimerGenericCommand+0x98>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02a      	beq.n	8007750 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b05      	cmp	r3, #5
 800770a:	dc18      	bgt.n	800773e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800770c:	f7ff fe18 	bl	8007340 <xTaskGetSchedulerState>
 8007710:	4603      	mov	r3, r0
 8007712:	2b02      	cmp	r3, #2
 8007714:	d109      	bne.n	800772a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007716:	4b11      	ldr	r3, [pc, #68]	; (800775c <xTimerGenericCommand+0x98>)
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	f107 0110 	add.w	r1, r7, #16
 800771e:	2300      	movs	r3, #0
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	f7fe fb4b 	bl	8005dbc <xQueueGenericSend>
 8007726:	6278      	str	r0, [r7, #36]	; 0x24
 8007728:	e012      	b.n	8007750 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <xTimerGenericCommand+0x98>)
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	f107 0110 	add.w	r1, r7, #16
 8007732:	2300      	movs	r3, #0
 8007734:	2200      	movs	r2, #0
 8007736:	f7fe fb41 	bl	8005dbc <xQueueGenericSend>
 800773a:	6278      	str	r0, [r7, #36]	; 0x24
 800773c:	e008      	b.n	8007750 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <xTimerGenericCommand+0x98>)
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f107 0110 	add.w	r1, r7, #16
 8007746:	2300      	movs	r3, #0
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f7fe fc35 	bl	8005fb8 <xQueueGenericSendFromISR>
 800774e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007752:	4618      	mov	r0, r3
 8007754:	3728      	adds	r7, #40	; 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	2000100c 	.word	0x2000100c

08007760 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800776a:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <prvProcessExpiredTimer+0x94>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	3304      	adds	r3, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe f9b7 	bl	8005aec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d022      	beq.n	80077d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	18d1      	adds	r1, r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	6978      	ldr	r0, [r7, #20]
 800779a:	f000 f8d1 	bl	8007940 <prvInsertTimerInActiveList>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01f      	beq.n	80077e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077a4:	2300      	movs	r3, #0
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	2100      	movs	r1, #0
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f7ff ff88 	bl	80076c4 <xTimerGenericCommand>
 80077b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d113      	bne.n	80077e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	6978      	ldr	r0, [r7, #20]
 80077ea:	4798      	blx	r3
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20001004 	.word	0x20001004

080077f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007800:	f107 0308 	add.w	r3, r7, #8
 8007804:	4618      	mov	r0, r3
 8007806:	f000 f857 	bl	80078b8 <prvGetNextExpireTime>
 800780a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4619      	mov	r1, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f803 	bl	800781c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007816:	f000 f8d5 	bl	80079c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800781a:	e7f1      	b.n	8007800 <prvTimerTask+0x8>

0800781c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007826:	f7ff f9a9 	bl	8006b7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f866 	bl	8007900 <prvSampleTimeNow>
 8007834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d130      	bne.n	800789e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <prvProcessTimerOrBlockTask+0x3c>
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	429a      	cmp	r2, r3
 8007848:	d806      	bhi.n	8007858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800784a:	f7ff f9a5 	bl	8006b98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff ff85 	bl	8007760 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007856:	e024      	b.n	80078a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <prvProcessTimerOrBlockTask+0x90>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <prvProcessTimerOrBlockTask+0x50>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <prvProcessTimerOrBlockTask+0x52>
 800786c:	2300      	movs	r3, #0
 800786e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <prvProcessTimerOrBlockTask+0x94>)
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	f7fe ff0d 	bl	800669c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007882:	f7ff f989 	bl	8006b98 <xTaskResumeAll>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <prvProcessTimerOrBlockTask+0x98>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	f3bf 8f6f 	isb	sy
}
 800789c:	e001      	b.n	80078a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800789e:	f7ff f97b 	bl	8006b98 <xTaskResumeAll>
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20001008 	.word	0x20001008
 80078b0:	2000100c 	.word	0x2000100c
 80078b4:	e000ed04 	.word	0xe000ed04

080078b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <prvGetNextExpireTime+0x44>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <prvGetNextExpireTime+0x16>
 80078ca:	2201      	movs	r2, #1
 80078cc:	e000      	b.n	80078d0 <prvGetNextExpireTime+0x18>
 80078ce:	2200      	movs	r2, #0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <prvGetNextExpireTime+0x44>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e001      	b.n	80078ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	20001004 	.word	0x20001004

08007900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007908:	f7ff f9e4 	bl	8006cd4 <xTaskGetTickCount>
 800790c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <prvSampleTimeNow+0x3c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d205      	bcs.n	8007924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007918:	f000 f936 	bl	8007b88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e002      	b.n	800792a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800792a:	4a04      	ldr	r2, [pc, #16]	; (800793c <prvSampleTimeNow+0x3c>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007930:	68fb      	ldr	r3, [r7, #12]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20001014 	.word	0x20001014

08007940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d812      	bhi.n	800798c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e01b      	b.n	80079b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <prvInsertTimerInActiveList+0x7c>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3304      	adds	r3, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f7fe f878 	bl	8005a7a <vListInsert>
 800798a:	e012      	b.n	80079b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d206      	bcs.n	80079a2 <prvInsertTimerInActiveList+0x62>
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d302      	bcc.n	80079a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	e007      	b.n	80079b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079a2:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <prvInsertTimerInActiveList+0x80>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fe f864 	bl	8005a7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079b2:	697b      	ldr	r3, [r7, #20]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20001008 	.word	0x20001008
 80079c0:	20001004 	.word	0x20001004

080079c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08e      	sub	sp, #56	; 0x38
 80079c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ca:	e0ca      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da18      	bge.n	8007a04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079d2:	1d3b      	adds	r3, r7, #4
 80079d4:	3304      	adds	r3, #4
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61fb      	str	r3, [r7, #28]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fa:	6850      	ldr	r0, [r2, #4]
 80079fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fe:	6892      	ldr	r2, [r2, #8]
 8007a00:	4611      	mov	r1, r2
 8007a02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f2c0 80aa 	blt.w	8007b60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe f865 	bl	8005aec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a22:	463b      	mov	r3, r7
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff ff6b 	bl	8007900 <prvSampleTimeNow>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	f200 8097 	bhi.w	8007b62 <prvProcessReceivedCommands+0x19e>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <prvProcessReceivedCommands+0x78>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a65 	.word	0x08007a65
 8007a48:	08007ad9 	.word	0x08007ad9
 8007a4c:	08007aed 	.word	0x08007aed
 8007a50:	08007b37 	.word	0x08007b37
 8007a54:	08007a65 	.word	0x08007a65
 8007a58:	08007a65 	.word	0x08007a65
 8007a5c:	08007ad9 	.word	0x08007ad9
 8007a60:	08007aed 	.word	0x08007aed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	18d1      	adds	r1, r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a84:	f7ff ff5c 	bl	8007940 <prvInsertTimerInActiveList>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d069      	beq.n	8007b62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d05e      	beq.n	8007b62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	441a      	add	r2, r3
 8007aac:	2300      	movs	r3, #0
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab6:	f7ff fe05 	bl	80076c4 <xTimerGenericCommand>
 8007aba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d14f      	bne.n	8007b62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	61bb      	str	r3, [r7, #24]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007aea:	e03a      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	617b      	str	r3, [r7, #20]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	18d1      	adds	r1, r2, r3
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b30:	f7ff ff06 	bl	8007940 <prvInsertTimerInActiveList>
					break;
 8007b34:	e015      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d103      	bne.n	8007b4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b46:	f000 fbfb 	bl	8008340 <vPortFree>
 8007b4a:	e00a      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b5e:	e000      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <prvProcessReceivedCommands+0x1c0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	1d39      	adds	r1, r7, #4
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fac0 	bl	80060f0 <xQueueReceive>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f47f af2a 	bne.w	80079cc <prvProcessReceivedCommands+0x8>
	}
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	3730      	adds	r7, #48	; 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	2000100c 	.word	0x2000100c

08007b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b8e:	e048      	b.n	8007c22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b90:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fd ff9f 	bl	8005aec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d02e      	beq.n	8007c22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4413      	add	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d90e      	bls.n	8007bf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007be2:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f7fd ff44 	bl	8005a7a <vListInsert>
 8007bf2:	e016      	b.n	8007c22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fd60 	bl	80076c4 <xTimerGenericCommand>
 8007c04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	603b      	str	r3, [r7, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1b1      	bne.n	8007b90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <prvSwitchTimerLists+0xc4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007c38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c3a:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <prvSwitchTimerLists+0xc4>)
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20001004 	.word	0x20001004
 8007c4c:	20001008 	.word	0x20001008

08007c50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c56:	f000 f985 	bl	8007f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c5a:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d120      	bne.n	8007ca4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c62:	4814      	ldr	r0, [pc, #80]	; (8007cb4 <prvCheckForValidListAndQueue+0x64>)
 8007c64:	f7fd feb8 	bl	80059d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c68:	4813      	ldr	r0, [pc, #76]	; (8007cb8 <prvCheckForValidListAndQueue+0x68>)
 8007c6a:	f7fd feb5 	bl	80059d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <prvCheckForValidListAndQueue+0x6c>)
 8007c70:	4a10      	ldr	r2, [pc, #64]	; (8007cb4 <prvCheckForValidListAndQueue+0x64>)
 8007c72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c74:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <prvCheckForValidListAndQueue+0x70>)
 8007c76:	4a10      	ldr	r2, [pc, #64]	; (8007cb8 <prvCheckForValidListAndQueue+0x68>)
 8007c78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <prvCheckForValidListAndQueue+0x74>)
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <prvCheckForValidListAndQueue+0x78>)
 8007c82:	2110      	movs	r1, #16
 8007c84:	200a      	movs	r0, #10
 8007c86:	f7fd ffc3 	bl	8005c10 <xQueueGenericCreateStatic>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	490b      	ldr	r1, [pc, #44]	; (8007ccc <prvCheckForValidListAndQueue+0x7c>)
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fcd2 	bl	8006648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ca4:	f000 f98e 	bl	8007fc4 <vPortExitCritical>
}
 8007ca8:	bf00      	nop
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000100c 	.word	0x2000100c
 8007cb4:	20000fdc 	.word	0x20000fdc
 8007cb8:	20000ff0 	.word	0x20000ff0
 8007cbc:	20001004 	.word	0x20001004
 8007cc0:	20001008 	.word	0x20001008
 8007cc4:	200010b8 	.word	0x200010b8
 8007cc8:	20001018 	.word	0x20001018
 8007ccc:	0800b428 	.word	0x0800b428

08007cd0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60fb      	str	r3, [r7, #12]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007cf8:	f000 f934 	bl	8007f64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007d02:	f000 f95f 	bl	8007fc4 <vPortExitCritical>

	return pvReturn;
 8007d06:	693b      	ldr	r3, [r7, #16]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3b04      	subs	r3, #4
 8007d20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b04      	subs	r3, #4
 8007d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f023 0201 	bic.w	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d40:	4a0c      	ldr	r2, [pc, #48]	; (8007d74 <pxPortInitialiseStack+0x64>)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3b14      	subs	r3, #20
 8007d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3b04      	subs	r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f06f 0202 	mvn.w	r2, #2
 8007d5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3b20      	subs	r3, #32
 8007d64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d66:	68fb      	ldr	r3, [r7, #12]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	08007d79 	.word	0x08007d79

08007d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d82:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <prvTaskExitError+0x54>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8a:	d00a      	beq.n	8007da2 <prvTaskExitError+0x2a>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60fb      	str	r3, [r7, #12]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <prvTaskExitError+0x28>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60bb      	str	r3, [r7, #8]
}
 8007db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007db6:	bf00      	nop
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0fc      	beq.n	8007db8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	2000000c 	.word	0x2000000c

08007dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <pxCurrentTCBConst2>)
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	6808      	ldr	r0, [r1, #0]
 8007dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	f380 8809 	msr	PSP, r0
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f380 8811 	msr	BASEPRI, r0
 8007dea:	4770      	bx	lr
 8007dec:	f3af 8000 	nop.w

08007df0 <pxCurrentTCBConst2>:
 8007df0:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007df8:	4808      	ldr	r0, [pc, #32]	; (8007e1c <prvPortStartFirstTask+0x24>)
 8007dfa:	6800      	ldr	r0, [r0, #0]
 8007dfc:	6800      	ldr	r0, [r0, #0]
 8007dfe:	f380 8808 	msr	MSP, r0
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8814 	msr	CONTROL, r0
 8007e0a:	b662      	cpsie	i
 8007e0c:	b661      	cpsie	f
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	df00      	svc	0
 8007e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e1a:	bf00      	nop
 8007e1c:	e000ed08 	.word	0xe000ed08

08007e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e26:	4b46      	ldr	r3, [pc, #280]	; (8007f40 <xPortStartScheduler+0x120>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a46      	ldr	r2, [pc, #280]	; (8007f44 <xPortStartScheduler+0x124>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d10a      	bne.n	8007e46 <xPortStartScheduler+0x26>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	613b      	str	r3, [r7, #16]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e46:	4b3e      	ldr	r3, [pc, #248]	; (8007f40 <xPortStartScheduler+0x120>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a3f      	ldr	r2, [pc, #252]	; (8007f48 <xPortStartScheduler+0x128>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d10a      	bne.n	8007e66 <xPortStartScheduler+0x46>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e66:	4b39      	ldr	r3, [pc, #228]	; (8007f4c <xPortStartScheduler+0x12c>)
 8007e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	4b31      	ldr	r3, [pc, #196]	; (8007f50 <xPortStartScheduler+0x130>)
 8007e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e8e:	4b31      	ldr	r3, [pc, #196]	; (8007f54 <xPortStartScheduler+0x134>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e94:	e009      	b.n	8007eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e96:	4b2f      	ldr	r3, [pc, #188]	; (8007f54 <xPortStartScheduler+0x134>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <xPortStartScheduler+0x134>)
 8007e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	d0ef      	beq.n	8007e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eb6:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <xPortStartScheduler+0x134>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1c3 0307 	rsb	r3, r3, #7
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d00a      	beq.n	8007ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60bb      	str	r3, [r7, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ed8:	4b1e      	ldr	r3, [pc, #120]	; (8007f54 <xPortStartScheduler+0x134>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	4a1d      	ldr	r2, [pc, #116]	; (8007f54 <xPortStartScheduler+0x134>)
 8007ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <xPortStartScheduler+0x134>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eea:	4a1a      	ldr	r2, [pc, #104]	; (8007f54 <xPortStartScheduler+0x134>)
 8007eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ef6:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <xPortStartScheduler+0x138>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <xPortStartScheduler+0x138>)
 8007efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <xPortStartScheduler+0x138>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <xPortStartScheduler+0x138>)
 8007f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f0e:	f000 f8dd 	bl	80080cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f12:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <xPortStartScheduler+0x13c>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f18:	f000 f8fc 	bl	8008114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f1c:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <xPortStartScheduler+0x140>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0f      	ldr	r2, [pc, #60]	; (8007f60 <xPortStartScheduler+0x140>)
 8007f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f28:	f7ff ff66 	bl	8007df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f2c:	f7fe ff9c 	bl	8006e68 <vTaskSwitchContext>
	prvTaskExitError();
 8007f30:	f7ff ff22 	bl	8007d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	e000ed00 	.word	0xe000ed00
 8007f44:	410fc271 	.word	0x410fc271
 8007f48:	410fc270 	.word	0x410fc270
 8007f4c:	e000e400 	.word	0xe000e400
 8007f50:	20001108 	.word	0x20001108
 8007f54:	2000110c 	.word	0x2000110c
 8007f58:	e000ed20 	.word	0xe000ed20
 8007f5c:	2000000c 	.word	0x2000000c
 8007f60:	e000ef34 	.word	0xe000ef34

08007f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	607b      	str	r3, [r7, #4]
}
 8007f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <vPortEnterCritical+0x58>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <vPortEnterCritical+0x58>)
 8007f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <vPortEnterCritical+0x58>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10f      	bne.n	8007fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <vPortEnterCritical+0x5c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <vPortEnterCritical+0x4a>
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	2000000c 	.word	0x2000000c
 8007fc0:	e000ed04 	.word	0xe000ed04

08007fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fca:	4b12      	ldr	r3, [pc, #72]	; (8008014 <vPortExitCritical+0x50>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <vPortExitCritical+0x24>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	607b      	str	r3, [r7, #4]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <vPortExitCritical+0x50>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <vPortExitCritical+0x50>)
 8007ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ff2:	4b08      	ldr	r3, [pc, #32]	; (8008014 <vPortExitCritical+0x50>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <vPortExitCritical+0x42>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	f383 8811 	msr	BASEPRI, r3
}
 8008004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000000c 	.word	0x2000000c
	...

08008020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008020:	f3ef 8009 	mrs	r0, PSP
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <pxCurrentTCBConst>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f01e 0f10 	tst.w	lr, #16
 8008030:	bf08      	it	eq
 8008032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008044:	f380 8811 	msr	BASEPRI, r0
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f7fe ff0a 	bl	8006e68 <vTaskSwitchContext>
 8008054:	f04f 0000 	mov.w	r0, #0
 8008058:	f380 8811 	msr	BASEPRI, r0
 800805c:	bc09      	pop	{r0, r3}
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	6808      	ldr	r0, [r1, #0]
 8008062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008066:	f01e 0f10 	tst.w	lr, #16
 800806a:	bf08      	it	eq
 800806c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008070:	f380 8809 	msr	PSP, r0
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	f3af 8000 	nop.w

08008080 <pxCurrentTCBConst>:
 8008080:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	607b      	str	r3, [r7, #4]
}
 80080a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a2:	f7fe fe27 	bl	8006cf4 <xTaskIncrementTick>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <xPortSysTickHandler+0x40>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f383 8811 	msr	BASEPRI, r3
}
 80080be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <vPortSetupTimerInterrupt+0x34>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <vPortSetupTimerInterrupt+0x38>)
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <vPortSetupTimerInterrupt+0x3c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <vPortSetupTimerInterrupt+0x40>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <vPortSetupTimerInterrupt+0x44>)
 80080ea:	3b01      	subs	r3, #1
 80080ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <vPortSetupTimerInterrupt+0x34>)
 80080f0:	2207      	movs	r2, #7
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	e000e010 	.word	0xe000e010
 8008104:	e000e018 	.word	0xe000e018
 8008108:	20000000 	.word	0x20000000
 800810c:	10624dd3 	.word	0x10624dd3
 8008110:	e000e014 	.word	0xe000e014

08008114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008124 <vPortEnableVFP+0x10>
 8008118:	6801      	ldr	r1, [r0, #0]
 800811a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800811e:	6001      	str	r1, [r0, #0]
 8008120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008122:	bf00      	nop
 8008124:	e000ed88 	.word	0xe000ed88

08008128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800812e:	f3ef 8305 	mrs	r3, IPSR
 8008132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b0f      	cmp	r3, #15
 8008138:	d914      	bls.n	8008164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800813a:	4a17      	ldr	r2, [pc, #92]	; (8008198 <vPortValidateInterruptPriority+0x70>)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008144:	4b15      	ldr	r3, [pc, #84]	; (800819c <vPortValidateInterruptPriority+0x74>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	7afa      	ldrb	r2, [r7, #11]
 800814a:	429a      	cmp	r2, r3
 800814c:	d20a      	bcs.n	8008164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008164:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <vPortValidateInterruptPriority+0x78>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <vPortValidateInterruptPriority+0x7c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d90a      	bls.n	800818a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	603b      	str	r3, [r7, #0]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <vPortValidateInterruptPriority+0x60>
	}
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	e000e3f0 	.word	0xe000e3f0
 800819c:	20001108 	.word	0x20001108
 80081a0:	e000ed0c 	.word	0xe000ed0c
 80081a4:	2000110c 	.word	0x2000110c

080081a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081b4:	f7fe fce2 	bl	8006b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081b8:	4b5b      	ldr	r3, [pc, #364]	; (8008328 <pvPortMalloc+0x180>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081c0:	f000 f920 	bl	8008404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081c4:	4b59      	ldr	r3, [pc, #356]	; (800832c <pvPortMalloc+0x184>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8093 	bne.w	80082f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01d      	beq.n	8008214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081d8:	2208      	movs	r2, #8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d014      	beq.n	8008214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f023 0307 	bic.w	r3, r3, #7
 80081f0:	3308      	adds	r3, #8
 80081f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <pvPortMalloc+0x6c>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	617b      	str	r3, [r7, #20]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d06e      	beq.n	80082f8 <pvPortMalloc+0x150>
 800821a:	4b45      	ldr	r3, [pc, #276]	; (8008330 <pvPortMalloc+0x188>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d869      	bhi.n	80082f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008224:	4b43      	ldr	r3, [pc, #268]	; (8008334 <pvPortMalloc+0x18c>)
 8008226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008228:	4b42      	ldr	r3, [pc, #264]	; (8008334 <pvPortMalloc+0x18c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800822e:	e004      	b.n	800823a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d903      	bls.n	800824c <pvPortMalloc+0xa4>
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f1      	bne.n	8008230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800824c:	4b36      	ldr	r3, [pc, #216]	; (8008328 <pvPortMalloc+0x180>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	429a      	cmp	r2, r3
 8008254:	d050      	beq.n	80082f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2208      	movs	r2, #8
 800825c:	4413      	add	r3, r2
 800825e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	2308      	movs	r3, #8
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	429a      	cmp	r2, r3
 8008276:	d91f      	bls.n	80082b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <pvPortMalloc+0xf8>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	613b      	str	r3, [r7, #16]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	1ad2      	subs	r2, r2, r3
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082b2:	69b8      	ldr	r0, [r7, #24]
 80082b4:	f000 f908 	bl	80084c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082b8:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <pvPortMalloc+0x188>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <pvPortMalloc+0x188>)
 80082c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082c6:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <pvPortMalloc+0x188>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <pvPortMalloc+0x190>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d203      	bcs.n	80082da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082d2:	4b17      	ldr	r3, [pc, #92]	; (8008330 <pvPortMalloc+0x188>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <pvPortMalloc+0x190>)
 80082d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <pvPortMalloc+0x184>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <pvPortMalloc+0x194>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	4a11      	ldr	r2, [pc, #68]	; (800833c <pvPortMalloc+0x194>)
 80082f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082f8:	f7fe fc4e 	bl	8006b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <pvPortMalloc+0x174>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60fb      	str	r3, [r7, #12]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <pvPortMalloc+0x172>
	return pvReturn;
 800831c:	69fb      	ldr	r3, [r7, #28]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3728      	adds	r7, #40	; 0x28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20004d18 	.word	0x20004d18
 800832c:	20004d2c 	.word	0x20004d2c
 8008330:	20004d1c 	.word	0x20004d1c
 8008334:	20004d10 	.word	0x20004d10
 8008338:	20004d20 	.word	0x20004d20
 800833c:	20004d24 	.word	0x20004d24

08008340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d04d      	beq.n	80083ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008352:	2308      	movs	r3, #8
 8008354:	425b      	negs	r3, r3
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <vPortFree+0xb8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <vPortFree+0x44>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <vPortFree+0x62>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60bb      	str	r3, [r7, #8]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <vPortFree+0xb8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01e      	beq.n	80083ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11a      	bne.n	80083ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <vPortFree+0xb8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083c8:	f7fe fbd8 	bl	8006b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <vPortFree+0xbc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	4a09      	ldr	r2, [pc, #36]	; (80083fc <vPortFree+0xbc>)
 80083d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f000 f874 	bl	80084c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <vPortFree+0xc0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3301      	adds	r3, #1
 80083e6:	4a06      	ldr	r2, [pc, #24]	; (8008400 <vPortFree+0xc0>)
 80083e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083ea:	f7fe fbd5 	bl	8006b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20004d2c 	.word	0x20004d2c
 80083fc:	20004d1c 	.word	0x20004d1c
 8008400:	20004d28 	.word	0x20004d28

08008404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800840a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800840e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008410:	4b27      	ldr	r3, [pc, #156]	; (80084b0 <prvHeapInit+0xac>)
 8008412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00c      	beq.n	8008438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0307 	bic.w	r3, r3, #7
 800842a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	4a1f      	ldr	r2, [pc, #124]	; (80084b0 <prvHeapInit+0xac>)
 8008434:	4413      	add	r3, r2
 8008436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <prvHeapInit+0xb0>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008442:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <prvHeapInit+0xb0>)
 8008444:	2200      	movs	r2, #0
 8008446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4413      	add	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008450:	2208      	movs	r2, #8
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0307 	bic.w	r3, r3, #7
 800845e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <prvHeapInit+0xb4>)
 8008464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <prvHeapInit+0xb4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <prvHeapInit+0xb4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008484:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvHeapInit+0xb4>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <prvHeapInit+0xb8>)
 8008492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <prvHeapInit+0xbc>)
 800849a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <prvHeapInit+0xc0>)
 800849e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20001110 	.word	0x20001110
 80084b4:	20004d10 	.word	0x20004d10
 80084b8:	20004d18 	.word	0x20004d18
 80084bc:	20004d20 	.word	0x20004d20
 80084c0:	20004d1c 	.word	0x20004d1c
 80084c4:	20004d2c 	.word	0x20004d2c

080084c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <prvInsertBlockIntoFreeList+0xac>)
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e002      	b.n	80084dc <prvInsertBlockIntoFreeList+0x14>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d8f7      	bhi.n	80084d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	4413      	add	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d108      	bne.n	800850a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	441a      	add	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	441a      	add	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d118      	bne.n	8008550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <prvInsertBlockIntoFreeList+0xb0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d00d      	beq.n	8008546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	441a      	add	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e008      	b.n	8008558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvInsertBlockIntoFreeList+0xb0>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e003      	b.n	8008558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d002      	beq.n	8008566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20004d10 	.word	0x20004d10
 8008578:	20004d18 	.word	0x20004d18

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000010 	.word	0x20000010

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	; (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	; (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	; (80085cc <__libc_init_array+0x44>)
 800859c:	f002 ff02 	bl	800b3a4 <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	0800b8bc 	.word	0x0800b8bc
 80085c4:	0800b8bc 	.word	0x0800b8bc
 80085c8:	0800b8bc 	.word	0x0800b8bc
 80085cc:	0800b8c0 	.word	0x0800b8c0

080085d0 <memcpy>:
 80085d0:	440a      	add	r2, r1
 80085d2:	4291      	cmp	r1, r2
 80085d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085d8:	d100      	bne.n	80085dc <memcpy+0xc>
 80085da:	4770      	bx	lr
 80085dc:	b510      	push	{r4, lr}
 80085de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e6:	4291      	cmp	r1, r2
 80085e8:	d1f9      	bne.n	80085de <memcpy+0xe>
 80085ea:	bd10      	pop	{r4, pc}

080085ec <memset>:
 80085ec:	4402      	add	r2, r0
 80085ee:	4603      	mov	r3, r0
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d100      	bne.n	80085f6 <memset+0xa>
 80085f4:	4770      	bx	lr
 80085f6:	f803 1b01 	strb.w	r1, [r3], #1
 80085fa:	e7f9      	b.n	80085f0 <memset+0x4>

080085fc <__cvt>:
 80085fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	ec55 4b10 	vmov	r4, r5, d0
 8008604:	2d00      	cmp	r5, #0
 8008606:	460e      	mov	r6, r1
 8008608:	4619      	mov	r1, r3
 800860a:	462b      	mov	r3, r5
 800860c:	bfbb      	ittet	lt
 800860e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008612:	461d      	movlt	r5, r3
 8008614:	2300      	movge	r3, #0
 8008616:	232d      	movlt	r3, #45	; 0x2d
 8008618:	700b      	strb	r3, [r1, #0]
 800861a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800861c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008620:	4691      	mov	r9, r2
 8008622:	f023 0820 	bic.w	r8, r3, #32
 8008626:	bfbc      	itt	lt
 8008628:	4622      	movlt	r2, r4
 800862a:	4614      	movlt	r4, r2
 800862c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008630:	d005      	beq.n	800863e <__cvt+0x42>
 8008632:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008636:	d100      	bne.n	800863a <__cvt+0x3e>
 8008638:	3601      	adds	r6, #1
 800863a:	2102      	movs	r1, #2
 800863c:	e000      	b.n	8008640 <__cvt+0x44>
 800863e:	2103      	movs	r1, #3
 8008640:	ab03      	add	r3, sp, #12
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	ab02      	add	r3, sp, #8
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	ec45 4b10 	vmov	d0, r4, r5
 800864c:	4653      	mov	r3, sl
 800864e:	4632      	mov	r2, r6
 8008650:	f000 fcea 	bl	8009028 <_dtoa_r>
 8008654:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008658:	4607      	mov	r7, r0
 800865a:	d102      	bne.n	8008662 <__cvt+0x66>
 800865c:	f019 0f01 	tst.w	r9, #1
 8008660:	d022      	beq.n	80086a8 <__cvt+0xac>
 8008662:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008666:	eb07 0906 	add.w	r9, r7, r6
 800866a:	d110      	bne.n	800868e <__cvt+0x92>
 800866c:	783b      	ldrb	r3, [r7, #0]
 800866e:	2b30      	cmp	r3, #48	; 0x30
 8008670:	d10a      	bne.n	8008688 <__cvt+0x8c>
 8008672:	2200      	movs	r2, #0
 8008674:	2300      	movs	r3, #0
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 fa45 	bl	8000b08 <__aeabi_dcmpeq>
 800867e:	b918      	cbnz	r0, 8008688 <__cvt+0x8c>
 8008680:	f1c6 0601 	rsb	r6, r6, #1
 8008684:	f8ca 6000 	str.w	r6, [sl]
 8008688:	f8da 3000 	ldr.w	r3, [sl]
 800868c:	4499      	add	r9, r3
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f8 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800869a:	b108      	cbz	r0, 80086a0 <__cvt+0xa4>
 800869c:	f8cd 900c 	str.w	r9, [sp, #12]
 80086a0:	2230      	movs	r2, #48	; 0x30
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	454b      	cmp	r3, r9
 80086a6:	d307      	bcc.n	80086b8 <__cvt+0xbc>
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ac:	1bdb      	subs	r3, r3, r7
 80086ae:	4638      	mov	r0, r7
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	b004      	add	sp, #16
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	1c59      	adds	r1, r3, #1
 80086ba:	9103      	str	r1, [sp, #12]
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e7f0      	b.n	80086a2 <__cvt+0xa6>

080086c0 <__exponent>:
 80086c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086c2:	4603      	mov	r3, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	bfb8      	it	lt
 80086c8:	4249      	neglt	r1, r1
 80086ca:	f803 2b02 	strb.w	r2, [r3], #2
 80086ce:	bfb4      	ite	lt
 80086d0:	222d      	movlt	r2, #45	; 0x2d
 80086d2:	222b      	movge	r2, #43	; 0x2b
 80086d4:	2909      	cmp	r1, #9
 80086d6:	7042      	strb	r2, [r0, #1]
 80086d8:	dd2a      	ble.n	8008730 <__exponent+0x70>
 80086da:	f10d 0407 	add.w	r4, sp, #7
 80086de:	46a4      	mov	ip, r4
 80086e0:	270a      	movs	r7, #10
 80086e2:	46a6      	mov	lr, r4
 80086e4:	460a      	mov	r2, r1
 80086e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80086ea:	fb07 1516 	mls	r5, r7, r6, r1
 80086ee:	3530      	adds	r5, #48	; 0x30
 80086f0:	2a63      	cmp	r2, #99	; 0x63
 80086f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80086f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086fa:	4631      	mov	r1, r6
 80086fc:	dcf1      	bgt.n	80086e2 <__exponent+0x22>
 80086fe:	3130      	adds	r1, #48	; 0x30
 8008700:	f1ae 0502 	sub.w	r5, lr, #2
 8008704:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008708:	1c44      	adds	r4, r0, #1
 800870a:	4629      	mov	r1, r5
 800870c:	4561      	cmp	r1, ip
 800870e:	d30a      	bcc.n	8008726 <__exponent+0x66>
 8008710:	f10d 0209 	add.w	r2, sp, #9
 8008714:	eba2 020e 	sub.w	r2, r2, lr
 8008718:	4565      	cmp	r5, ip
 800871a:	bf88      	it	hi
 800871c:	2200      	movhi	r2, #0
 800871e:	4413      	add	r3, r2
 8008720:	1a18      	subs	r0, r3, r0
 8008722:	b003      	add	sp, #12
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800872a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800872e:	e7ed      	b.n	800870c <__exponent+0x4c>
 8008730:	2330      	movs	r3, #48	; 0x30
 8008732:	3130      	adds	r1, #48	; 0x30
 8008734:	7083      	strb	r3, [r0, #2]
 8008736:	70c1      	strb	r1, [r0, #3]
 8008738:	1d03      	adds	r3, r0, #4
 800873a:	e7f1      	b.n	8008720 <__exponent+0x60>

0800873c <_printf_float>:
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	ed2d 8b02 	vpush	{d8}
 8008744:	b08d      	sub	sp, #52	; 0x34
 8008746:	460c      	mov	r4, r1
 8008748:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800874c:	4616      	mov	r6, r2
 800874e:	461f      	mov	r7, r3
 8008750:	4605      	mov	r5, r0
 8008752:	f001 fa57 	bl	8009c04 <_localeconv_r>
 8008756:	f8d0 a000 	ldr.w	sl, [r0]
 800875a:	4650      	mov	r0, sl
 800875c:	f7f7 fd58 	bl	8000210 <strlen>
 8008760:	2300      	movs	r3, #0
 8008762:	930a      	str	r3, [sp, #40]	; 0x28
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	f8d8 3000 	ldr.w	r3, [r8]
 800876c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008770:	3307      	adds	r3, #7
 8008772:	f023 0307 	bic.w	r3, r3, #7
 8008776:	f103 0208 	add.w	r2, r3, #8
 800877a:	f8c8 2000 	str.w	r2, [r8]
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008786:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800878a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800878e:	9307      	str	r3, [sp, #28]
 8008790:	f8cd 8018 	str.w	r8, [sp, #24]
 8008794:	ee08 0a10 	vmov	s16, r0
 8008798:	4b9f      	ldr	r3, [pc, #636]	; (8008a18 <_printf_float+0x2dc>)
 800879a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800879e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a2:	f7f8 f9e3 	bl	8000b6c <__aeabi_dcmpun>
 80087a6:	bb88      	cbnz	r0, 800880c <_printf_float+0xd0>
 80087a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ac:	4b9a      	ldr	r3, [pc, #616]	; (8008a18 <_printf_float+0x2dc>)
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087b2:	f7f8 f9bd 	bl	8000b30 <__aeabi_dcmple>
 80087b6:	bb48      	cbnz	r0, 800880c <_printf_float+0xd0>
 80087b8:	2200      	movs	r2, #0
 80087ba:	2300      	movs	r3, #0
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f8 f9ac 	bl	8000b1c <__aeabi_dcmplt>
 80087c4:	b110      	cbz	r0, 80087cc <_printf_float+0x90>
 80087c6:	232d      	movs	r3, #45	; 0x2d
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087cc:	4b93      	ldr	r3, [pc, #588]	; (8008a1c <_printf_float+0x2e0>)
 80087ce:	4894      	ldr	r0, [pc, #592]	; (8008a20 <_printf_float+0x2e4>)
 80087d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087d4:	bf94      	ite	ls
 80087d6:	4698      	movls	r8, r3
 80087d8:	4680      	movhi	r8, r0
 80087da:	2303      	movs	r3, #3
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	f023 0204 	bic.w	r2, r3, #4
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	f04f 0900 	mov.w	r9, #0
 80087ea:	9700      	str	r7, [sp, #0]
 80087ec:	4633      	mov	r3, r6
 80087ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80087f0:	4621      	mov	r1, r4
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 f9d8 	bl	8008ba8 <_printf_common>
 80087f8:	3001      	adds	r0, #1
 80087fa:	f040 8090 	bne.w	800891e <_printf_float+0x1e2>
 80087fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008802:	b00d      	add	sp, #52	; 0x34
 8008804:	ecbd 8b02 	vpop	{d8}
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	4642      	mov	r2, r8
 800880e:	464b      	mov	r3, r9
 8008810:	4640      	mov	r0, r8
 8008812:	4649      	mov	r1, r9
 8008814:	f7f8 f9aa 	bl	8000b6c <__aeabi_dcmpun>
 8008818:	b140      	cbz	r0, 800882c <_printf_float+0xf0>
 800881a:	464b      	mov	r3, r9
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfbc      	itt	lt
 8008820:	232d      	movlt	r3, #45	; 0x2d
 8008822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008826:	487f      	ldr	r0, [pc, #508]	; (8008a24 <_printf_float+0x2e8>)
 8008828:	4b7f      	ldr	r3, [pc, #508]	; (8008a28 <_printf_float+0x2ec>)
 800882a:	e7d1      	b.n	80087d0 <_printf_float+0x94>
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008832:	9206      	str	r2, [sp, #24]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	d13f      	bne.n	80088b8 <_printf_float+0x17c>
 8008838:	2306      	movs	r3, #6
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	9b05      	ldr	r3, [sp, #20]
 800883e:	6861      	ldr	r1, [r4, #4]
 8008840:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008844:	2300      	movs	r3, #0
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	ab0a      	add	r3, sp, #40	; 0x28
 800884a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800884e:	ab09      	add	r3, sp, #36	; 0x24
 8008850:	ec49 8b10 	vmov	d0, r8, r9
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800885c:	4628      	mov	r0, r5
 800885e:	f7ff fecd 	bl	80085fc <__cvt>
 8008862:	9b06      	ldr	r3, [sp, #24]
 8008864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008866:	2b47      	cmp	r3, #71	; 0x47
 8008868:	4680      	mov	r8, r0
 800886a:	d108      	bne.n	800887e <_printf_float+0x142>
 800886c:	1cc8      	adds	r0, r1, #3
 800886e:	db02      	blt.n	8008876 <_printf_float+0x13a>
 8008870:	6863      	ldr	r3, [r4, #4]
 8008872:	4299      	cmp	r1, r3
 8008874:	dd41      	ble.n	80088fa <_printf_float+0x1be>
 8008876:	f1ab 0b02 	sub.w	fp, fp, #2
 800887a:	fa5f fb8b 	uxtb.w	fp, fp
 800887e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008882:	d820      	bhi.n	80088c6 <_printf_float+0x18a>
 8008884:	3901      	subs	r1, #1
 8008886:	465a      	mov	r2, fp
 8008888:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800888c:	9109      	str	r1, [sp, #36]	; 0x24
 800888e:	f7ff ff17 	bl	80086c0 <__exponent>
 8008892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008894:	1813      	adds	r3, r2, r0
 8008896:	2a01      	cmp	r2, #1
 8008898:	4681      	mov	r9, r0
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	dc02      	bgt.n	80088a4 <_printf_float+0x168>
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	07d2      	lsls	r2, r2, #31
 80088a2:	d501      	bpl.n	80088a8 <_printf_float+0x16c>
 80088a4:	3301      	adds	r3, #1
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d09c      	beq.n	80087ea <_printf_float+0xae>
 80088b0:	232d      	movs	r3, #45	; 0x2d
 80088b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b6:	e798      	b.n	80087ea <_printf_float+0xae>
 80088b8:	9a06      	ldr	r2, [sp, #24]
 80088ba:	2a47      	cmp	r2, #71	; 0x47
 80088bc:	d1be      	bne.n	800883c <_printf_float+0x100>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1bc      	bne.n	800883c <_printf_float+0x100>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e7b9      	b.n	800883a <_printf_float+0xfe>
 80088c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088ca:	d118      	bne.n	80088fe <_printf_float+0x1c2>
 80088cc:	2900      	cmp	r1, #0
 80088ce:	6863      	ldr	r3, [r4, #4]
 80088d0:	dd0b      	ble.n	80088ea <_printf_float+0x1ae>
 80088d2:	6121      	str	r1, [r4, #16]
 80088d4:	b913      	cbnz	r3, 80088dc <_printf_float+0x1a0>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	07d0      	lsls	r0, r2, #31
 80088da:	d502      	bpl.n	80088e2 <_printf_float+0x1a6>
 80088dc:	3301      	adds	r3, #1
 80088de:	440b      	add	r3, r1
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80088e4:	f04f 0900 	mov.w	r9, #0
 80088e8:	e7de      	b.n	80088a8 <_printf_float+0x16c>
 80088ea:	b913      	cbnz	r3, 80088f2 <_printf_float+0x1b6>
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	07d2      	lsls	r2, r2, #31
 80088f0:	d501      	bpl.n	80088f6 <_printf_float+0x1ba>
 80088f2:	3302      	adds	r3, #2
 80088f4:	e7f4      	b.n	80088e0 <_printf_float+0x1a4>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7f2      	b.n	80088e0 <_printf_float+0x1a4>
 80088fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008900:	4299      	cmp	r1, r3
 8008902:	db05      	blt.n	8008910 <_printf_float+0x1d4>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	6121      	str	r1, [r4, #16]
 8008908:	07d8      	lsls	r0, r3, #31
 800890a:	d5ea      	bpl.n	80088e2 <_printf_float+0x1a6>
 800890c:	1c4b      	adds	r3, r1, #1
 800890e:	e7e7      	b.n	80088e0 <_printf_float+0x1a4>
 8008910:	2900      	cmp	r1, #0
 8008912:	bfd4      	ite	le
 8008914:	f1c1 0202 	rsble	r2, r1, #2
 8008918:	2201      	movgt	r2, #1
 800891a:	4413      	add	r3, r2
 800891c:	e7e0      	b.n	80088e0 <_printf_float+0x1a4>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	055a      	lsls	r2, r3, #21
 8008922:	d407      	bmi.n	8008934 <_printf_float+0x1f8>
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	4642      	mov	r2, r8
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	d12c      	bne.n	800898c <_printf_float+0x250>
 8008932:	e764      	b.n	80087fe <_printf_float+0xc2>
 8008934:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008938:	f240 80e0 	bls.w	8008afc <_printf_float+0x3c0>
 800893c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008940:	2200      	movs	r2, #0
 8008942:	2300      	movs	r3, #0
 8008944:	f7f8 f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 8008948:	2800      	cmp	r0, #0
 800894a:	d034      	beq.n	80089b6 <_printf_float+0x27a>
 800894c:	4a37      	ldr	r2, [pc, #220]	; (8008a2c <_printf_float+0x2f0>)
 800894e:	2301      	movs	r3, #1
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f af51 	beq.w	80087fe <_printf_float+0xc2>
 800895c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008960:	429a      	cmp	r2, r3
 8008962:	db02      	blt.n	800896a <_printf_float+0x22e>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07d8      	lsls	r0, r3, #31
 8008968:	d510      	bpl.n	800898c <_printf_float+0x250>
 800896a:	ee18 3a10 	vmov	r3, s16
 800896e:	4652      	mov	r2, sl
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f af41 	beq.w	80087fe <_printf_float+0xc2>
 800897c:	f04f 0800 	mov.w	r8, #0
 8008980:	f104 091a 	add.w	r9, r4, #26
 8008984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008986:	3b01      	subs	r3, #1
 8008988:	4543      	cmp	r3, r8
 800898a:	dc09      	bgt.n	80089a0 <_printf_float+0x264>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	079b      	lsls	r3, r3, #30
 8008990:	f100 8105 	bmi.w	8008b9e <_printf_float+0x462>
 8008994:	68e0      	ldr	r0, [r4, #12]
 8008996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008998:	4298      	cmp	r0, r3
 800899a:	bfb8      	it	lt
 800899c:	4618      	movlt	r0, r3
 800899e:	e730      	b.n	8008802 <_printf_float+0xc6>
 80089a0:	2301      	movs	r3, #1
 80089a2:	464a      	mov	r2, r9
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af27 	beq.w	80087fe <_printf_float+0xc2>
 80089b0:	f108 0801 	add.w	r8, r8, #1
 80089b4:	e7e6      	b.n	8008984 <_printf_float+0x248>
 80089b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dc39      	bgt.n	8008a30 <_printf_float+0x2f4>
 80089bc:	4a1b      	ldr	r2, [pc, #108]	; (8008a2c <_printf_float+0x2f0>)
 80089be:	2301      	movs	r3, #1
 80089c0:	4631      	mov	r1, r6
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b8      	blx	r7
 80089c6:	3001      	adds	r0, #1
 80089c8:	f43f af19 	beq.w	80087fe <_printf_float+0xc2>
 80089cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089d0:	4313      	orrs	r3, r2
 80089d2:	d102      	bne.n	80089da <_printf_float+0x29e>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	07d9      	lsls	r1, r3, #31
 80089d8:	d5d8      	bpl.n	800898c <_printf_float+0x250>
 80089da:	ee18 3a10 	vmov	r3, s16
 80089de:	4652      	mov	r2, sl
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f af09 	beq.w	80087fe <_printf_float+0xc2>
 80089ec:	f04f 0900 	mov.w	r9, #0
 80089f0:	f104 0a1a 	add.w	sl, r4, #26
 80089f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f6:	425b      	negs	r3, r3
 80089f8:	454b      	cmp	r3, r9
 80089fa:	dc01      	bgt.n	8008a00 <_printf_float+0x2c4>
 80089fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fe:	e792      	b.n	8008926 <_printf_float+0x1ea>
 8008a00:	2301      	movs	r3, #1
 8008a02:	4652      	mov	r2, sl
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f43f aef7 	beq.w	80087fe <_printf_float+0xc2>
 8008a10:	f109 0901 	add.w	r9, r9, #1
 8008a14:	e7ee      	b.n	80089f4 <_printf_float+0x2b8>
 8008a16:	bf00      	nop
 8008a18:	7fefffff 	.word	0x7fefffff
 8008a1c:	0800b4dc 	.word	0x0800b4dc
 8008a20:	0800b4e0 	.word	0x0800b4e0
 8008a24:	0800b4e8 	.word	0x0800b4e8
 8008a28:	0800b4e4 	.word	0x0800b4e4
 8008a2c:	0800b4ec 	.word	0x0800b4ec
 8008a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a34:	429a      	cmp	r2, r3
 8008a36:	bfa8      	it	ge
 8008a38:	461a      	movge	r2, r3
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	4691      	mov	r9, r2
 8008a3e:	dc37      	bgt.n	8008ab0 <_printf_float+0x374>
 8008a40:	f04f 0b00 	mov.w	fp, #0
 8008a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a48:	f104 021a 	add.w	r2, r4, #26
 8008a4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a4e:	9305      	str	r3, [sp, #20]
 8008a50:	eba3 0309 	sub.w	r3, r3, r9
 8008a54:	455b      	cmp	r3, fp
 8008a56:	dc33      	bgt.n	8008ac0 <_printf_float+0x384>
 8008a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	db3b      	blt.n	8008ad8 <_printf_float+0x39c>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	07da      	lsls	r2, r3, #31
 8008a64:	d438      	bmi.n	8008ad8 <_printf_float+0x39c>
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	9a05      	ldr	r2, [sp, #20]
 8008a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a6c:	1a9a      	subs	r2, r3, r2
 8008a6e:	eba3 0901 	sub.w	r9, r3, r1
 8008a72:	4591      	cmp	r9, r2
 8008a74:	bfa8      	it	ge
 8008a76:	4691      	movge	r9, r2
 8008a78:	f1b9 0f00 	cmp.w	r9, #0
 8008a7c:	dc35      	bgt.n	8008aea <_printf_float+0x3ae>
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a86:	f104 0a1a 	add.w	sl, r4, #26
 8008a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	eba3 0309 	sub.w	r3, r3, r9
 8008a94:	4543      	cmp	r3, r8
 8008a96:	f77f af79 	ble.w	800898c <_printf_float+0x250>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b8      	blx	r7
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	f43f aeaa 	beq.w	80087fe <_printf_float+0xc2>
 8008aaa:	f108 0801 	add.w	r8, r8, #1
 8008aae:	e7ec      	b.n	8008a8a <_printf_float+0x34e>
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	d1c0      	bne.n	8008a40 <_printf_float+0x304>
 8008abe:	e69e      	b.n	80087fe <_printf_float+0xc2>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f ae97 	beq.w	80087fe <_printf_float+0xc2>
 8008ad0:	9a05      	ldr	r2, [sp, #20]
 8008ad2:	f10b 0b01 	add.w	fp, fp, #1
 8008ad6:	e7b9      	b.n	8008a4c <_printf_float+0x310>
 8008ad8:	ee18 3a10 	vmov	r3, s16
 8008adc:	4652      	mov	r2, sl
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d1be      	bne.n	8008a66 <_printf_float+0x32a>
 8008ae8:	e689      	b.n	80087fe <_printf_float+0xc2>
 8008aea:	9a05      	ldr	r2, [sp, #20]
 8008aec:	464b      	mov	r3, r9
 8008aee:	4442      	add	r2, r8
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	d1c1      	bne.n	8008a7e <_printf_float+0x342>
 8008afa:	e680      	b.n	80087fe <_printf_float+0xc2>
 8008afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008afe:	2a01      	cmp	r2, #1
 8008b00:	dc01      	bgt.n	8008b06 <_printf_float+0x3ca>
 8008b02:	07db      	lsls	r3, r3, #31
 8008b04:	d538      	bpl.n	8008b78 <_printf_float+0x43c>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4642      	mov	r2, r8
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f ae74 	beq.w	80087fe <_printf_float+0xc2>
 8008b16:	ee18 3a10 	vmov	r3, s16
 8008b1a:	4652      	mov	r2, sl
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4628      	mov	r0, r5
 8008b20:	47b8      	blx	r7
 8008b22:	3001      	adds	r0, #1
 8008b24:	f43f ae6b 	beq.w	80087fe <_printf_float+0xc2>
 8008b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f7f7 ffea 	bl	8000b08 <__aeabi_dcmpeq>
 8008b34:	b9d8      	cbnz	r0, 8008b6e <_printf_float+0x432>
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	f108 0201 	add.w	r2, r8, #1
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	d10e      	bne.n	8008b66 <_printf_float+0x42a>
 8008b48:	e659      	b.n	80087fe <_printf_float+0xc2>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	f43f ae52 	beq.w	80087fe <_printf_float+0xc2>
 8008b5a:	f108 0801 	add.w	r8, r8, #1
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	3b01      	subs	r3, #1
 8008b62:	4543      	cmp	r3, r8
 8008b64:	dcf1      	bgt.n	8008b4a <_printf_float+0x40e>
 8008b66:	464b      	mov	r3, r9
 8008b68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b6c:	e6dc      	b.n	8008928 <_printf_float+0x1ec>
 8008b6e:	f04f 0800 	mov.w	r8, #0
 8008b72:	f104 0a1a 	add.w	sl, r4, #26
 8008b76:	e7f2      	b.n	8008b5e <_printf_float+0x422>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	e7df      	b.n	8008b3e <_printf_float+0x402>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	464a      	mov	r2, r9
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f43f ae38 	beq.w	80087fe <_printf_float+0xc2>
 8008b8e:	f108 0801 	add.w	r8, r8, #1
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b96:	1a5b      	subs	r3, r3, r1
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	dcf0      	bgt.n	8008b7e <_printf_float+0x442>
 8008b9c:	e6fa      	b.n	8008994 <_printf_float+0x258>
 8008b9e:	f04f 0800 	mov.w	r8, #0
 8008ba2:	f104 0919 	add.w	r9, r4, #25
 8008ba6:	e7f4      	b.n	8008b92 <_printf_float+0x456>

08008ba8 <_printf_common>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	4616      	mov	r6, r2
 8008bae:	4699      	mov	r9, r3
 8008bb0:	688a      	ldr	r2, [r1, #8]
 8008bb2:	690b      	ldr	r3, [r1, #16]
 8008bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bfb8      	it	lt
 8008bbc:	4613      	movlt	r3, r2
 8008bbe:	6033      	str	r3, [r6, #0]
 8008bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	b10a      	cbz	r2, 8008bce <_printf_common+0x26>
 8008bca:	3301      	adds	r3, #1
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	0699      	lsls	r1, r3, #26
 8008bd2:	bf42      	ittt	mi
 8008bd4:	6833      	ldrmi	r3, [r6, #0]
 8008bd6:	3302      	addmi	r3, #2
 8008bd8:	6033      	strmi	r3, [r6, #0]
 8008bda:	6825      	ldr	r5, [r4, #0]
 8008bdc:	f015 0506 	ands.w	r5, r5, #6
 8008be0:	d106      	bne.n	8008bf0 <_printf_common+0x48>
 8008be2:	f104 0a19 	add.w	sl, r4, #25
 8008be6:	68e3      	ldr	r3, [r4, #12]
 8008be8:	6832      	ldr	r2, [r6, #0]
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dc26      	bgt.n	8008c3e <_printf_common+0x96>
 8008bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bf4:	1e13      	subs	r3, r2, #0
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	bf18      	it	ne
 8008bfa:	2301      	movne	r3, #1
 8008bfc:	0692      	lsls	r2, r2, #26
 8008bfe:	d42b      	bmi.n	8008c58 <_printf_common+0xb0>
 8008c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c04:	4649      	mov	r1, r9
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c0      	blx	r8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d01e      	beq.n	8008c4c <_printf_common+0xa4>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	68e5      	ldr	r5, [r4, #12]
 8008c12:	6832      	ldr	r2, [r6, #0]
 8008c14:	f003 0306 	and.w	r3, r3, #6
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	bf08      	it	eq
 8008c1c:	1aad      	subeq	r5, r5, r2
 8008c1e:	68a3      	ldr	r3, [r4, #8]
 8008c20:	6922      	ldr	r2, [r4, #16]
 8008c22:	bf0c      	ite	eq
 8008c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c28:	2500      	movne	r5, #0
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	bfc4      	itt	gt
 8008c2e:	1a9b      	subgt	r3, r3, r2
 8008c30:	18ed      	addgt	r5, r5, r3
 8008c32:	2600      	movs	r6, #0
 8008c34:	341a      	adds	r4, #26
 8008c36:	42b5      	cmp	r5, r6
 8008c38:	d11a      	bne.n	8008c70 <_printf_common+0xc8>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e008      	b.n	8008c50 <_printf_common+0xa8>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	4652      	mov	r2, sl
 8008c42:	4649      	mov	r1, r9
 8008c44:	4638      	mov	r0, r7
 8008c46:	47c0      	blx	r8
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d103      	bne.n	8008c54 <_printf_common+0xac>
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c54:	3501      	adds	r5, #1
 8008c56:	e7c6      	b.n	8008be6 <_printf_common+0x3e>
 8008c58:	18e1      	adds	r1, r4, r3
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	2030      	movs	r0, #48	; 0x30
 8008c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c62:	4422      	add	r2, r4
 8008c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	e7c7      	b.n	8008c00 <_printf_common+0x58>
 8008c70:	2301      	movs	r3, #1
 8008c72:	4622      	mov	r2, r4
 8008c74:	4649      	mov	r1, r9
 8008c76:	4638      	mov	r0, r7
 8008c78:	47c0      	blx	r8
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d0e6      	beq.n	8008c4c <_printf_common+0xa4>
 8008c7e:	3601      	adds	r6, #1
 8008c80:	e7d9      	b.n	8008c36 <_printf_common+0x8e>
	...

08008c84 <_printf_i>:
 8008c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	7e0f      	ldrb	r7, [r1, #24]
 8008c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c8c:	2f78      	cmp	r7, #120	; 0x78
 8008c8e:	4691      	mov	r9, r2
 8008c90:	4680      	mov	r8, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	469a      	mov	sl, r3
 8008c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c9a:	d807      	bhi.n	8008cac <_printf_i+0x28>
 8008c9c:	2f62      	cmp	r7, #98	; 0x62
 8008c9e:	d80a      	bhi.n	8008cb6 <_printf_i+0x32>
 8008ca0:	2f00      	cmp	r7, #0
 8008ca2:	f000 80d8 	beq.w	8008e56 <_printf_i+0x1d2>
 8008ca6:	2f58      	cmp	r7, #88	; 0x58
 8008ca8:	f000 80a3 	beq.w	8008df2 <_printf_i+0x16e>
 8008cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cb4:	e03a      	b.n	8008d2c <_printf_i+0xa8>
 8008cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cba:	2b15      	cmp	r3, #21
 8008cbc:	d8f6      	bhi.n	8008cac <_printf_i+0x28>
 8008cbe:	a101      	add	r1, pc, #4	; (adr r1, 8008cc4 <_printf_i+0x40>)
 8008cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cc4:	08008d1d 	.word	0x08008d1d
 8008cc8:	08008d31 	.word	0x08008d31
 8008ccc:	08008cad 	.word	0x08008cad
 8008cd0:	08008cad 	.word	0x08008cad
 8008cd4:	08008cad 	.word	0x08008cad
 8008cd8:	08008cad 	.word	0x08008cad
 8008cdc:	08008d31 	.word	0x08008d31
 8008ce0:	08008cad 	.word	0x08008cad
 8008ce4:	08008cad 	.word	0x08008cad
 8008ce8:	08008cad 	.word	0x08008cad
 8008cec:	08008cad 	.word	0x08008cad
 8008cf0:	08008e3d 	.word	0x08008e3d
 8008cf4:	08008d61 	.word	0x08008d61
 8008cf8:	08008e1f 	.word	0x08008e1f
 8008cfc:	08008cad 	.word	0x08008cad
 8008d00:	08008cad 	.word	0x08008cad
 8008d04:	08008e5f 	.word	0x08008e5f
 8008d08:	08008cad 	.word	0x08008cad
 8008d0c:	08008d61 	.word	0x08008d61
 8008d10:	08008cad 	.word	0x08008cad
 8008d14:	08008cad 	.word	0x08008cad
 8008d18:	08008e27 	.word	0x08008e27
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	602a      	str	r2, [r5, #0]
 8008d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e0a3      	b.n	8008e78 <_printf_i+0x1f4>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	6829      	ldr	r1, [r5, #0]
 8008d34:	0606      	lsls	r6, r0, #24
 8008d36:	f101 0304 	add.w	r3, r1, #4
 8008d3a:	d50a      	bpl.n	8008d52 <_printf_i+0xce>
 8008d3c:	680e      	ldr	r6, [r1, #0]
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	da03      	bge.n	8008d4c <_printf_i+0xc8>
 8008d44:	232d      	movs	r3, #45	; 0x2d
 8008d46:	4276      	negs	r6, r6
 8008d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4c:	485e      	ldr	r0, [pc, #376]	; (8008ec8 <_printf_i+0x244>)
 8008d4e:	230a      	movs	r3, #10
 8008d50:	e019      	b.n	8008d86 <_printf_i+0x102>
 8008d52:	680e      	ldr	r6, [r1, #0]
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d5a:	bf18      	it	ne
 8008d5c:	b236      	sxthne	r6, r6
 8008d5e:	e7ef      	b.n	8008d40 <_printf_i+0xbc>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	6820      	ldr	r0, [r4, #0]
 8008d64:	1d19      	adds	r1, r3, #4
 8008d66:	6029      	str	r1, [r5, #0]
 8008d68:	0601      	lsls	r1, r0, #24
 8008d6a:	d501      	bpl.n	8008d70 <_printf_i+0xec>
 8008d6c:	681e      	ldr	r6, [r3, #0]
 8008d6e:	e002      	b.n	8008d76 <_printf_i+0xf2>
 8008d70:	0646      	lsls	r6, r0, #25
 8008d72:	d5fb      	bpl.n	8008d6c <_printf_i+0xe8>
 8008d74:	881e      	ldrh	r6, [r3, #0]
 8008d76:	4854      	ldr	r0, [pc, #336]	; (8008ec8 <_printf_i+0x244>)
 8008d78:	2f6f      	cmp	r7, #111	; 0x6f
 8008d7a:	bf0c      	ite	eq
 8008d7c:	2308      	moveq	r3, #8
 8008d7e:	230a      	movne	r3, #10
 8008d80:	2100      	movs	r1, #0
 8008d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d86:	6865      	ldr	r5, [r4, #4]
 8008d88:	60a5      	str	r5, [r4, #8]
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	bfa2      	ittt	ge
 8008d8e:	6821      	ldrge	r1, [r4, #0]
 8008d90:	f021 0104 	bicge.w	r1, r1, #4
 8008d94:	6021      	strge	r1, [r4, #0]
 8008d96:	b90e      	cbnz	r6, 8008d9c <_printf_i+0x118>
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	d04d      	beq.n	8008e38 <_printf_i+0x1b4>
 8008d9c:	4615      	mov	r5, r2
 8008d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008da2:	fb03 6711 	mls	r7, r3, r1, r6
 8008da6:	5dc7      	ldrb	r7, [r0, r7]
 8008da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dac:	4637      	mov	r7, r6
 8008dae:	42bb      	cmp	r3, r7
 8008db0:	460e      	mov	r6, r1
 8008db2:	d9f4      	bls.n	8008d9e <_printf_i+0x11a>
 8008db4:	2b08      	cmp	r3, #8
 8008db6:	d10b      	bne.n	8008dd0 <_printf_i+0x14c>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	07de      	lsls	r6, r3, #31
 8008dbc:	d508      	bpl.n	8008dd0 <_printf_i+0x14c>
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	6861      	ldr	r1, [r4, #4]
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	bfde      	ittt	le
 8008dc6:	2330      	movle	r3, #48	; 0x30
 8008dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dcc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008dd0:	1b52      	subs	r2, r2, r5
 8008dd2:	6122      	str	r2, [r4, #16]
 8008dd4:	f8cd a000 	str.w	sl, [sp]
 8008dd8:	464b      	mov	r3, r9
 8008dda:	aa03      	add	r2, sp, #12
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4640      	mov	r0, r8
 8008de0:	f7ff fee2 	bl	8008ba8 <_printf_common>
 8008de4:	3001      	adds	r0, #1
 8008de6:	d14c      	bne.n	8008e82 <_printf_i+0x1fe>
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dec:	b004      	add	sp, #16
 8008dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df2:	4835      	ldr	r0, [pc, #212]	; (8008ec8 <_printf_i+0x244>)
 8008df4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008df8:	6829      	ldr	r1, [r5, #0]
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e00:	6029      	str	r1, [r5, #0]
 8008e02:	061d      	lsls	r5, r3, #24
 8008e04:	d514      	bpl.n	8008e30 <_printf_i+0x1ac>
 8008e06:	07df      	lsls	r7, r3, #31
 8008e08:	bf44      	itt	mi
 8008e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e0e:	6023      	strmi	r3, [r4, #0]
 8008e10:	b91e      	cbnz	r6, 8008e1a <_printf_i+0x196>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f023 0320 	bic.w	r3, r3, #32
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	2310      	movs	r3, #16
 8008e1c:	e7b0      	b.n	8008d80 <_printf_i+0xfc>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	f043 0320 	orr.w	r3, r3, #32
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	2378      	movs	r3, #120	; 0x78
 8008e28:	4828      	ldr	r0, [pc, #160]	; (8008ecc <_printf_i+0x248>)
 8008e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e2e:	e7e3      	b.n	8008df8 <_printf_i+0x174>
 8008e30:	0659      	lsls	r1, r3, #25
 8008e32:	bf48      	it	mi
 8008e34:	b2b6      	uxthmi	r6, r6
 8008e36:	e7e6      	b.n	8008e06 <_printf_i+0x182>
 8008e38:	4615      	mov	r5, r2
 8008e3a:	e7bb      	b.n	8008db4 <_printf_i+0x130>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	6826      	ldr	r6, [r4, #0]
 8008e40:	6961      	ldr	r1, [r4, #20]
 8008e42:	1d18      	adds	r0, r3, #4
 8008e44:	6028      	str	r0, [r5, #0]
 8008e46:	0635      	lsls	r5, r6, #24
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	d501      	bpl.n	8008e50 <_printf_i+0x1cc>
 8008e4c:	6019      	str	r1, [r3, #0]
 8008e4e:	e002      	b.n	8008e56 <_printf_i+0x1d2>
 8008e50:	0670      	lsls	r0, r6, #25
 8008e52:	d5fb      	bpl.n	8008e4c <_printf_i+0x1c8>
 8008e54:	8019      	strh	r1, [r3, #0]
 8008e56:	2300      	movs	r3, #0
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	4615      	mov	r5, r2
 8008e5c:	e7ba      	b.n	8008dd4 <_printf_i+0x150>
 8008e5e:	682b      	ldr	r3, [r5, #0]
 8008e60:	1d1a      	adds	r2, r3, #4
 8008e62:	602a      	str	r2, [r5, #0]
 8008e64:	681d      	ldr	r5, [r3, #0]
 8008e66:	6862      	ldr	r2, [r4, #4]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f7f7 f9d8 	bl	8000220 <memchr>
 8008e70:	b108      	cbz	r0, 8008e76 <_printf_i+0x1f2>
 8008e72:	1b40      	subs	r0, r0, r5
 8008e74:	6060      	str	r0, [r4, #4]
 8008e76:	6863      	ldr	r3, [r4, #4]
 8008e78:	6123      	str	r3, [r4, #16]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e80:	e7a8      	b.n	8008dd4 <_printf_i+0x150>
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	462a      	mov	r2, r5
 8008e86:	4649      	mov	r1, r9
 8008e88:	4640      	mov	r0, r8
 8008e8a:	47d0      	blx	sl
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d0ab      	beq.n	8008de8 <_printf_i+0x164>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	079b      	lsls	r3, r3, #30
 8008e94:	d413      	bmi.n	8008ebe <_printf_i+0x23a>
 8008e96:	68e0      	ldr	r0, [r4, #12]
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	4298      	cmp	r0, r3
 8008e9c:	bfb8      	it	lt
 8008e9e:	4618      	movlt	r0, r3
 8008ea0:	e7a4      	b.n	8008dec <_printf_i+0x168>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	47d0      	blx	sl
 8008eac:	3001      	adds	r0, #1
 8008eae:	d09b      	beq.n	8008de8 <_printf_i+0x164>
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	68e3      	ldr	r3, [r4, #12]
 8008eb4:	9903      	ldr	r1, [sp, #12]
 8008eb6:	1a5b      	subs	r3, r3, r1
 8008eb8:	42ab      	cmp	r3, r5
 8008eba:	dcf2      	bgt.n	8008ea2 <_printf_i+0x21e>
 8008ebc:	e7eb      	b.n	8008e96 <_printf_i+0x212>
 8008ebe:	2500      	movs	r5, #0
 8008ec0:	f104 0619 	add.w	r6, r4, #25
 8008ec4:	e7f5      	b.n	8008eb2 <_printf_i+0x22e>
 8008ec6:	bf00      	nop
 8008ec8:	0800b4ee 	.word	0x0800b4ee
 8008ecc:	0800b4ff 	.word	0x0800b4ff

08008ed0 <siprintf>:
 8008ed0:	b40e      	push	{r1, r2, r3}
 8008ed2:	b500      	push	{lr}
 8008ed4:	b09c      	sub	sp, #112	; 0x70
 8008ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ed8:	9002      	str	r0, [sp, #8]
 8008eda:	9006      	str	r0, [sp, #24]
 8008edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ee0:	4809      	ldr	r0, [pc, #36]	; (8008f08 <siprintf+0x38>)
 8008ee2:	9107      	str	r1, [sp, #28]
 8008ee4:	9104      	str	r1, [sp, #16]
 8008ee6:	4909      	ldr	r1, [pc, #36]	; (8008f0c <siprintf+0x3c>)
 8008ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	6800      	ldr	r0, [r0, #0]
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	a902      	add	r1, sp, #8
 8008ef4:	f001 fb68 	bl	800a5c8 <_svfiprintf_r>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	b01c      	add	sp, #112	; 0x70
 8008f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f04:	b003      	add	sp, #12
 8008f06:	4770      	bx	lr
 8008f08:	20000010 	.word	0x20000010
 8008f0c:	ffff0208 	.word	0xffff0208

08008f10 <quorem>:
 8008f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	6903      	ldr	r3, [r0, #16]
 8008f16:	690c      	ldr	r4, [r1, #16]
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	f2c0 8081 	blt.w	8009022 <quorem+0x112>
 8008f20:	3c01      	subs	r4, #1
 8008f22:	f101 0814 	add.w	r8, r1, #20
 8008f26:	f100 0514 	add.w	r5, r0, #20
 8008f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f44:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f48:	d331      	bcc.n	8008fae <quorem+0x9e>
 8008f4a:	f04f 0e00 	mov.w	lr, #0
 8008f4e:	4640      	mov	r0, r8
 8008f50:	46ac      	mov	ip, r5
 8008f52:	46f2      	mov	sl, lr
 8008f54:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f58:	b293      	uxth	r3, r2
 8008f5a:	fb06 e303 	mla	r3, r6, r3, lr
 8008f5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	ebaa 0303 	sub.w	r3, sl, r3
 8008f68:	f8dc a000 	ldr.w	sl, [ip]
 8008f6c:	0c12      	lsrs	r2, r2, #16
 8008f6e:	fa13 f38a 	uxtah	r3, r3, sl
 8008f72:	fb06 e202 	mla	r2, r6, r2, lr
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	9b00      	ldr	r3, [sp, #0]
 8008f7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f7e:	b292      	uxth	r2, r2
 8008f80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f88:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f8c:	4581      	cmp	r9, r0
 8008f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f92:	f84c 3b04 	str.w	r3, [ip], #4
 8008f96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f9a:	d2db      	bcs.n	8008f54 <quorem+0x44>
 8008f9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fa0:	b92b      	cbnz	r3, 8008fae <quorem+0x9e>
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	3b04      	subs	r3, #4
 8008fa6:	429d      	cmp	r5, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	d32e      	bcc.n	800900a <quorem+0xfa>
 8008fac:	613c      	str	r4, [r7, #16]
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f001 f8b6 	bl	800a120 <__mcmp>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	db24      	blt.n	8009002 <quorem+0xf2>
 8008fb8:	3601      	adds	r6, #1
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f04f 0c00 	mov.w	ip, #0
 8008fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8008fc8:	b293      	uxth	r3, r2
 8008fca:	ebac 0303 	sub.w	r3, ip, r3
 8008fce:	0c12      	lsrs	r2, r2, #16
 8008fd0:	fa13 f38e 	uxtah	r3, r3, lr
 8008fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fe2:	45c1      	cmp	r9, r8
 8008fe4:	f840 3b04 	str.w	r3, [r0], #4
 8008fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fec:	d2e8      	bcs.n	8008fc0 <quorem+0xb0>
 8008fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff6:	b922      	cbnz	r2, 8009002 <quorem+0xf2>
 8008ff8:	3b04      	subs	r3, #4
 8008ffa:	429d      	cmp	r5, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	d30a      	bcc.n	8009016 <quorem+0x106>
 8009000:	613c      	str	r4, [r7, #16]
 8009002:	4630      	mov	r0, r6
 8009004:	b003      	add	sp, #12
 8009006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900a:	6812      	ldr	r2, [r2, #0]
 800900c:	3b04      	subs	r3, #4
 800900e:	2a00      	cmp	r2, #0
 8009010:	d1cc      	bne.n	8008fac <quorem+0x9c>
 8009012:	3c01      	subs	r4, #1
 8009014:	e7c7      	b.n	8008fa6 <quorem+0x96>
 8009016:	6812      	ldr	r2, [r2, #0]
 8009018:	3b04      	subs	r3, #4
 800901a:	2a00      	cmp	r2, #0
 800901c:	d1f0      	bne.n	8009000 <quorem+0xf0>
 800901e:	3c01      	subs	r4, #1
 8009020:	e7eb      	b.n	8008ffa <quorem+0xea>
 8009022:	2000      	movs	r0, #0
 8009024:	e7ee      	b.n	8009004 <quorem+0xf4>
	...

08009028 <_dtoa_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ed2d 8b04 	vpush	{d8-d9}
 8009030:	ec57 6b10 	vmov	r6, r7, d0
 8009034:	b093      	sub	sp, #76	; 0x4c
 8009036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800903c:	9106      	str	r1, [sp, #24]
 800903e:	ee10 aa10 	vmov	sl, s0
 8009042:	4604      	mov	r4, r0
 8009044:	9209      	str	r2, [sp, #36]	; 0x24
 8009046:	930c      	str	r3, [sp, #48]	; 0x30
 8009048:	46bb      	mov	fp, r7
 800904a:	b975      	cbnz	r5, 800906a <_dtoa_r+0x42>
 800904c:	2010      	movs	r0, #16
 800904e:	f000 fddd 	bl	8009c0c <malloc>
 8009052:	4602      	mov	r2, r0
 8009054:	6260      	str	r0, [r4, #36]	; 0x24
 8009056:	b920      	cbnz	r0, 8009062 <_dtoa_r+0x3a>
 8009058:	4ba7      	ldr	r3, [pc, #668]	; (80092f8 <_dtoa_r+0x2d0>)
 800905a:	21ea      	movs	r1, #234	; 0xea
 800905c:	48a7      	ldr	r0, [pc, #668]	; (80092fc <_dtoa_r+0x2d4>)
 800905e:	f001 fbc3 	bl	800a7e8 <__assert_func>
 8009062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009066:	6005      	str	r5, [r0, #0]
 8009068:	60c5      	str	r5, [r0, #12]
 800906a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906c:	6819      	ldr	r1, [r3, #0]
 800906e:	b151      	cbz	r1, 8009086 <_dtoa_r+0x5e>
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	604a      	str	r2, [r1, #4]
 8009074:	2301      	movs	r3, #1
 8009076:	4093      	lsls	r3, r2
 8009078:	608b      	str	r3, [r1, #8]
 800907a:	4620      	mov	r0, r4
 800907c:	f000 fe0e 	bl	8009c9c <_Bfree>
 8009080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	1e3b      	subs	r3, r7, #0
 8009088:	bfaa      	itet	ge
 800908a:	2300      	movge	r3, #0
 800908c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009090:	f8c8 3000 	strge.w	r3, [r8]
 8009094:	4b9a      	ldr	r3, [pc, #616]	; (8009300 <_dtoa_r+0x2d8>)
 8009096:	bfbc      	itt	lt
 8009098:	2201      	movlt	r2, #1
 800909a:	f8c8 2000 	strlt.w	r2, [r8]
 800909e:	ea33 030b 	bics.w	r3, r3, fp
 80090a2:	d11b      	bne.n	80090dc <_dtoa_r+0xb4>
 80090a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090b0:	4333      	orrs	r3, r6
 80090b2:	f000 8592 	beq.w	8009bda <_dtoa_r+0xbb2>
 80090b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b8:	b963      	cbnz	r3, 80090d4 <_dtoa_r+0xac>
 80090ba:	4b92      	ldr	r3, [pc, #584]	; (8009304 <_dtoa_r+0x2dc>)
 80090bc:	e022      	b.n	8009104 <_dtoa_r+0xdc>
 80090be:	4b92      	ldr	r3, [pc, #584]	; (8009308 <_dtoa_r+0x2e0>)
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	3308      	adds	r3, #8
 80090c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	9801      	ldr	r0, [sp, #4]
 80090ca:	b013      	add	sp, #76	; 0x4c
 80090cc:	ecbd 8b04 	vpop	{d8-d9}
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	4b8b      	ldr	r3, [pc, #556]	; (8009304 <_dtoa_r+0x2dc>)
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	3303      	adds	r3, #3
 80090da:	e7f3      	b.n	80090c4 <_dtoa_r+0x9c>
 80090dc:	2200      	movs	r2, #0
 80090de:	2300      	movs	r3, #0
 80090e0:	4650      	mov	r0, sl
 80090e2:	4659      	mov	r1, fp
 80090e4:	f7f7 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 80090e8:	ec4b ab19 	vmov	d9, sl, fp
 80090ec:	4680      	mov	r8, r0
 80090ee:	b158      	cbz	r0, 8009108 <_dtoa_r+0xe0>
 80090f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090f2:	2301      	movs	r3, #1
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 856b 	beq.w	8009bd4 <_dtoa_r+0xbac>
 80090fe:	4883      	ldr	r0, [pc, #524]	; (800930c <_dtoa_r+0x2e4>)
 8009100:	6018      	str	r0, [r3, #0]
 8009102:	1e43      	subs	r3, r0, #1
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	e7df      	b.n	80090c8 <_dtoa_r+0xa0>
 8009108:	ec4b ab10 	vmov	d0, sl, fp
 800910c:	aa10      	add	r2, sp, #64	; 0x40
 800910e:	a911      	add	r1, sp, #68	; 0x44
 8009110:	4620      	mov	r0, r4
 8009112:	f001 f8ab 	bl	800a26c <__d2b>
 8009116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800911a:	ee08 0a10 	vmov	s16, r0
 800911e:	2d00      	cmp	r5, #0
 8009120:	f000 8084 	beq.w	800922c <_dtoa_r+0x204>
 8009124:	ee19 3a90 	vmov	r3, s19
 8009128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800912c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009130:	4656      	mov	r6, sl
 8009132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800913a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800913e:	4b74      	ldr	r3, [pc, #464]	; (8009310 <_dtoa_r+0x2e8>)
 8009140:	2200      	movs	r2, #0
 8009142:	4630      	mov	r0, r6
 8009144:	4639      	mov	r1, r7
 8009146:	f7f7 f8bf 	bl	80002c8 <__aeabi_dsub>
 800914a:	a365      	add	r3, pc, #404	; (adr r3, 80092e0 <_dtoa_r+0x2b8>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 fa72 	bl	8000638 <__aeabi_dmul>
 8009154:	a364      	add	r3, pc, #400	; (adr r3, 80092e8 <_dtoa_r+0x2c0>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f8b7 	bl	80002cc <__adddf3>
 800915e:	4606      	mov	r6, r0
 8009160:	4628      	mov	r0, r5
 8009162:	460f      	mov	r7, r1
 8009164:	f7f7 f9fe 	bl	8000564 <__aeabi_i2d>
 8009168:	a361      	add	r3, pc, #388	; (adr r3, 80092f0 <_dtoa_r+0x2c8>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 fa63 	bl	8000638 <__aeabi_dmul>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 f8a7 	bl	80002cc <__adddf3>
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	f7f7 fd09 	bl	8000b98 <__aeabi_d2iz>
 8009186:	2200      	movs	r2, #0
 8009188:	9000      	str	r0, [sp, #0]
 800918a:	2300      	movs	r3, #0
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	f7f7 fcc4 	bl	8000b1c <__aeabi_dcmplt>
 8009194:	b150      	cbz	r0, 80091ac <_dtoa_r+0x184>
 8009196:	9800      	ldr	r0, [sp, #0]
 8009198:	f7f7 f9e4 	bl	8000564 <__aeabi_i2d>
 800919c:	4632      	mov	r2, r6
 800919e:	463b      	mov	r3, r7
 80091a0:	f7f7 fcb2 	bl	8000b08 <__aeabi_dcmpeq>
 80091a4:	b910      	cbnz	r0, 80091ac <_dtoa_r+0x184>
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	9b00      	ldr	r3, [sp, #0]
 80091ae:	2b16      	cmp	r3, #22
 80091b0:	d85a      	bhi.n	8009268 <_dtoa_r+0x240>
 80091b2:	9a00      	ldr	r2, [sp, #0]
 80091b4:	4b57      	ldr	r3, [pc, #348]	; (8009314 <_dtoa_r+0x2ec>)
 80091b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	ec51 0b19 	vmov	r0, r1, d9
 80091c2:	f7f7 fcab 	bl	8000b1c <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d050      	beq.n	800926c <_dtoa_r+0x244>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2300      	movs	r3, #0
 80091d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d6:	1b5d      	subs	r5, r3, r5
 80091d8:	1e6b      	subs	r3, r5, #1
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	bf45      	ittet	mi
 80091de:	f1c5 0301 	rsbmi	r3, r5, #1
 80091e2:	9304      	strmi	r3, [sp, #16]
 80091e4:	2300      	movpl	r3, #0
 80091e6:	2300      	movmi	r3, #0
 80091e8:	bf4c      	ite	mi
 80091ea:	9305      	strmi	r3, [sp, #20]
 80091ec:	9304      	strpl	r3, [sp, #16]
 80091ee:	9b00      	ldr	r3, [sp, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	db3d      	blt.n	8009270 <_dtoa_r+0x248>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	9a00      	ldr	r2, [sp, #0]
 80091f8:	920a      	str	r2, [sp, #40]	; 0x28
 80091fa:	4413      	add	r3, r2
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	2300      	movs	r3, #0
 8009200:	9307      	str	r3, [sp, #28]
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b09      	cmp	r3, #9
 8009206:	f200 8089 	bhi.w	800931c <_dtoa_r+0x2f4>
 800920a:	2b05      	cmp	r3, #5
 800920c:	bfc4      	itt	gt
 800920e:	3b04      	subgt	r3, #4
 8009210:	9306      	strgt	r3, [sp, #24]
 8009212:	9b06      	ldr	r3, [sp, #24]
 8009214:	f1a3 0302 	sub.w	r3, r3, #2
 8009218:	bfcc      	ite	gt
 800921a:	2500      	movgt	r5, #0
 800921c:	2501      	movle	r5, #1
 800921e:	2b03      	cmp	r3, #3
 8009220:	f200 8087 	bhi.w	8009332 <_dtoa_r+0x30a>
 8009224:	e8df f003 	tbb	[pc, r3]
 8009228:	59383a2d 	.word	0x59383a2d
 800922c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009230:	441d      	add	r5, r3
 8009232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009236:	2b20      	cmp	r3, #32
 8009238:	bfc1      	itttt	gt
 800923a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800923e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009242:	fa0b f303 	lslgt.w	r3, fp, r3
 8009246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800924a:	bfda      	itte	le
 800924c:	f1c3 0320 	rsble	r3, r3, #32
 8009250:	fa06 f003 	lslle.w	r0, r6, r3
 8009254:	4318      	orrgt	r0, r3
 8009256:	f7f7 f975 	bl	8000544 <__aeabi_ui2d>
 800925a:	2301      	movs	r3, #1
 800925c:	4606      	mov	r6, r0
 800925e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009262:	3d01      	subs	r5, #1
 8009264:	930e      	str	r3, [sp, #56]	; 0x38
 8009266:	e76a      	b.n	800913e <_dtoa_r+0x116>
 8009268:	2301      	movs	r3, #1
 800926a:	e7b2      	b.n	80091d2 <_dtoa_r+0x1aa>
 800926c:	900b      	str	r0, [sp, #44]	; 0x2c
 800926e:	e7b1      	b.n	80091d4 <_dtoa_r+0x1ac>
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	9a00      	ldr	r2, [sp, #0]
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	4253      	negs	r3, r2
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	2300      	movs	r3, #0
 800927e:	930a      	str	r3, [sp, #40]	; 0x28
 8009280:	e7bf      	b.n	8009202 <_dtoa_r+0x1da>
 8009282:	2300      	movs	r3, #0
 8009284:	9308      	str	r3, [sp, #32]
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc55      	bgt.n	8009338 <_dtoa_r+0x310>
 800928c:	2301      	movs	r3, #1
 800928e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009292:	461a      	mov	r2, r3
 8009294:	9209      	str	r2, [sp, #36]	; 0x24
 8009296:	e00c      	b.n	80092b2 <_dtoa_r+0x28a>
 8009298:	2301      	movs	r3, #1
 800929a:	e7f3      	b.n	8009284 <_dtoa_r+0x25c>
 800929c:	2300      	movs	r3, #0
 800929e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a0:	9308      	str	r3, [sp, #32]
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	4413      	add	r3, r2
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	3301      	adds	r3, #1
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	bfb8      	it	lt
 80092b0:	2301      	movlt	r3, #1
 80092b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092b4:	2200      	movs	r2, #0
 80092b6:	6042      	str	r2, [r0, #4]
 80092b8:	2204      	movs	r2, #4
 80092ba:	f102 0614 	add.w	r6, r2, #20
 80092be:	429e      	cmp	r6, r3
 80092c0:	6841      	ldr	r1, [r0, #4]
 80092c2:	d93d      	bls.n	8009340 <_dtoa_r+0x318>
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 fca9 	bl	8009c1c <_Balloc>
 80092ca:	9001      	str	r0, [sp, #4]
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d13b      	bne.n	8009348 <_dtoa_r+0x320>
 80092d0:	4b11      	ldr	r3, [pc, #68]	; (8009318 <_dtoa_r+0x2f0>)
 80092d2:	4602      	mov	r2, r0
 80092d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092d8:	e6c0      	b.n	800905c <_dtoa_r+0x34>
 80092da:	2301      	movs	r3, #1
 80092dc:	e7df      	b.n	800929e <_dtoa_r+0x276>
 80092de:	bf00      	nop
 80092e0:	636f4361 	.word	0x636f4361
 80092e4:	3fd287a7 	.word	0x3fd287a7
 80092e8:	8b60c8b3 	.word	0x8b60c8b3
 80092ec:	3fc68a28 	.word	0x3fc68a28
 80092f0:	509f79fb 	.word	0x509f79fb
 80092f4:	3fd34413 	.word	0x3fd34413
 80092f8:	0800b51d 	.word	0x0800b51d
 80092fc:	0800b534 	.word	0x0800b534
 8009300:	7ff00000 	.word	0x7ff00000
 8009304:	0800b519 	.word	0x0800b519
 8009308:	0800b510 	.word	0x0800b510
 800930c:	0800b4ed 	.word	0x0800b4ed
 8009310:	3ff80000 	.word	0x3ff80000
 8009314:	0800b628 	.word	0x0800b628
 8009318:	0800b58f 	.word	0x0800b58f
 800931c:	2501      	movs	r5, #1
 800931e:	2300      	movs	r3, #0
 8009320:	9306      	str	r3, [sp, #24]
 8009322:	9508      	str	r5, [sp, #32]
 8009324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	2312      	movs	r3, #18
 8009330:	e7b0      	b.n	8009294 <_dtoa_r+0x26c>
 8009332:	2301      	movs	r3, #1
 8009334:	9308      	str	r3, [sp, #32]
 8009336:	e7f5      	b.n	8009324 <_dtoa_r+0x2fc>
 8009338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800933e:	e7b8      	b.n	80092b2 <_dtoa_r+0x28a>
 8009340:	3101      	adds	r1, #1
 8009342:	6041      	str	r1, [r0, #4]
 8009344:	0052      	lsls	r2, r2, #1
 8009346:	e7b8      	b.n	80092ba <_dtoa_r+0x292>
 8009348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800934a:	9a01      	ldr	r2, [sp, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	2b0e      	cmp	r3, #14
 8009352:	f200 809d 	bhi.w	8009490 <_dtoa_r+0x468>
 8009356:	2d00      	cmp	r5, #0
 8009358:	f000 809a 	beq.w	8009490 <_dtoa_r+0x468>
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd32      	ble.n	80093c8 <_dtoa_r+0x3a0>
 8009362:	4ab7      	ldr	r2, [pc, #732]	; (8009640 <_dtoa_r+0x618>)
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800936c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	05d8      	lsls	r0, r3, #23
 8009374:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009378:	d516      	bpl.n	80093a8 <_dtoa_r+0x380>
 800937a:	4bb2      	ldr	r3, [pc, #712]	; (8009644 <_dtoa_r+0x61c>)
 800937c:	ec51 0b19 	vmov	r0, r1, d9
 8009380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009384:	f7f7 fa82 	bl	800088c <__aeabi_ddiv>
 8009388:	f007 070f 	and.w	r7, r7, #15
 800938c:	4682      	mov	sl, r0
 800938e:	468b      	mov	fp, r1
 8009390:	2503      	movs	r5, #3
 8009392:	4eac      	ldr	r6, [pc, #688]	; (8009644 <_dtoa_r+0x61c>)
 8009394:	b957      	cbnz	r7, 80093ac <_dtoa_r+0x384>
 8009396:	4642      	mov	r2, r8
 8009398:	464b      	mov	r3, r9
 800939a:	4650      	mov	r0, sl
 800939c:	4659      	mov	r1, fp
 800939e:	f7f7 fa75 	bl	800088c <__aeabi_ddiv>
 80093a2:	4682      	mov	sl, r0
 80093a4:	468b      	mov	fp, r1
 80093a6:	e028      	b.n	80093fa <_dtoa_r+0x3d2>
 80093a8:	2502      	movs	r5, #2
 80093aa:	e7f2      	b.n	8009392 <_dtoa_r+0x36a>
 80093ac:	07f9      	lsls	r1, r7, #31
 80093ae:	d508      	bpl.n	80093c2 <_dtoa_r+0x39a>
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093b8:	f7f7 f93e 	bl	8000638 <__aeabi_dmul>
 80093bc:	3501      	adds	r5, #1
 80093be:	4680      	mov	r8, r0
 80093c0:	4689      	mov	r9, r1
 80093c2:	107f      	asrs	r7, r7, #1
 80093c4:	3608      	adds	r6, #8
 80093c6:	e7e5      	b.n	8009394 <_dtoa_r+0x36c>
 80093c8:	f000 809b 	beq.w	8009502 <_dtoa_r+0x4da>
 80093cc:	9b00      	ldr	r3, [sp, #0]
 80093ce:	4f9d      	ldr	r7, [pc, #628]	; (8009644 <_dtoa_r+0x61c>)
 80093d0:	425e      	negs	r6, r3
 80093d2:	4b9b      	ldr	r3, [pc, #620]	; (8009640 <_dtoa_r+0x618>)
 80093d4:	f006 020f 	and.w	r2, r6, #15
 80093d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	ec51 0b19 	vmov	r0, r1, d9
 80093e4:	f7f7 f928 	bl	8000638 <__aeabi_dmul>
 80093e8:	1136      	asrs	r6, r6, #4
 80093ea:	4682      	mov	sl, r0
 80093ec:	468b      	mov	fp, r1
 80093ee:	2300      	movs	r3, #0
 80093f0:	2502      	movs	r5, #2
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	d17a      	bne.n	80094ec <_dtoa_r+0x4c4>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1d3      	bne.n	80093a2 <_dtoa_r+0x37a>
 80093fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8082 	beq.w	8009506 <_dtoa_r+0x4de>
 8009402:	4b91      	ldr	r3, [pc, #580]	; (8009648 <_dtoa_r+0x620>)
 8009404:	2200      	movs	r2, #0
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	f7f7 fb87 	bl	8000b1c <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d079      	beq.n	8009506 <_dtoa_r+0x4de>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d076      	beq.n	8009506 <_dtoa_r+0x4de>
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd36      	ble.n	800948c <_dtoa_r+0x464>
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	1e5f      	subs	r7, r3, #1
 8009426:	2200      	movs	r2, #0
 8009428:	4b88      	ldr	r3, [pc, #544]	; (800964c <_dtoa_r+0x624>)
 800942a:	f7f7 f905 	bl	8000638 <__aeabi_dmul>
 800942e:	9e02      	ldr	r6, [sp, #8]
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	3501      	adds	r5, #1
 8009436:	4628      	mov	r0, r5
 8009438:	f7f7 f894 	bl	8000564 <__aeabi_i2d>
 800943c:	4652      	mov	r2, sl
 800943e:	465b      	mov	r3, fp
 8009440:	f7f7 f8fa 	bl	8000638 <__aeabi_dmul>
 8009444:	4b82      	ldr	r3, [pc, #520]	; (8009650 <_dtoa_r+0x628>)
 8009446:	2200      	movs	r2, #0
 8009448:	f7f6 ff40 	bl	80002cc <__adddf3>
 800944c:	46d0      	mov	r8, sl
 800944e:	46d9      	mov	r9, fp
 8009450:	4682      	mov	sl, r0
 8009452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009456:	2e00      	cmp	r6, #0
 8009458:	d158      	bne.n	800950c <_dtoa_r+0x4e4>
 800945a:	4b7e      	ldr	r3, [pc, #504]	; (8009654 <_dtoa_r+0x62c>)
 800945c:	2200      	movs	r2, #0
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f6 ff31 	bl	80002c8 <__aeabi_dsub>
 8009466:	4652      	mov	r2, sl
 8009468:	465b      	mov	r3, fp
 800946a:	4680      	mov	r8, r0
 800946c:	4689      	mov	r9, r1
 800946e:	f7f7 fb73 	bl	8000b58 <__aeabi_dcmpgt>
 8009472:	2800      	cmp	r0, #0
 8009474:	f040 8295 	bne.w	80099a2 <_dtoa_r+0x97a>
 8009478:	4652      	mov	r2, sl
 800947a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 fb4b 	bl	8000b1c <__aeabi_dcmplt>
 8009486:	2800      	cmp	r0, #0
 8009488:	f040 8289 	bne.w	800999e <_dtoa_r+0x976>
 800948c:	ec5b ab19 	vmov	sl, fp, d9
 8009490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009492:	2b00      	cmp	r3, #0
 8009494:	f2c0 8148 	blt.w	8009728 <_dtoa_r+0x700>
 8009498:	9a00      	ldr	r2, [sp, #0]
 800949a:	2a0e      	cmp	r2, #14
 800949c:	f300 8144 	bgt.w	8009728 <_dtoa_r+0x700>
 80094a0:	4b67      	ldr	r3, [pc, #412]	; (8009640 <_dtoa_r+0x618>)
 80094a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f280 80d5 	bge.w	800965c <_dtoa_r+0x634>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f300 80d1 	bgt.w	800965c <_dtoa_r+0x634>
 80094ba:	f040 826f 	bne.w	800999c <_dtoa_r+0x974>
 80094be:	4b65      	ldr	r3, [pc, #404]	; (8009654 <_dtoa_r+0x62c>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 f8b7 	bl	8000638 <__aeabi_dmul>
 80094ca:	4652      	mov	r2, sl
 80094cc:	465b      	mov	r3, fp
 80094ce:	f7f7 fb39 	bl	8000b44 <__aeabi_dcmpge>
 80094d2:	9e03      	ldr	r6, [sp, #12]
 80094d4:	4637      	mov	r7, r6
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f040 8245 	bne.w	8009966 <_dtoa_r+0x93e>
 80094dc:	9d01      	ldr	r5, [sp, #4]
 80094de:	2331      	movs	r3, #49	; 0x31
 80094e0:	f805 3b01 	strb.w	r3, [r5], #1
 80094e4:	9b00      	ldr	r3, [sp, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	e240      	b.n	800996e <_dtoa_r+0x946>
 80094ec:	07f2      	lsls	r2, r6, #31
 80094ee:	d505      	bpl.n	80094fc <_dtoa_r+0x4d4>
 80094f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f4:	f7f7 f8a0 	bl	8000638 <__aeabi_dmul>
 80094f8:	3501      	adds	r5, #1
 80094fa:	2301      	movs	r3, #1
 80094fc:	1076      	asrs	r6, r6, #1
 80094fe:	3708      	adds	r7, #8
 8009500:	e777      	b.n	80093f2 <_dtoa_r+0x3ca>
 8009502:	2502      	movs	r5, #2
 8009504:	e779      	b.n	80093fa <_dtoa_r+0x3d2>
 8009506:	9f00      	ldr	r7, [sp, #0]
 8009508:	9e03      	ldr	r6, [sp, #12]
 800950a:	e794      	b.n	8009436 <_dtoa_r+0x40e>
 800950c:	9901      	ldr	r1, [sp, #4]
 800950e:	4b4c      	ldr	r3, [pc, #304]	; (8009640 <_dtoa_r+0x618>)
 8009510:	4431      	add	r1, r6
 8009512:	910d      	str	r1, [sp, #52]	; 0x34
 8009514:	9908      	ldr	r1, [sp, #32]
 8009516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800951a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800951e:	2900      	cmp	r1, #0
 8009520:	d043      	beq.n	80095aa <_dtoa_r+0x582>
 8009522:	494d      	ldr	r1, [pc, #308]	; (8009658 <_dtoa_r+0x630>)
 8009524:	2000      	movs	r0, #0
 8009526:	f7f7 f9b1 	bl	800088c <__aeabi_ddiv>
 800952a:	4652      	mov	r2, sl
 800952c:	465b      	mov	r3, fp
 800952e:	f7f6 fecb 	bl	80002c8 <__aeabi_dsub>
 8009532:	9d01      	ldr	r5, [sp, #4]
 8009534:	4682      	mov	sl, r0
 8009536:	468b      	mov	fp, r1
 8009538:	4649      	mov	r1, r9
 800953a:	4640      	mov	r0, r8
 800953c:	f7f7 fb2c 	bl	8000b98 <__aeabi_d2iz>
 8009540:	4606      	mov	r6, r0
 8009542:	f7f7 f80f 	bl	8000564 <__aeabi_i2d>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f6 febb 	bl	80002c8 <__aeabi_dsub>
 8009552:	3630      	adds	r6, #48	; 0x30
 8009554:	f805 6b01 	strb.w	r6, [r5], #1
 8009558:	4652      	mov	r2, sl
 800955a:	465b      	mov	r3, fp
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	f7f7 fadc 	bl	8000b1c <__aeabi_dcmplt>
 8009564:	2800      	cmp	r0, #0
 8009566:	d163      	bne.n	8009630 <_dtoa_r+0x608>
 8009568:	4642      	mov	r2, r8
 800956a:	464b      	mov	r3, r9
 800956c:	4936      	ldr	r1, [pc, #216]	; (8009648 <_dtoa_r+0x620>)
 800956e:	2000      	movs	r0, #0
 8009570:	f7f6 feaa 	bl	80002c8 <__aeabi_dsub>
 8009574:	4652      	mov	r2, sl
 8009576:	465b      	mov	r3, fp
 8009578:	f7f7 fad0 	bl	8000b1c <__aeabi_dcmplt>
 800957c:	2800      	cmp	r0, #0
 800957e:	f040 80b5 	bne.w	80096ec <_dtoa_r+0x6c4>
 8009582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009584:	429d      	cmp	r5, r3
 8009586:	d081      	beq.n	800948c <_dtoa_r+0x464>
 8009588:	4b30      	ldr	r3, [pc, #192]	; (800964c <_dtoa_r+0x624>)
 800958a:	2200      	movs	r2, #0
 800958c:	4650      	mov	r0, sl
 800958e:	4659      	mov	r1, fp
 8009590:	f7f7 f852 	bl	8000638 <__aeabi_dmul>
 8009594:	4b2d      	ldr	r3, [pc, #180]	; (800964c <_dtoa_r+0x624>)
 8009596:	4682      	mov	sl, r0
 8009598:	468b      	mov	fp, r1
 800959a:	4640      	mov	r0, r8
 800959c:	4649      	mov	r1, r9
 800959e:	2200      	movs	r2, #0
 80095a0:	f7f7 f84a 	bl	8000638 <__aeabi_dmul>
 80095a4:	4680      	mov	r8, r0
 80095a6:	4689      	mov	r9, r1
 80095a8:	e7c6      	b.n	8009538 <_dtoa_r+0x510>
 80095aa:	4650      	mov	r0, sl
 80095ac:	4659      	mov	r1, fp
 80095ae:	f7f7 f843 	bl	8000638 <__aeabi_dmul>
 80095b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b4:	9d01      	ldr	r5, [sp, #4]
 80095b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b8:	4682      	mov	sl, r0
 80095ba:	468b      	mov	fp, r1
 80095bc:	4649      	mov	r1, r9
 80095be:	4640      	mov	r0, r8
 80095c0:	f7f7 faea 	bl	8000b98 <__aeabi_d2iz>
 80095c4:	4606      	mov	r6, r0
 80095c6:	f7f6 ffcd 	bl	8000564 <__aeabi_i2d>
 80095ca:	3630      	adds	r6, #48	; 0x30
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4640      	mov	r0, r8
 80095d2:	4649      	mov	r1, r9
 80095d4:	f7f6 fe78 	bl	80002c8 <__aeabi_dsub>
 80095d8:	f805 6b01 	strb.w	r6, [r5], #1
 80095dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095de:	429d      	cmp	r5, r3
 80095e0:	4680      	mov	r8, r0
 80095e2:	4689      	mov	r9, r1
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	d124      	bne.n	8009634 <_dtoa_r+0x60c>
 80095ea:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <_dtoa_r+0x630>)
 80095ec:	4650      	mov	r0, sl
 80095ee:	4659      	mov	r1, fp
 80095f0:	f7f6 fe6c 	bl	80002cc <__adddf3>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4640      	mov	r0, r8
 80095fa:	4649      	mov	r1, r9
 80095fc:	f7f7 faac 	bl	8000b58 <__aeabi_dcmpgt>
 8009600:	2800      	cmp	r0, #0
 8009602:	d173      	bne.n	80096ec <_dtoa_r+0x6c4>
 8009604:	4652      	mov	r2, sl
 8009606:	465b      	mov	r3, fp
 8009608:	4913      	ldr	r1, [pc, #76]	; (8009658 <_dtoa_r+0x630>)
 800960a:	2000      	movs	r0, #0
 800960c:	f7f6 fe5c 	bl	80002c8 <__aeabi_dsub>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f7 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f af35 	beq.w	800948c <_dtoa_r+0x464>
 8009622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009624:	1e6b      	subs	r3, r5, #1
 8009626:	930f      	str	r3, [sp, #60]	; 0x3c
 8009628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800962c:	2b30      	cmp	r3, #48	; 0x30
 800962e:	d0f8      	beq.n	8009622 <_dtoa_r+0x5fa>
 8009630:	9700      	str	r7, [sp, #0]
 8009632:	e049      	b.n	80096c8 <_dtoa_r+0x6a0>
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <_dtoa_r+0x624>)
 8009636:	f7f6 ffff 	bl	8000638 <__aeabi_dmul>
 800963a:	4680      	mov	r8, r0
 800963c:	4689      	mov	r9, r1
 800963e:	e7bd      	b.n	80095bc <_dtoa_r+0x594>
 8009640:	0800b628 	.word	0x0800b628
 8009644:	0800b600 	.word	0x0800b600
 8009648:	3ff00000 	.word	0x3ff00000
 800964c:	40240000 	.word	0x40240000
 8009650:	401c0000 	.word	0x401c0000
 8009654:	40140000 	.word	0x40140000
 8009658:	3fe00000 	.word	0x3fe00000
 800965c:	9d01      	ldr	r5, [sp, #4]
 800965e:	4656      	mov	r6, sl
 8009660:	465f      	mov	r7, fp
 8009662:	4642      	mov	r2, r8
 8009664:	464b      	mov	r3, r9
 8009666:	4630      	mov	r0, r6
 8009668:	4639      	mov	r1, r7
 800966a:	f7f7 f90f 	bl	800088c <__aeabi_ddiv>
 800966e:	f7f7 fa93 	bl	8000b98 <__aeabi_d2iz>
 8009672:	4682      	mov	sl, r0
 8009674:	f7f6 ff76 	bl	8000564 <__aeabi_i2d>
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	f7f6 ffdc 	bl	8000638 <__aeabi_dmul>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800968c:	f7f6 fe1c 	bl	80002c8 <__aeabi_dsub>
 8009690:	f805 6b01 	strb.w	r6, [r5], #1
 8009694:	9e01      	ldr	r6, [sp, #4]
 8009696:	9f03      	ldr	r7, [sp, #12]
 8009698:	1bae      	subs	r6, r5, r6
 800969a:	42b7      	cmp	r7, r6
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	d135      	bne.n	800970e <_dtoa_r+0x6e6>
 80096a2:	f7f6 fe13 	bl	80002cc <__adddf3>
 80096a6:	4642      	mov	r2, r8
 80096a8:	464b      	mov	r3, r9
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	f7f7 fa53 	bl	8000b58 <__aeabi_dcmpgt>
 80096b2:	b9d0      	cbnz	r0, 80096ea <_dtoa_r+0x6c2>
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fa24 	bl	8000b08 <__aeabi_dcmpeq>
 80096c0:	b110      	cbz	r0, 80096c8 <_dtoa_r+0x6a0>
 80096c2:	f01a 0f01 	tst.w	sl, #1
 80096c6:	d110      	bne.n	80096ea <_dtoa_r+0x6c2>
 80096c8:	4620      	mov	r0, r4
 80096ca:	ee18 1a10 	vmov	r1, s16
 80096ce:	f000 fae5 	bl	8009c9c <_Bfree>
 80096d2:	2300      	movs	r3, #0
 80096d4:	9800      	ldr	r0, [sp, #0]
 80096d6:	702b      	strb	r3, [r5, #0]
 80096d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096da:	3001      	adds	r0, #1
 80096dc:	6018      	str	r0, [r3, #0]
 80096de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f43f acf1 	beq.w	80090c8 <_dtoa_r+0xa0>
 80096e6:	601d      	str	r5, [r3, #0]
 80096e8:	e4ee      	b.n	80090c8 <_dtoa_r+0xa0>
 80096ea:	9f00      	ldr	r7, [sp, #0]
 80096ec:	462b      	mov	r3, r5
 80096ee:	461d      	mov	r5, r3
 80096f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f4:	2a39      	cmp	r2, #57	; 0x39
 80096f6:	d106      	bne.n	8009706 <_dtoa_r+0x6de>
 80096f8:	9a01      	ldr	r2, [sp, #4]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d1f7      	bne.n	80096ee <_dtoa_r+0x6c6>
 80096fe:	9901      	ldr	r1, [sp, #4]
 8009700:	2230      	movs	r2, #48	; 0x30
 8009702:	3701      	adds	r7, #1
 8009704:	700a      	strb	r2, [r1, #0]
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	3201      	adds	r2, #1
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e790      	b.n	8009630 <_dtoa_r+0x608>
 800970e:	4ba6      	ldr	r3, [pc, #664]	; (80099a8 <_dtoa_r+0x980>)
 8009710:	2200      	movs	r2, #0
 8009712:	f7f6 ff91 	bl	8000638 <__aeabi_dmul>
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	4606      	mov	r6, r0
 800971c:	460f      	mov	r7, r1
 800971e:	f7f7 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 8009722:	2800      	cmp	r0, #0
 8009724:	d09d      	beq.n	8009662 <_dtoa_r+0x63a>
 8009726:	e7cf      	b.n	80096c8 <_dtoa_r+0x6a0>
 8009728:	9a08      	ldr	r2, [sp, #32]
 800972a:	2a00      	cmp	r2, #0
 800972c:	f000 80d7 	beq.w	80098de <_dtoa_r+0x8b6>
 8009730:	9a06      	ldr	r2, [sp, #24]
 8009732:	2a01      	cmp	r2, #1
 8009734:	f300 80ba 	bgt.w	80098ac <_dtoa_r+0x884>
 8009738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800973a:	2a00      	cmp	r2, #0
 800973c:	f000 80b2 	beq.w	80098a4 <_dtoa_r+0x87c>
 8009740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009744:	9e07      	ldr	r6, [sp, #28]
 8009746:	9d04      	ldr	r5, [sp, #16]
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	441a      	add	r2, r3
 800974c:	9204      	str	r2, [sp, #16]
 800974e:	9a05      	ldr	r2, [sp, #20]
 8009750:	2101      	movs	r1, #1
 8009752:	441a      	add	r2, r3
 8009754:	4620      	mov	r0, r4
 8009756:	9205      	str	r2, [sp, #20]
 8009758:	f000 fb58 	bl	8009e0c <__i2b>
 800975c:	4607      	mov	r7, r0
 800975e:	2d00      	cmp	r5, #0
 8009760:	dd0c      	ble.n	800977c <_dtoa_r+0x754>
 8009762:	9b05      	ldr	r3, [sp, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd09      	ble.n	800977c <_dtoa_r+0x754>
 8009768:	42ab      	cmp	r3, r5
 800976a:	9a04      	ldr	r2, [sp, #16]
 800976c:	bfa8      	it	ge
 800976e:	462b      	movge	r3, r5
 8009770:	1ad2      	subs	r2, r2, r3
 8009772:	9204      	str	r2, [sp, #16]
 8009774:	9a05      	ldr	r2, [sp, #20]
 8009776:	1aed      	subs	r5, r5, r3
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	9305      	str	r3, [sp, #20]
 800977c:	9b07      	ldr	r3, [sp, #28]
 800977e:	b31b      	cbz	r3, 80097c8 <_dtoa_r+0x7a0>
 8009780:	9b08      	ldr	r3, [sp, #32]
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 80af 	beq.w	80098e6 <_dtoa_r+0x8be>
 8009788:	2e00      	cmp	r6, #0
 800978a:	dd13      	ble.n	80097b4 <_dtoa_r+0x78c>
 800978c:	4639      	mov	r1, r7
 800978e:	4632      	mov	r2, r6
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fbfb 	bl	8009f8c <__pow5mult>
 8009796:	ee18 2a10 	vmov	r2, s16
 800979a:	4601      	mov	r1, r0
 800979c:	4607      	mov	r7, r0
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fb4a 	bl	8009e38 <__multiply>
 80097a4:	ee18 1a10 	vmov	r1, s16
 80097a8:	4680      	mov	r8, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fa76 	bl	8009c9c <_Bfree>
 80097b0:	ee08 8a10 	vmov	s16, r8
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	1b9a      	subs	r2, r3, r6
 80097b8:	d006      	beq.n	80097c8 <_dtoa_r+0x7a0>
 80097ba:	ee18 1a10 	vmov	r1, s16
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 fbe4 	bl	8009f8c <__pow5mult>
 80097c4:	ee08 0a10 	vmov	s16, r0
 80097c8:	2101      	movs	r1, #1
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fb1e 	bl	8009e0c <__i2b>
 80097d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	4606      	mov	r6, r0
 80097d6:	f340 8088 	ble.w	80098ea <_dtoa_r+0x8c2>
 80097da:	461a      	mov	r2, r3
 80097dc:	4601      	mov	r1, r0
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 fbd4 	bl	8009f8c <__pow5mult>
 80097e4:	9b06      	ldr	r3, [sp, #24]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	4606      	mov	r6, r0
 80097ea:	f340 8081 	ble.w	80098f0 <_dtoa_r+0x8c8>
 80097ee:	f04f 0800 	mov.w	r8, #0
 80097f2:	6933      	ldr	r3, [r6, #16]
 80097f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097f8:	6918      	ldr	r0, [r3, #16]
 80097fa:	f000 fab7 	bl	8009d6c <__hi0bits>
 80097fe:	f1c0 0020 	rsb	r0, r0, #32
 8009802:	9b05      	ldr	r3, [sp, #20]
 8009804:	4418      	add	r0, r3
 8009806:	f010 001f 	ands.w	r0, r0, #31
 800980a:	f000 8092 	beq.w	8009932 <_dtoa_r+0x90a>
 800980e:	f1c0 0320 	rsb	r3, r0, #32
 8009812:	2b04      	cmp	r3, #4
 8009814:	f340 808a 	ble.w	800992c <_dtoa_r+0x904>
 8009818:	f1c0 001c 	rsb	r0, r0, #28
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	4403      	add	r3, r0
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	4403      	add	r3, r0
 8009826:	4405      	add	r5, r0
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	9b04      	ldr	r3, [sp, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd07      	ble.n	8009840 <_dtoa_r+0x818>
 8009830:	ee18 1a10 	vmov	r1, s16
 8009834:	461a      	mov	r2, r3
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fc02 	bl	800a040 <__lshift>
 800983c:	ee08 0a10 	vmov	s16, r0
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	dd05      	ble.n	8009852 <_dtoa_r+0x82a>
 8009846:	4631      	mov	r1, r6
 8009848:	461a      	mov	r2, r3
 800984a:	4620      	mov	r0, r4
 800984c:	f000 fbf8 	bl	800a040 <__lshift>
 8009850:	4606      	mov	r6, r0
 8009852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d06e      	beq.n	8009936 <_dtoa_r+0x90e>
 8009858:	ee18 0a10 	vmov	r0, s16
 800985c:	4631      	mov	r1, r6
 800985e:	f000 fc5f 	bl	800a120 <__mcmp>
 8009862:	2800      	cmp	r0, #0
 8009864:	da67      	bge.n	8009936 <_dtoa_r+0x90e>
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	3b01      	subs	r3, #1
 800986a:	ee18 1a10 	vmov	r1, s16
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	220a      	movs	r2, #10
 8009872:	2300      	movs	r3, #0
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fa33 	bl	8009ce0 <__multadd>
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	ee08 0a10 	vmov	s16, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 81b1 	beq.w	8009be8 <_dtoa_r+0xbc0>
 8009886:	2300      	movs	r3, #0
 8009888:	4639      	mov	r1, r7
 800988a:	220a      	movs	r2, #10
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fa27 	bl	8009ce0 <__multadd>
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	4607      	mov	r7, r0
 8009898:	f300 808e 	bgt.w	80099b8 <_dtoa_r+0x990>
 800989c:	9b06      	ldr	r3, [sp, #24]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	dc51      	bgt.n	8009946 <_dtoa_r+0x91e>
 80098a2:	e089      	b.n	80099b8 <_dtoa_r+0x990>
 80098a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098aa:	e74b      	b.n	8009744 <_dtoa_r+0x71c>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	1e5e      	subs	r6, r3, #1
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	42b3      	cmp	r3, r6
 80098b4:	bfbf      	itttt	lt
 80098b6:	9b07      	ldrlt	r3, [sp, #28]
 80098b8:	9607      	strlt	r6, [sp, #28]
 80098ba:	1af2      	sublt	r2, r6, r3
 80098bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098be:	bfb6      	itet	lt
 80098c0:	189b      	addlt	r3, r3, r2
 80098c2:	1b9e      	subge	r6, r3, r6
 80098c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	bfb8      	it	lt
 80098ca:	2600      	movlt	r6, #0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bfb7      	itett	lt
 80098d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80098d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80098d8:	1a9d      	sublt	r5, r3, r2
 80098da:	2300      	movlt	r3, #0
 80098dc:	e734      	b.n	8009748 <_dtoa_r+0x720>
 80098de:	9e07      	ldr	r6, [sp, #28]
 80098e0:	9d04      	ldr	r5, [sp, #16]
 80098e2:	9f08      	ldr	r7, [sp, #32]
 80098e4:	e73b      	b.n	800975e <_dtoa_r+0x736>
 80098e6:	9a07      	ldr	r2, [sp, #28]
 80098e8:	e767      	b.n	80097ba <_dtoa_r+0x792>
 80098ea:	9b06      	ldr	r3, [sp, #24]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	dc18      	bgt.n	8009922 <_dtoa_r+0x8fa>
 80098f0:	f1ba 0f00 	cmp.w	sl, #0
 80098f4:	d115      	bne.n	8009922 <_dtoa_r+0x8fa>
 80098f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098fa:	b993      	cbnz	r3, 8009922 <_dtoa_r+0x8fa>
 80098fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009900:	0d1b      	lsrs	r3, r3, #20
 8009902:	051b      	lsls	r3, r3, #20
 8009904:	b183      	cbz	r3, 8009928 <_dtoa_r+0x900>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	3301      	adds	r3, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	3301      	adds	r3, #1
 8009910:	9305      	str	r3, [sp, #20]
 8009912:	f04f 0801 	mov.w	r8, #1
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	f47f af6a 	bne.w	80097f2 <_dtoa_r+0x7ca>
 800991e:	2001      	movs	r0, #1
 8009920:	e76f      	b.n	8009802 <_dtoa_r+0x7da>
 8009922:	f04f 0800 	mov.w	r8, #0
 8009926:	e7f6      	b.n	8009916 <_dtoa_r+0x8ee>
 8009928:	4698      	mov	r8, r3
 800992a:	e7f4      	b.n	8009916 <_dtoa_r+0x8ee>
 800992c:	f43f af7d 	beq.w	800982a <_dtoa_r+0x802>
 8009930:	4618      	mov	r0, r3
 8009932:	301c      	adds	r0, #28
 8009934:	e772      	b.n	800981c <_dtoa_r+0x7f4>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dc37      	bgt.n	80099ac <_dtoa_r+0x984>
 800993c:	9b06      	ldr	r3, [sp, #24]
 800993e:	2b02      	cmp	r3, #2
 8009940:	dd34      	ble.n	80099ac <_dtoa_r+0x984>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	9302      	str	r3, [sp, #8]
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	b96b      	cbnz	r3, 8009966 <_dtoa_r+0x93e>
 800994a:	4631      	mov	r1, r6
 800994c:	2205      	movs	r2, #5
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f9c6 	bl	8009ce0 <__multadd>
 8009954:	4601      	mov	r1, r0
 8009956:	4606      	mov	r6, r0
 8009958:	ee18 0a10 	vmov	r0, s16
 800995c:	f000 fbe0 	bl	800a120 <__mcmp>
 8009960:	2800      	cmp	r0, #0
 8009962:	f73f adbb 	bgt.w	80094dc <_dtoa_r+0x4b4>
 8009966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009968:	9d01      	ldr	r5, [sp, #4]
 800996a:	43db      	mvns	r3, r3
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	4631      	mov	r1, r6
 8009974:	4620      	mov	r0, r4
 8009976:	f000 f991 	bl	8009c9c <_Bfree>
 800997a:	2f00      	cmp	r7, #0
 800997c:	f43f aea4 	beq.w	80096c8 <_dtoa_r+0x6a0>
 8009980:	f1b8 0f00 	cmp.w	r8, #0
 8009984:	d005      	beq.n	8009992 <_dtoa_r+0x96a>
 8009986:	45b8      	cmp	r8, r7
 8009988:	d003      	beq.n	8009992 <_dtoa_r+0x96a>
 800998a:	4641      	mov	r1, r8
 800998c:	4620      	mov	r0, r4
 800998e:	f000 f985 	bl	8009c9c <_Bfree>
 8009992:	4639      	mov	r1, r7
 8009994:	4620      	mov	r0, r4
 8009996:	f000 f981 	bl	8009c9c <_Bfree>
 800999a:	e695      	b.n	80096c8 <_dtoa_r+0x6a0>
 800999c:	2600      	movs	r6, #0
 800999e:	4637      	mov	r7, r6
 80099a0:	e7e1      	b.n	8009966 <_dtoa_r+0x93e>
 80099a2:	9700      	str	r7, [sp, #0]
 80099a4:	4637      	mov	r7, r6
 80099a6:	e599      	b.n	80094dc <_dtoa_r+0x4b4>
 80099a8:	40240000 	.word	0x40240000
 80099ac:	9b08      	ldr	r3, [sp, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 80ca 	beq.w	8009b48 <_dtoa_r+0xb20>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	9302      	str	r3, [sp, #8]
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	dd05      	ble.n	80099c8 <_dtoa_r+0x9a0>
 80099bc:	4639      	mov	r1, r7
 80099be:	462a      	mov	r2, r5
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fb3d 	bl	800a040 <__lshift>
 80099c6:	4607      	mov	r7, r0
 80099c8:	f1b8 0f00 	cmp.w	r8, #0
 80099cc:	d05b      	beq.n	8009a86 <_dtoa_r+0xa5e>
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 f923 	bl	8009c1c <_Balloc>
 80099d6:	4605      	mov	r5, r0
 80099d8:	b928      	cbnz	r0, 80099e6 <_dtoa_r+0x9be>
 80099da:	4b87      	ldr	r3, [pc, #540]	; (8009bf8 <_dtoa_r+0xbd0>)
 80099dc:	4602      	mov	r2, r0
 80099de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099e2:	f7ff bb3b 	b.w	800905c <_dtoa_r+0x34>
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	3202      	adds	r2, #2
 80099ea:	0092      	lsls	r2, r2, #2
 80099ec:	f107 010c 	add.w	r1, r7, #12
 80099f0:	300c      	adds	r0, #12
 80099f2:	f7fe fded 	bl	80085d0 <memcpy>
 80099f6:	2201      	movs	r2, #1
 80099f8:	4629      	mov	r1, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fb20 	bl	800a040 <__lshift>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	f103 0901 	add.w	r9, r3, #1
 8009a06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	9305      	str	r3, [sp, #20]
 8009a0e:	f00a 0301 	and.w	r3, sl, #1
 8009a12:	46b8      	mov	r8, r7
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	4607      	mov	r7, r0
 8009a18:	4631      	mov	r1, r6
 8009a1a:	ee18 0a10 	vmov	r0, s16
 8009a1e:	f7ff fa77 	bl	8008f10 <quorem>
 8009a22:	4641      	mov	r1, r8
 8009a24:	9002      	str	r0, [sp, #8]
 8009a26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a2a:	ee18 0a10 	vmov	r0, s16
 8009a2e:	f000 fb77 	bl	800a120 <__mcmp>
 8009a32:	463a      	mov	r2, r7
 8009a34:	9003      	str	r0, [sp, #12]
 8009a36:	4631      	mov	r1, r6
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fb8d 	bl	800a158 <__mdiff>
 8009a3e:	68c2      	ldr	r2, [r0, #12]
 8009a40:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009a44:	4605      	mov	r5, r0
 8009a46:	bb02      	cbnz	r2, 8009a8a <_dtoa_r+0xa62>
 8009a48:	4601      	mov	r1, r0
 8009a4a:	ee18 0a10 	vmov	r0, s16
 8009a4e:	f000 fb67 	bl	800a120 <__mcmp>
 8009a52:	4602      	mov	r2, r0
 8009a54:	4629      	mov	r1, r5
 8009a56:	4620      	mov	r0, r4
 8009a58:	9207      	str	r2, [sp, #28]
 8009a5a:	f000 f91f 	bl	8009c9c <_Bfree>
 8009a5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a62:	ea43 0102 	orr.w	r1, r3, r2
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	464d      	mov	r5, r9
 8009a6c:	d10f      	bne.n	8009a8e <_dtoa_r+0xa66>
 8009a6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a72:	d02a      	beq.n	8009aca <_dtoa_r+0xaa2>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dd02      	ble.n	8009a80 <_dtoa_r+0xa58>
 8009a7a:	9b02      	ldr	r3, [sp, #8]
 8009a7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a80:	f88b a000 	strb.w	sl, [fp]
 8009a84:	e775      	b.n	8009972 <_dtoa_r+0x94a>
 8009a86:	4638      	mov	r0, r7
 8009a88:	e7ba      	b.n	8009a00 <_dtoa_r+0x9d8>
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	e7e2      	b.n	8009a54 <_dtoa_r+0xa2c>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	db04      	blt.n	8009a9e <_dtoa_r+0xa76>
 8009a94:	9906      	ldr	r1, [sp, #24]
 8009a96:	430b      	orrs	r3, r1
 8009a98:	9904      	ldr	r1, [sp, #16]
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	d122      	bne.n	8009ae4 <_dtoa_r+0xabc>
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	ddee      	ble.n	8009a80 <_dtoa_r+0xa58>
 8009aa2:	ee18 1a10 	vmov	r1, s16
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fac9 	bl	800a040 <__lshift>
 8009aae:	4631      	mov	r1, r6
 8009ab0:	ee08 0a10 	vmov	s16, r0
 8009ab4:	f000 fb34 	bl	800a120 <__mcmp>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	dc03      	bgt.n	8009ac4 <_dtoa_r+0xa9c>
 8009abc:	d1e0      	bne.n	8009a80 <_dtoa_r+0xa58>
 8009abe:	f01a 0f01 	tst.w	sl, #1
 8009ac2:	d0dd      	beq.n	8009a80 <_dtoa_r+0xa58>
 8009ac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ac8:	d1d7      	bne.n	8009a7a <_dtoa_r+0xa52>
 8009aca:	2339      	movs	r3, #57	; 0x39
 8009acc:	f88b 3000 	strb.w	r3, [fp]
 8009ad0:	462b      	mov	r3, r5
 8009ad2:	461d      	mov	r5, r3
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ada:	2a39      	cmp	r2, #57	; 0x39
 8009adc:	d071      	beq.n	8009bc2 <_dtoa_r+0xb9a>
 8009ade:	3201      	adds	r2, #1
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	e746      	b.n	8009972 <_dtoa_r+0x94a>
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	dd07      	ble.n	8009af8 <_dtoa_r+0xad0>
 8009ae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009aec:	d0ed      	beq.n	8009aca <_dtoa_r+0xaa2>
 8009aee:	f10a 0301 	add.w	r3, sl, #1
 8009af2:	f88b 3000 	strb.w	r3, [fp]
 8009af6:	e73c      	b.n	8009972 <_dtoa_r+0x94a>
 8009af8:	9b05      	ldr	r3, [sp, #20]
 8009afa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009afe:	4599      	cmp	r9, r3
 8009b00:	d047      	beq.n	8009b92 <_dtoa_r+0xb6a>
 8009b02:	ee18 1a10 	vmov	r1, s16
 8009b06:	2300      	movs	r3, #0
 8009b08:	220a      	movs	r2, #10
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 f8e8 	bl	8009ce0 <__multadd>
 8009b10:	45b8      	cmp	r8, r7
 8009b12:	ee08 0a10 	vmov	s16, r0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	f04f 020a 	mov.w	r2, #10
 8009b1e:	4641      	mov	r1, r8
 8009b20:	4620      	mov	r0, r4
 8009b22:	d106      	bne.n	8009b32 <_dtoa_r+0xb0a>
 8009b24:	f000 f8dc 	bl	8009ce0 <__multadd>
 8009b28:	4680      	mov	r8, r0
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	f109 0901 	add.w	r9, r9, #1
 8009b30:	e772      	b.n	8009a18 <_dtoa_r+0x9f0>
 8009b32:	f000 f8d5 	bl	8009ce0 <__multadd>
 8009b36:	4639      	mov	r1, r7
 8009b38:	4680      	mov	r8, r0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	220a      	movs	r2, #10
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 f8ce 	bl	8009ce0 <__multadd>
 8009b44:	4607      	mov	r7, r0
 8009b46:	e7f1      	b.n	8009b2c <_dtoa_r+0xb04>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	9302      	str	r3, [sp, #8]
 8009b4c:	9d01      	ldr	r5, [sp, #4]
 8009b4e:	ee18 0a10 	vmov	r0, s16
 8009b52:	4631      	mov	r1, r6
 8009b54:	f7ff f9dc 	bl	8008f10 <quorem>
 8009b58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	f805 ab01 	strb.w	sl, [r5], #1
 8009b62:	1aea      	subs	r2, r5, r3
 8009b64:	9b02      	ldr	r3, [sp, #8]
 8009b66:	4293      	cmp	r3, r2
 8009b68:	dd09      	ble.n	8009b7e <_dtoa_r+0xb56>
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f8b4 	bl	8009ce0 <__multadd>
 8009b78:	ee08 0a10 	vmov	s16, r0
 8009b7c:	e7e7      	b.n	8009b4e <_dtoa_r+0xb26>
 8009b7e:	9b02      	ldr	r3, [sp, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bfc8      	it	gt
 8009b84:	461d      	movgt	r5, r3
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	bfd8      	it	le
 8009b8a:	2501      	movle	r5, #1
 8009b8c:	441d      	add	r5, r3
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	ee18 1a10 	vmov	r1, s16
 8009b96:	2201      	movs	r2, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fa51 	bl	800a040 <__lshift>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	ee08 0a10 	vmov	s16, r0
 8009ba4:	f000 fabc 	bl	800a120 <__mcmp>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dc91      	bgt.n	8009ad0 <_dtoa_r+0xaa8>
 8009bac:	d102      	bne.n	8009bb4 <_dtoa_r+0xb8c>
 8009bae:	f01a 0f01 	tst.w	sl, #1
 8009bb2:	d18d      	bne.n	8009ad0 <_dtoa_r+0xaa8>
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	461d      	mov	r5, r3
 8009bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bbc:	2a30      	cmp	r2, #48	; 0x30
 8009bbe:	d0fa      	beq.n	8009bb6 <_dtoa_r+0xb8e>
 8009bc0:	e6d7      	b.n	8009972 <_dtoa_r+0x94a>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d184      	bne.n	8009ad2 <_dtoa_r+0xaaa>
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	2331      	movs	r3, #49	; 0x31
 8009bd0:	7013      	strb	r3, [r2, #0]
 8009bd2:	e6ce      	b.n	8009972 <_dtoa_r+0x94a>
 8009bd4:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <_dtoa_r+0xbd4>)
 8009bd6:	f7ff ba95 	b.w	8009104 <_dtoa_r+0xdc>
 8009bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f47f aa6e 	bne.w	80090be <_dtoa_r+0x96>
 8009be2:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <_dtoa_r+0xbd8>)
 8009be4:	f7ff ba8e 	b.w	8009104 <_dtoa_r+0xdc>
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dcae      	bgt.n	8009b4c <_dtoa_r+0xb24>
 8009bee:	9b06      	ldr	r3, [sp, #24]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	f73f aea8 	bgt.w	8009946 <_dtoa_r+0x91e>
 8009bf6:	e7a9      	b.n	8009b4c <_dtoa_r+0xb24>
 8009bf8:	0800b58f 	.word	0x0800b58f
 8009bfc:	0800b4ec 	.word	0x0800b4ec
 8009c00:	0800b510 	.word	0x0800b510

08009c04 <_localeconv_r>:
 8009c04:	4800      	ldr	r0, [pc, #0]	; (8009c08 <_localeconv_r+0x4>)
 8009c06:	4770      	bx	lr
 8009c08:	20000164 	.word	0x20000164

08009c0c <malloc>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <malloc+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f000 bc09 	b.w	800a428 <_malloc_r>
 8009c16:	bf00      	nop
 8009c18:	20000010 	.word	0x20000010

08009c1c <_Balloc>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c20:	4604      	mov	r4, r0
 8009c22:	460d      	mov	r5, r1
 8009c24:	b976      	cbnz	r6, 8009c44 <_Balloc+0x28>
 8009c26:	2010      	movs	r0, #16
 8009c28:	f7ff fff0 	bl	8009c0c <malloc>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009c30:	b920      	cbnz	r0, 8009c3c <_Balloc+0x20>
 8009c32:	4b18      	ldr	r3, [pc, #96]	; (8009c94 <_Balloc+0x78>)
 8009c34:	4818      	ldr	r0, [pc, #96]	; (8009c98 <_Balloc+0x7c>)
 8009c36:	2166      	movs	r1, #102	; 0x66
 8009c38:	f000 fdd6 	bl	800a7e8 <__assert_func>
 8009c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c40:	6006      	str	r6, [r0, #0]
 8009c42:	60c6      	str	r6, [r0, #12]
 8009c44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c46:	68f3      	ldr	r3, [r6, #12]
 8009c48:	b183      	cbz	r3, 8009c6c <_Balloc+0x50>
 8009c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c52:	b9b8      	cbnz	r0, 8009c84 <_Balloc+0x68>
 8009c54:	2101      	movs	r1, #1
 8009c56:	fa01 f605 	lsl.w	r6, r1, r5
 8009c5a:	1d72      	adds	r2, r6, #5
 8009c5c:	0092      	lsls	r2, r2, #2
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 fb60 	bl	800a324 <_calloc_r>
 8009c64:	b160      	cbz	r0, 8009c80 <_Balloc+0x64>
 8009c66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c6a:	e00e      	b.n	8009c8a <_Balloc+0x6e>
 8009c6c:	2221      	movs	r2, #33	; 0x21
 8009c6e:	2104      	movs	r1, #4
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fb57 	bl	800a324 <_calloc_r>
 8009c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c78:	60f0      	str	r0, [r6, #12]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e4      	bne.n	8009c4a <_Balloc+0x2e>
 8009c80:	2000      	movs	r0, #0
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	6802      	ldr	r2, [r0, #0]
 8009c86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c90:	e7f7      	b.n	8009c82 <_Balloc+0x66>
 8009c92:	bf00      	nop
 8009c94:	0800b51d 	.word	0x0800b51d
 8009c98:	0800b5a0 	.word	0x0800b5a0

08009c9c <_Bfree>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	b976      	cbnz	r6, 8009cc4 <_Bfree+0x28>
 8009ca6:	2010      	movs	r0, #16
 8009ca8:	f7ff ffb0 	bl	8009c0c <malloc>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6268      	str	r0, [r5, #36]	; 0x24
 8009cb0:	b920      	cbnz	r0, 8009cbc <_Bfree+0x20>
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <_Bfree+0x3c>)
 8009cb4:	4809      	ldr	r0, [pc, #36]	; (8009cdc <_Bfree+0x40>)
 8009cb6:	218a      	movs	r1, #138	; 0x8a
 8009cb8:	f000 fd96 	bl	800a7e8 <__assert_func>
 8009cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc0:	6006      	str	r6, [r0, #0]
 8009cc2:	60c6      	str	r6, [r0, #12]
 8009cc4:	b13c      	cbz	r4, 8009cd6 <_Bfree+0x3a>
 8009cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cc8:	6862      	ldr	r2, [r4, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cd0:	6021      	str	r1, [r4, #0]
 8009cd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	0800b51d 	.word	0x0800b51d
 8009cdc:	0800b5a0 	.word	0x0800b5a0

08009ce0 <__multadd>:
 8009ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce4:	690d      	ldr	r5, [r1, #16]
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	460c      	mov	r4, r1
 8009cea:	461e      	mov	r6, r3
 8009cec:	f101 0c14 	add.w	ip, r1, #20
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	f8dc 3000 	ldr.w	r3, [ip]
 8009cf6:	b299      	uxth	r1, r3
 8009cf8:	fb02 6101 	mla	r1, r2, r1, r6
 8009cfc:	0c1e      	lsrs	r6, r3, #16
 8009cfe:	0c0b      	lsrs	r3, r1, #16
 8009d00:	fb02 3306 	mla	r3, r2, r6, r3
 8009d04:	b289      	uxth	r1, r1
 8009d06:	3001      	adds	r0, #1
 8009d08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d0c:	4285      	cmp	r5, r0
 8009d0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009d12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d16:	dcec      	bgt.n	8009cf2 <__multadd+0x12>
 8009d18:	b30e      	cbz	r6, 8009d5e <__multadd+0x7e>
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	dc19      	bgt.n	8009d54 <__multadd+0x74>
 8009d20:	6861      	ldr	r1, [r4, #4]
 8009d22:	4638      	mov	r0, r7
 8009d24:	3101      	adds	r1, #1
 8009d26:	f7ff ff79 	bl	8009c1c <_Balloc>
 8009d2a:	4680      	mov	r8, r0
 8009d2c:	b928      	cbnz	r0, 8009d3a <__multadd+0x5a>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <__multadd+0x84>)
 8009d32:	480d      	ldr	r0, [pc, #52]	; (8009d68 <__multadd+0x88>)
 8009d34:	21b5      	movs	r1, #181	; 0xb5
 8009d36:	f000 fd57 	bl	800a7e8 <__assert_func>
 8009d3a:	6922      	ldr	r2, [r4, #16]
 8009d3c:	3202      	adds	r2, #2
 8009d3e:	f104 010c 	add.w	r1, r4, #12
 8009d42:	0092      	lsls	r2, r2, #2
 8009d44:	300c      	adds	r0, #12
 8009d46:	f7fe fc43 	bl	80085d0 <memcpy>
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f7ff ffa5 	bl	8009c9c <_Bfree>
 8009d52:	4644      	mov	r4, r8
 8009d54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d58:	3501      	adds	r5, #1
 8009d5a:	615e      	str	r6, [r3, #20]
 8009d5c:	6125      	str	r5, [r4, #16]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d64:	0800b58f 	.word	0x0800b58f
 8009d68:	0800b5a0 	.word	0x0800b5a0

08009d6c <__hi0bits>:
 8009d6c:	0c03      	lsrs	r3, r0, #16
 8009d6e:	041b      	lsls	r3, r3, #16
 8009d70:	b9d3      	cbnz	r3, 8009da8 <__hi0bits+0x3c>
 8009d72:	0400      	lsls	r0, r0, #16
 8009d74:	2310      	movs	r3, #16
 8009d76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d7a:	bf04      	itt	eq
 8009d7c:	0200      	lsleq	r0, r0, #8
 8009d7e:	3308      	addeq	r3, #8
 8009d80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d84:	bf04      	itt	eq
 8009d86:	0100      	lsleq	r0, r0, #4
 8009d88:	3304      	addeq	r3, #4
 8009d8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d8e:	bf04      	itt	eq
 8009d90:	0080      	lsleq	r0, r0, #2
 8009d92:	3302      	addeq	r3, #2
 8009d94:	2800      	cmp	r0, #0
 8009d96:	db05      	blt.n	8009da4 <__hi0bits+0x38>
 8009d98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d9c:	f103 0301 	add.w	r3, r3, #1
 8009da0:	bf08      	it	eq
 8009da2:	2320      	moveq	r3, #32
 8009da4:	4618      	mov	r0, r3
 8009da6:	4770      	bx	lr
 8009da8:	2300      	movs	r3, #0
 8009daa:	e7e4      	b.n	8009d76 <__hi0bits+0xa>

08009dac <__lo0bits>:
 8009dac:	6803      	ldr	r3, [r0, #0]
 8009dae:	f013 0207 	ands.w	r2, r3, #7
 8009db2:	4601      	mov	r1, r0
 8009db4:	d00b      	beq.n	8009dce <__lo0bits+0x22>
 8009db6:	07da      	lsls	r2, r3, #31
 8009db8:	d423      	bmi.n	8009e02 <__lo0bits+0x56>
 8009dba:	0798      	lsls	r0, r3, #30
 8009dbc:	bf49      	itett	mi
 8009dbe:	085b      	lsrmi	r3, r3, #1
 8009dc0:	089b      	lsrpl	r3, r3, #2
 8009dc2:	2001      	movmi	r0, #1
 8009dc4:	600b      	strmi	r3, [r1, #0]
 8009dc6:	bf5c      	itt	pl
 8009dc8:	600b      	strpl	r3, [r1, #0]
 8009dca:	2002      	movpl	r0, #2
 8009dcc:	4770      	bx	lr
 8009dce:	b298      	uxth	r0, r3
 8009dd0:	b9a8      	cbnz	r0, 8009dfe <__lo0bits+0x52>
 8009dd2:	0c1b      	lsrs	r3, r3, #16
 8009dd4:	2010      	movs	r0, #16
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	b90a      	cbnz	r2, 8009dde <__lo0bits+0x32>
 8009dda:	3008      	adds	r0, #8
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	071a      	lsls	r2, r3, #28
 8009de0:	bf04      	itt	eq
 8009de2:	091b      	lsreq	r3, r3, #4
 8009de4:	3004      	addeq	r0, #4
 8009de6:	079a      	lsls	r2, r3, #30
 8009de8:	bf04      	itt	eq
 8009dea:	089b      	lsreq	r3, r3, #2
 8009dec:	3002      	addeq	r0, #2
 8009dee:	07da      	lsls	r2, r3, #31
 8009df0:	d403      	bmi.n	8009dfa <__lo0bits+0x4e>
 8009df2:	085b      	lsrs	r3, r3, #1
 8009df4:	f100 0001 	add.w	r0, r0, #1
 8009df8:	d005      	beq.n	8009e06 <__lo0bits+0x5a>
 8009dfa:	600b      	str	r3, [r1, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	4610      	mov	r0, r2
 8009e00:	e7e9      	b.n	8009dd6 <__lo0bits+0x2a>
 8009e02:	2000      	movs	r0, #0
 8009e04:	4770      	bx	lr
 8009e06:	2020      	movs	r0, #32
 8009e08:	4770      	bx	lr
	...

08009e0c <__i2b>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	2101      	movs	r1, #1
 8009e12:	f7ff ff03 	bl	8009c1c <_Balloc>
 8009e16:	4602      	mov	r2, r0
 8009e18:	b928      	cbnz	r0, 8009e26 <__i2b+0x1a>
 8009e1a:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <__i2b+0x24>)
 8009e1c:	4805      	ldr	r0, [pc, #20]	; (8009e34 <__i2b+0x28>)
 8009e1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e22:	f000 fce1 	bl	800a7e8 <__assert_func>
 8009e26:	2301      	movs	r3, #1
 8009e28:	6144      	str	r4, [r0, #20]
 8009e2a:	6103      	str	r3, [r0, #16]
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	bf00      	nop
 8009e30:	0800b58f 	.word	0x0800b58f
 8009e34:	0800b5a0 	.word	0x0800b5a0

08009e38 <__multiply>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	4691      	mov	r9, r2
 8009e3e:	690a      	ldr	r2, [r1, #16]
 8009e40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	bfb8      	it	lt
 8009e48:	460b      	movlt	r3, r1
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	bfbc      	itt	lt
 8009e4e:	464c      	movlt	r4, r9
 8009e50:	4699      	movlt	r9, r3
 8009e52:	6927      	ldr	r7, [r4, #16]
 8009e54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e58:	68a3      	ldr	r3, [r4, #8]
 8009e5a:	6861      	ldr	r1, [r4, #4]
 8009e5c:	eb07 060a 	add.w	r6, r7, sl
 8009e60:	42b3      	cmp	r3, r6
 8009e62:	b085      	sub	sp, #20
 8009e64:	bfb8      	it	lt
 8009e66:	3101      	addlt	r1, #1
 8009e68:	f7ff fed8 	bl	8009c1c <_Balloc>
 8009e6c:	b930      	cbnz	r0, 8009e7c <__multiply+0x44>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	4b44      	ldr	r3, [pc, #272]	; (8009f84 <__multiply+0x14c>)
 8009e72:	4845      	ldr	r0, [pc, #276]	; (8009f88 <__multiply+0x150>)
 8009e74:	f240 115d 	movw	r1, #349	; 0x15d
 8009e78:	f000 fcb6 	bl	800a7e8 <__assert_func>
 8009e7c:	f100 0514 	add.w	r5, r0, #20
 8009e80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e84:	462b      	mov	r3, r5
 8009e86:	2200      	movs	r2, #0
 8009e88:	4543      	cmp	r3, r8
 8009e8a:	d321      	bcc.n	8009ed0 <__multiply+0x98>
 8009e8c:	f104 0314 	add.w	r3, r4, #20
 8009e90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e94:	f109 0314 	add.w	r3, r9, #20
 8009e98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e9c:	9202      	str	r2, [sp, #8]
 8009e9e:	1b3a      	subs	r2, r7, r4
 8009ea0:	3a15      	subs	r2, #21
 8009ea2:	f022 0203 	bic.w	r2, r2, #3
 8009ea6:	3204      	adds	r2, #4
 8009ea8:	f104 0115 	add.w	r1, r4, #21
 8009eac:	428f      	cmp	r7, r1
 8009eae:	bf38      	it	cc
 8009eb0:	2204      	movcc	r2, #4
 8009eb2:	9201      	str	r2, [sp, #4]
 8009eb4:	9a02      	ldr	r2, [sp, #8]
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d80c      	bhi.n	8009ed6 <__multiply+0x9e>
 8009ebc:	2e00      	cmp	r6, #0
 8009ebe:	dd03      	ble.n	8009ec8 <__multiply+0x90>
 8009ec0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d05a      	beq.n	8009f7e <__multiply+0x146>
 8009ec8:	6106      	str	r6, [r0, #16]
 8009eca:	b005      	add	sp, #20
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed0:	f843 2b04 	str.w	r2, [r3], #4
 8009ed4:	e7d8      	b.n	8009e88 <__multiply+0x50>
 8009ed6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009eda:	f1ba 0f00 	cmp.w	sl, #0
 8009ede:	d024      	beq.n	8009f2a <__multiply+0xf2>
 8009ee0:	f104 0e14 	add.w	lr, r4, #20
 8009ee4:	46a9      	mov	r9, r5
 8009ee6:	f04f 0c00 	mov.w	ip, #0
 8009eea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009eee:	f8d9 1000 	ldr.w	r1, [r9]
 8009ef2:	fa1f fb82 	uxth.w	fp, r2
 8009ef6:	b289      	uxth	r1, r1
 8009ef8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009efc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f00:	f8d9 2000 	ldr.w	r2, [r9]
 8009f04:	4461      	add	r1, ip
 8009f06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f12:	b289      	uxth	r1, r1
 8009f14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f18:	4577      	cmp	r7, lr
 8009f1a:	f849 1b04 	str.w	r1, [r9], #4
 8009f1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f22:	d8e2      	bhi.n	8009eea <__multiply+0xb2>
 8009f24:	9a01      	ldr	r2, [sp, #4]
 8009f26:	f845 c002 	str.w	ip, [r5, r2]
 8009f2a:	9a03      	ldr	r2, [sp, #12]
 8009f2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f30:	3304      	adds	r3, #4
 8009f32:	f1b9 0f00 	cmp.w	r9, #0
 8009f36:	d020      	beq.n	8009f7a <__multiply+0x142>
 8009f38:	6829      	ldr	r1, [r5, #0]
 8009f3a:	f104 0c14 	add.w	ip, r4, #20
 8009f3e:	46ae      	mov	lr, r5
 8009f40:	f04f 0a00 	mov.w	sl, #0
 8009f44:	f8bc b000 	ldrh.w	fp, [ip]
 8009f48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009f50:	4492      	add	sl, r2
 8009f52:	b289      	uxth	r1, r1
 8009f54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f58:	f84e 1b04 	str.w	r1, [lr], #4
 8009f5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f60:	f8be 1000 	ldrh.w	r1, [lr]
 8009f64:	0c12      	lsrs	r2, r2, #16
 8009f66:	fb09 1102 	mla	r1, r9, r2, r1
 8009f6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f6e:	4567      	cmp	r7, ip
 8009f70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f74:	d8e6      	bhi.n	8009f44 <__multiply+0x10c>
 8009f76:	9a01      	ldr	r2, [sp, #4]
 8009f78:	50a9      	str	r1, [r5, r2]
 8009f7a:	3504      	adds	r5, #4
 8009f7c:	e79a      	b.n	8009eb4 <__multiply+0x7c>
 8009f7e:	3e01      	subs	r6, #1
 8009f80:	e79c      	b.n	8009ebc <__multiply+0x84>
 8009f82:	bf00      	nop
 8009f84:	0800b58f 	.word	0x0800b58f
 8009f88:	0800b5a0 	.word	0x0800b5a0

08009f8c <__pow5mult>:
 8009f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f90:	4615      	mov	r5, r2
 8009f92:	f012 0203 	ands.w	r2, r2, #3
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	d007      	beq.n	8009fac <__pow5mult+0x20>
 8009f9c:	4c25      	ldr	r4, [pc, #148]	; (800a034 <__pow5mult+0xa8>)
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fa6:	f7ff fe9b 	bl	8009ce0 <__multadd>
 8009faa:	4607      	mov	r7, r0
 8009fac:	10ad      	asrs	r5, r5, #2
 8009fae:	d03d      	beq.n	800a02c <__pow5mult+0xa0>
 8009fb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fb2:	b97c      	cbnz	r4, 8009fd4 <__pow5mult+0x48>
 8009fb4:	2010      	movs	r0, #16
 8009fb6:	f7ff fe29 	bl	8009c0c <malloc>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	6270      	str	r0, [r6, #36]	; 0x24
 8009fbe:	b928      	cbnz	r0, 8009fcc <__pow5mult+0x40>
 8009fc0:	4b1d      	ldr	r3, [pc, #116]	; (800a038 <__pow5mult+0xac>)
 8009fc2:	481e      	ldr	r0, [pc, #120]	; (800a03c <__pow5mult+0xb0>)
 8009fc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009fc8:	f000 fc0e 	bl	800a7e8 <__assert_func>
 8009fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fd0:	6004      	str	r4, [r0, #0]
 8009fd2:	60c4      	str	r4, [r0, #12]
 8009fd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fdc:	b94c      	cbnz	r4, 8009ff2 <__pow5mult+0x66>
 8009fde:	f240 2171 	movw	r1, #625	; 0x271
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ff12 	bl	8009e0c <__i2b>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fee:	4604      	mov	r4, r0
 8009ff0:	6003      	str	r3, [r0, #0]
 8009ff2:	f04f 0900 	mov.w	r9, #0
 8009ff6:	07eb      	lsls	r3, r5, #31
 8009ff8:	d50a      	bpl.n	800a010 <__pow5mult+0x84>
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4630      	mov	r0, r6
 800a000:	f7ff ff1a 	bl	8009e38 <__multiply>
 800a004:	4639      	mov	r1, r7
 800a006:	4680      	mov	r8, r0
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff fe47 	bl	8009c9c <_Bfree>
 800a00e:	4647      	mov	r7, r8
 800a010:	106d      	asrs	r5, r5, #1
 800a012:	d00b      	beq.n	800a02c <__pow5mult+0xa0>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	b938      	cbnz	r0, 800a028 <__pow5mult+0x9c>
 800a018:	4622      	mov	r2, r4
 800a01a:	4621      	mov	r1, r4
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7ff ff0b 	bl	8009e38 <__multiply>
 800a022:	6020      	str	r0, [r4, #0]
 800a024:	f8c0 9000 	str.w	r9, [r0]
 800a028:	4604      	mov	r4, r0
 800a02a:	e7e4      	b.n	8009ff6 <__pow5mult+0x6a>
 800a02c:	4638      	mov	r0, r7
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	bf00      	nop
 800a034:	0800b6f0 	.word	0x0800b6f0
 800a038:	0800b51d 	.word	0x0800b51d
 800a03c:	0800b5a0 	.word	0x0800b5a0

0800a040 <__lshift>:
 800a040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	460c      	mov	r4, r1
 800a046:	6849      	ldr	r1, [r1, #4]
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	4607      	mov	r7, r0
 800a052:	4691      	mov	r9, r2
 800a054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a058:	f108 0601 	add.w	r6, r8, #1
 800a05c:	42b3      	cmp	r3, r6
 800a05e:	db0b      	blt.n	800a078 <__lshift+0x38>
 800a060:	4638      	mov	r0, r7
 800a062:	f7ff fddb 	bl	8009c1c <_Balloc>
 800a066:	4605      	mov	r5, r0
 800a068:	b948      	cbnz	r0, 800a07e <__lshift+0x3e>
 800a06a:	4602      	mov	r2, r0
 800a06c:	4b2a      	ldr	r3, [pc, #168]	; (800a118 <__lshift+0xd8>)
 800a06e:	482b      	ldr	r0, [pc, #172]	; (800a11c <__lshift+0xdc>)
 800a070:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a074:	f000 fbb8 	bl	800a7e8 <__assert_func>
 800a078:	3101      	adds	r1, #1
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	e7ee      	b.n	800a05c <__lshift+0x1c>
 800a07e:	2300      	movs	r3, #0
 800a080:	f100 0114 	add.w	r1, r0, #20
 800a084:	f100 0210 	add.w	r2, r0, #16
 800a088:	4618      	mov	r0, r3
 800a08a:	4553      	cmp	r3, sl
 800a08c:	db37      	blt.n	800a0fe <__lshift+0xbe>
 800a08e:	6920      	ldr	r0, [r4, #16]
 800a090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a094:	f104 0314 	add.w	r3, r4, #20
 800a098:	f019 091f 	ands.w	r9, r9, #31
 800a09c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0a4:	d02f      	beq.n	800a106 <__lshift+0xc6>
 800a0a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a0aa:	468a      	mov	sl, r1
 800a0ac:	f04f 0c00 	mov.w	ip, #0
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	fa02 f209 	lsl.w	r2, r2, r9
 800a0b6:	ea42 020c 	orr.w	r2, r2, ip
 800a0ba:	f84a 2b04 	str.w	r2, [sl], #4
 800a0be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0c2:	4298      	cmp	r0, r3
 800a0c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a0c8:	d8f2      	bhi.n	800a0b0 <__lshift+0x70>
 800a0ca:	1b03      	subs	r3, r0, r4
 800a0cc:	3b15      	subs	r3, #21
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	f104 0215 	add.w	r2, r4, #21
 800a0d8:	4290      	cmp	r0, r2
 800a0da:	bf38      	it	cc
 800a0dc:	2304      	movcc	r3, #4
 800a0de:	f841 c003 	str.w	ip, [r1, r3]
 800a0e2:	f1bc 0f00 	cmp.w	ip, #0
 800a0e6:	d001      	beq.n	800a0ec <__lshift+0xac>
 800a0e8:	f108 0602 	add.w	r6, r8, #2
 800a0ec:	3e01      	subs	r6, #1
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	612e      	str	r6, [r5, #16]
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	f7ff fdd2 	bl	8009c9c <_Bfree>
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a102:	3301      	adds	r3, #1
 800a104:	e7c1      	b.n	800a08a <__lshift+0x4a>
 800a106:	3904      	subs	r1, #4
 800a108:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a110:	4298      	cmp	r0, r3
 800a112:	d8f9      	bhi.n	800a108 <__lshift+0xc8>
 800a114:	e7ea      	b.n	800a0ec <__lshift+0xac>
 800a116:	bf00      	nop
 800a118:	0800b58f 	.word	0x0800b58f
 800a11c:	0800b5a0 	.word	0x0800b5a0

0800a120 <__mcmp>:
 800a120:	b530      	push	{r4, r5, lr}
 800a122:	6902      	ldr	r2, [r0, #16]
 800a124:	690c      	ldr	r4, [r1, #16]
 800a126:	1b12      	subs	r2, r2, r4
 800a128:	d10e      	bne.n	800a148 <__mcmp+0x28>
 800a12a:	f100 0314 	add.w	r3, r0, #20
 800a12e:	3114      	adds	r1, #20
 800a130:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a134:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a138:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a13c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a140:	42a5      	cmp	r5, r4
 800a142:	d003      	beq.n	800a14c <__mcmp+0x2c>
 800a144:	d305      	bcc.n	800a152 <__mcmp+0x32>
 800a146:	2201      	movs	r2, #1
 800a148:	4610      	mov	r0, r2
 800a14a:	bd30      	pop	{r4, r5, pc}
 800a14c:	4283      	cmp	r3, r0
 800a14e:	d3f3      	bcc.n	800a138 <__mcmp+0x18>
 800a150:	e7fa      	b.n	800a148 <__mcmp+0x28>
 800a152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a156:	e7f7      	b.n	800a148 <__mcmp+0x28>

0800a158 <__mdiff>:
 800a158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	460c      	mov	r4, r1
 800a15e:	4606      	mov	r6, r0
 800a160:	4611      	mov	r1, r2
 800a162:	4620      	mov	r0, r4
 800a164:	4690      	mov	r8, r2
 800a166:	f7ff ffdb 	bl	800a120 <__mcmp>
 800a16a:	1e05      	subs	r5, r0, #0
 800a16c:	d110      	bne.n	800a190 <__mdiff+0x38>
 800a16e:	4629      	mov	r1, r5
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff fd53 	bl	8009c1c <_Balloc>
 800a176:	b930      	cbnz	r0, 800a186 <__mdiff+0x2e>
 800a178:	4b3a      	ldr	r3, [pc, #232]	; (800a264 <__mdiff+0x10c>)
 800a17a:	4602      	mov	r2, r0
 800a17c:	f240 2132 	movw	r1, #562	; 0x232
 800a180:	4839      	ldr	r0, [pc, #228]	; (800a268 <__mdiff+0x110>)
 800a182:	f000 fb31 	bl	800a7e8 <__assert_func>
 800a186:	2301      	movs	r3, #1
 800a188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a18c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	bfa4      	itt	ge
 800a192:	4643      	movge	r3, r8
 800a194:	46a0      	movge	r8, r4
 800a196:	4630      	mov	r0, r6
 800a198:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a19c:	bfa6      	itte	ge
 800a19e:	461c      	movge	r4, r3
 800a1a0:	2500      	movge	r5, #0
 800a1a2:	2501      	movlt	r5, #1
 800a1a4:	f7ff fd3a 	bl	8009c1c <_Balloc>
 800a1a8:	b920      	cbnz	r0, 800a1b4 <__mdiff+0x5c>
 800a1aa:	4b2e      	ldr	r3, [pc, #184]	; (800a264 <__mdiff+0x10c>)
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1b2:	e7e5      	b.n	800a180 <__mdiff+0x28>
 800a1b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1b8:	6926      	ldr	r6, [r4, #16]
 800a1ba:	60c5      	str	r5, [r0, #12]
 800a1bc:	f104 0914 	add.w	r9, r4, #20
 800a1c0:	f108 0514 	add.w	r5, r8, #20
 800a1c4:	f100 0e14 	add.w	lr, r0, #20
 800a1c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a1cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1d0:	f108 0210 	add.w	r2, r8, #16
 800a1d4:	46f2      	mov	sl, lr
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1e0:	fa1f f883 	uxth.w	r8, r3
 800a1e4:	fa11 f18b 	uxtah	r1, r1, fp
 800a1e8:	0c1b      	lsrs	r3, r3, #16
 800a1ea:	eba1 0808 	sub.w	r8, r1, r8
 800a1ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1f6:	fa1f f888 	uxth.w	r8, r8
 800a1fa:	1419      	asrs	r1, r3, #16
 800a1fc:	454e      	cmp	r6, r9
 800a1fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a202:	f84a 3b04 	str.w	r3, [sl], #4
 800a206:	d8e7      	bhi.n	800a1d8 <__mdiff+0x80>
 800a208:	1b33      	subs	r3, r6, r4
 800a20a:	3b15      	subs	r3, #21
 800a20c:	f023 0303 	bic.w	r3, r3, #3
 800a210:	3304      	adds	r3, #4
 800a212:	3415      	adds	r4, #21
 800a214:	42a6      	cmp	r6, r4
 800a216:	bf38      	it	cc
 800a218:	2304      	movcc	r3, #4
 800a21a:	441d      	add	r5, r3
 800a21c:	4473      	add	r3, lr
 800a21e:	469e      	mov	lr, r3
 800a220:	462e      	mov	r6, r5
 800a222:	4566      	cmp	r6, ip
 800a224:	d30e      	bcc.n	800a244 <__mdiff+0xec>
 800a226:	f10c 0203 	add.w	r2, ip, #3
 800a22a:	1b52      	subs	r2, r2, r5
 800a22c:	f022 0203 	bic.w	r2, r2, #3
 800a230:	3d03      	subs	r5, #3
 800a232:	45ac      	cmp	ip, r5
 800a234:	bf38      	it	cc
 800a236:	2200      	movcc	r2, #0
 800a238:	441a      	add	r2, r3
 800a23a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a23e:	b17b      	cbz	r3, 800a260 <__mdiff+0x108>
 800a240:	6107      	str	r7, [r0, #16]
 800a242:	e7a3      	b.n	800a18c <__mdiff+0x34>
 800a244:	f856 8b04 	ldr.w	r8, [r6], #4
 800a248:	fa11 f288 	uxtah	r2, r1, r8
 800a24c:	1414      	asrs	r4, r2, #16
 800a24e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a252:	b292      	uxth	r2, r2
 800a254:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a258:	f84e 2b04 	str.w	r2, [lr], #4
 800a25c:	1421      	asrs	r1, r4, #16
 800a25e:	e7e0      	b.n	800a222 <__mdiff+0xca>
 800a260:	3f01      	subs	r7, #1
 800a262:	e7ea      	b.n	800a23a <__mdiff+0xe2>
 800a264:	0800b58f 	.word	0x0800b58f
 800a268:	0800b5a0 	.word	0x0800b5a0

0800a26c <__d2b>:
 800a26c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a270:	4689      	mov	r9, r1
 800a272:	2101      	movs	r1, #1
 800a274:	ec57 6b10 	vmov	r6, r7, d0
 800a278:	4690      	mov	r8, r2
 800a27a:	f7ff fccf 	bl	8009c1c <_Balloc>
 800a27e:	4604      	mov	r4, r0
 800a280:	b930      	cbnz	r0, 800a290 <__d2b+0x24>
 800a282:	4602      	mov	r2, r0
 800a284:	4b25      	ldr	r3, [pc, #148]	; (800a31c <__d2b+0xb0>)
 800a286:	4826      	ldr	r0, [pc, #152]	; (800a320 <__d2b+0xb4>)
 800a288:	f240 310a 	movw	r1, #778	; 0x30a
 800a28c:	f000 faac 	bl	800a7e8 <__assert_func>
 800a290:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a298:	bb35      	cbnz	r5, 800a2e8 <__d2b+0x7c>
 800a29a:	2e00      	cmp	r6, #0
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	d028      	beq.n	800a2f2 <__d2b+0x86>
 800a2a0:	4668      	mov	r0, sp
 800a2a2:	9600      	str	r6, [sp, #0]
 800a2a4:	f7ff fd82 	bl	8009dac <__lo0bits>
 800a2a8:	9900      	ldr	r1, [sp, #0]
 800a2aa:	b300      	cbz	r0, 800a2ee <__d2b+0x82>
 800a2ac:	9a01      	ldr	r2, [sp, #4]
 800a2ae:	f1c0 0320 	rsb	r3, r0, #32
 800a2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	40c2      	lsrs	r2, r0
 800a2ba:	6163      	str	r3, [r4, #20]
 800a2bc:	9201      	str	r2, [sp, #4]
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	61a3      	str	r3, [r4, #24]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf14      	ite	ne
 800a2c6:	2202      	movne	r2, #2
 800a2c8:	2201      	moveq	r2, #1
 800a2ca:	6122      	str	r2, [r4, #16]
 800a2cc:	b1d5      	cbz	r5, 800a304 <__d2b+0x98>
 800a2ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2d2:	4405      	add	r5, r0
 800a2d4:	f8c9 5000 	str.w	r5, [r9]
 800a2d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2dc:	f8c8 0000 	str.w	r0, [r8]
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	b003      	add	sp, #12
 800a2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ec:	e7d5      	b.n	800a29a <__d2b+0x2e>
 800a2ee:	6161      	str	r1, [r4, #20]
 800a2f0:	e7e5      	b.n	800a2be <__d2b+0x52>
 800a2f2:	a801      	add	r0, sp, #4
 800a2f4:	f7ff fd5a 	bl	8009dac <__lo0bits>
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	6163      	str	r3, [r4, #20]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	6122      	str	r2, [r4, #16]
 800a300:	3020      	adds	r0, #32
 800a302:	e7e3      	b.n	800a2cc <__d2b+0x60>
 800a304:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a30c:	f8c9 0000 	str.w	r0, [r9]
 800a310:	6918      	ldr	r0, [r3, #16]
 800a312:	f7ff fd2b 	bl	8009d6c <__hi0bits>
 800a316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a31a:	e7df      	b.n	800a2dc <__d2b+0x70>
 800a31c:	0800b58f 	.word	0x0800b58f
 800a320:	0800b5a0 	.word	0x0800b5a0

0800a324 <_calloc_r>:
 800a324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a326:	fba1 2402 	umull	r2, r4, r1, r2
 800a32a:	b94c      	cbnz	r4, 800a340 <_calloc_r+0x1c>
 800a32c:	4611      	mov	r1, r2
 800a32e:	9201      	str	r2, [sp, #4]
 800a330:	f000 f87a 	bl	800a428 <_malloc_r>
 800a334:	9a01      	ldr	r2, [sp, #4]
 800a336:	4605      	mov	r5, r0
 800a338:	b930      	cbnz	r0, 800a348 <_calloc_r+0x24>
 800a33a:	4628      	mov	r0, r5
 800a33c:	b003      	add	sp, #12
 800a33e:	bd30      	pop	{r4, r5, pc}
 800a340:	220c      	movs	r2, #12
 800a342:	6002      	str	r2, [r0, #0]
 800a344:	2500      	movs	r5, #0
 800a346:	e7f8      	b.n	800a33a <_calloc_r+0x16>
 800a348:	4621      	mov	r1, r4
 800a34a:	f7fe f94f 	bl	80085ec <memset>
 800a34e:	e7f4      	b.n	800a33a <_calloc_r+0x16>

0800a350 <_free_r>:
 800a350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a352:	2900      	cmp	r1, #0
 800a354:	d044      	beq.n	800a3e0 <_free_r+0x90>
 800a356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35a:	9001      	str	r0, [sp, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f1a1 0404 	sub.w	r4, r1, #4
 800a362:	bfb8      	it	lt
 800a364:	18e4      	addlt	r4, r4, r3
 800a366:	f000 fa9b 	bl	800a8a0 <__malloc_lock>
 800a36a:	4a1e      	ldr	r2, [pc, #120]	; (800a3e4 <_free_r+0x94>)
 800a36c:	9801      	ldr	r0, [sp, #4]
 800a36e:	6813      	ldr	r3, [r2, #0]
 800a370:	b933      	cbnz	r3, 800a380 <_free_r+0x30>
 800a372:	6063      	str	r3, [r4, #4]
 800a374:	6014      	str	r4, [r2, #0]
 800a376:	b003      	add	sp, #12
 800a378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a37c:	f000 ba96 	b.w	800a8ac <__malloc_unlock>
 800a380:	42a3      	cmp	r3, r4
 800a382:	d908      	bls.n	800a396 <_free_r+0x46>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	1961      	adds	r1, r4, r5
 800a388:	428b      	cmp	r3, r1
 800a38a:	bf01      	itttt	eq
 800a38c:	6819      	ldreq	r1, [r3, #0]
 800a38e:	685b      	ldreq	r3, [r3, #4]
 800a390:	1949      	addeq	r1, r1, r5
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	e7ed      	b.n	800a372 <_free_r+0x22>
 800a396:	461a      	mov	r2, r3
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	b10b      	cbz	r3, 800a3a0 <_free_r+0x50>
 800a39c:	42a3      	cmp	r3, r4
 800a39e:	d9fa      	bls.n	800a396 <_free_r+0x46>
 800a3a0:	6811      	ldr	r1, [r2, #0]
 800a3a2:	1855      	adds	r5, r2, r1
 800a3a4:	42a5      	cmp	r5, r4
 800a3a6:	d10b      	bne.n	800a3c0 <_free_r+0x70>
 800a3a8:	6824      	ldr	r4, [r4, #0]
 800a3aa:	4421      	add	r1, r4
 800a3ac:	1854      	adds	r4, r2, r1
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	6011      	str	r1, [r2, #0]
 800a3b2:	d1e0      	bne.n	800a376 <_free_r+0x26>
 800a3b4:	681c      	ldr	r4, [r3, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	6053      	str	r3, [r2, #4]
 800a3ba:	4421      	add	r1, r4
 800a3bc:	6011      	str	r1, [r2, #0]
 800a3be:	e7da      	b.n	800a376 <_free_r+0x26>
 800a3c0:	d902      	bls.n	800a3c8 <_free_r+0x78>
 800a3c2:	230c      	movs	r3, #12
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	e7d6      	b.n	800a376 <_free_r+0x26>
 800a3c8:	6825      	ldr	r5, [r4, #0]
 800a3ca:	1961      	adds	r1, r4, r5
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf04      	itt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	6063      	str	r3, [r4, #4]
 800a3d6:	bf04      	itt	eq
 800a3d8:	1949      	addeq	r1, r1, r5
 800a3da:	6021      	streq	r1, [r4, #0]
 800a3dc:	6054      	str	r4, [r2, #4]
 800a3de:	e7ca      	b.n	800a376 <_free_r+0x26>
 800a3e0:	b003      	add	sp, #12
 800a3e2:	bd30      	pop	{r4, r5, pc}
 800a3e4:	20004d30 	.word	0x20004d30

0800a3e8 <sbrk_aligned>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	4e0e      	ldr	r6, [pc, #56]	; (800a424 <sbrk_aligned+0x3c>)
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	6831      	ldr	r1, [r6, #0]
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	b911      	cbnz	r1, 800a3fa <sbrk_aligned+0x12>
 800a3f4:	f000 f9e8 	bl	800a7c8 <_sbrk_r>
 800a3f8:	6030      	str	r0, [r6, #0]
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f9e3 	bl	800a7c8 <_sbrk_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d00a      	beq.n	800a41c <sbrk_aligned+0x34>
 800a406:	1cc4      	adds	r4, r0, #3
 800a408:	f024 0403 	bic.w	r4, r4, #3
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d007      	beq.n	800a420 <sbrk_aligned+0x38>
 800a410:	1a21      	subs	r1, r4, r0
 800a412:	4628      	mov	r0, r5
 800a414:	f000 f9d8 	bl	800a7c8 <_sbrk_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	d101      	bne.n	800a420 <sbrk_aligned+0x38>
 800a41c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a420:	4620      	mov	r0, r4
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	20004d34 	.word	0x20004d34

0800a428 <_malloc_r>:
 800a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	1ccd      	adds	r5, r1, #3
 800a42e:	f025 0503 	bic.w	r5, r5, #3
 800a432:	3508      	adds	r5, #8
 800a434:	2d0c      	cmp	r5, #12
 800a436:	bf38      	it	cc
 800a438:	250c      	movcc	r5, #12
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	4607      	mov	r7, r0
 800a43e:	db01      	blt.n	800a444 <_malloc_r+0x1c>
 800a440:	42a9      	cmp	r1, r5
 800a442:	d905      	bls.n	800a450 <_malloc_r+0x28>
 800a444:	230c      	movs	r3, #12
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	2600      	movs	r6, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	4e2e      	ldr	r6, [pc, #184]	; (800a50c <_malloc_r+0xe4>)
 800a452:	f000 fa25 	bl	800a8a0 <__malloc_lock>
 800a456:	6833      	ldr	r3, [r6, #0]
 800a458:	461c      	mov	r4, r3
 800a45a:	bb34      	cbnz	r4, 800a4aa <_malloc_r+0x82>
 800a45c:	4629      	mov	r1, r5
 800a45e:	4638      	mov	r0, r7
 800a460:	f7ff ffc2 	bl	800a3e8 <sbrk_aligned>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	4604      	mov	r4, r0
 800a468:	d14d      	bne.n	800a506 <_malloc_r+0xde>
 800a46a:	6834      	ldr	r4, [r6, #0]
 800a46c:	4626      	mov	r6, r4
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d140      	bne.n	800a4f4 <_malloc_r+0xcc>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	4631      	mov	r1, r6
 800a476:	4638      	mov	r0, r7
 800a478:	eb04 0803 	add.w	r8, r4, r3
 800a47c:	f000 f9a4 	bl	800a7c8 <_sbrk_r>
 800a480:	4580      	cmp	r8, r0
 800a482:	d13a      	bne.n	800a4fa <_malloc_r+0xd2>
 800a484:	6821      	ldr	r1, [r4, #0]
 800a486:	3503      	adds	r5, #3
 800a488:	1a6d      	subs	r5, r5, r1
 800a48a:	f025 0503 	bic.w	r5, r5, #3
 800a48e:	3508      	adds	r5, #8
 800a490:	2d0c      	cmp	r5, #12
 800a492:	bf38      	it	cc
 800a494:	250c      	movcc	r5, #12
 800a496:	4629      	mov	r1, r5
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff ffa5 	bl	800a3e8 <sbrk_aligned>
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d02b      	beq.n	800a4fa <_malloc_r+0xd2>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	442b      	add	r3, r5
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	e00e      	b.n	800a4c8 <_malloc_r+0xa0>
 800a4aa:	6822      	ldr	r2, [r4, #0]
 800a4ac:	1b52      	subs	r2, r2, r5
 800a4ae:	d41e      	bmi.n	800a4ee <_malloc_r+0xc6>
 800a4b0:	2a0b      	cmp	r2, #11
 800a4b2:	d916      	bls.n	800a4e2 <_malloc_r+0xba>
 800a4b4:	1961      	adds	r1, r4, r5
 800a4b6:	42a3      	cmp	r3, r4
 800a4b8:	6025      	str	r5, [r4, #0]
 800a4ba:	bf18      	it	ne
 800a4bc:	6059      	strne	r1, [r3, #4]
 800a4be:	6863      	ldr	r3, [r4, #4]
 800a4c0:	bf08      	it	eq
 800a4c2:	6031      	streq	r1, [r6, #0]
 800a4c4:	5162      	str	r2, [r4, r5]
 800a4c6:	604b      	str	r3, [r1, #4]
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f104 060b 	add.w	r6, r4, #11
 800a4ce:	f000 f9ed 	bl	800a8ac <__malloc_unlock>
 800a4d2:	f026 0607 	bic.w	r6, r6, #7
 800a4d6:	1d23      	adds	r3, r4, #4
 800a4d8:	1af2      	subs	r2, r6, r3
 800a4da:	d0b6      	beq.n	800a44a <_malloc_r+0x22>
 800a4dc:	1b9b      	subs	r3, r3, r6
 800a4de:	50a3      	str	r3, [r4, r2]
 800a4e0:	e7b3      	b.n	800a44a <_malloc_r+0x22>
 800a4e2:	6862      	ldr	r2, [r4, #4]
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	bf0c      	ite	eq
 800a4e8:	6032      	streq	r2, [r6, #0]
 800a4ea:	605a      	strne	r2, [r3, #4]
 800a4ec:	e7ec      	b.n	800a4c8 <_malloc_r+0xa0>
 800a4ee:	4623      	mov	r3, r4
 800a4f0:	6864      	ldr	r4, [r4, #4]
 800a4f2:	e7b2      	b.n	800a45a <_malloc_r+0x32>
 800a4f4:	4634      	mov	r4, r6
 800a4f6:	6876      	ldr	r6, [r6, #4]
 800a4f8:	e7b9      	b.n	800a46e <_malloc_r+0x46>
 800a4fa:	230c      	movs	r3, #12
 800a4fc:	603b      	str	r3, [r7, #0]
 800a4fe:	4638      	mov	r0, r7
 800a500:	f000 f9d4 	bl	800a8ac <__malloc_unlock>
 800a504:	e7a1      	b.n	800a44a <_malloc_r+0x22>
 800a506:	6025      	str	r5, [r4, #0]
 800a508:	e7de      	b.n	800a4c8 <_malloc_r+0xa0>
 800a50a:	bf00      	nop
 800a50c:	20004d30 	.word	0x20004d30

0800a510 <__ssputs_r>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	688e      	ldr	r6, [r1, #8]
 800a516:	429e      	cmp	r6, r3
 800a518:	4682      	mov	sl, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	4690      	mov	r8, r2
 800a51e:	461f      	mov	r7, r3
 800a520:	d838      	bhi.n	800a594 <__ssputs_r+0x84>
 800a522:	898a      	ldrh	r2, [r1, #12]
 800a524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a528:	d032      	beq.n	800a590 <__ssputs_r+0x80>
 800a52a:	6825      	ldr	r5, [r4, #0]
 800a52c:	6909      	ldr	r1, [r1, #16]
 800a52e:	eba5 0901 	sub.w	r9, r5, r1
 800a532:	6965      	ldr	r5, [r4, #20]
 800a534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a53c:	3301      	adds	r3, #1
 800a53e:	444b      	add	r3, r9
 800a540:	106d      	asrs	r5, r5, #1
 800a542:	429d      	cmp	r5, r3
 800a544:	bf38      	it	cc
 800a546:	461d      	movcc	r5, r3
 800a548:	0553      	lsls	r3, r2, #21
 800a54a:	d531      	bpl.n	800a5b0 <__ssputs_r+0xa0>
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7ff ff6b 	bl	800a428 <_malloc_r>
 800a552:	4606      	mov	r6, r0
 800a554:	b950      	cbnz	r0, 800a56c <__ssputs_r+0x5c>
 800a556:	230c      	movs	r3, #12
 800a558:	f8ca 3000 	str.w	r3, [sl]
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a562:	81a3      	strh	r3, [r4, #12]
 800a564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	464a      	mov	r2, r9
 800a570:	f7fe f82e 	bl	80085d0 <memcpy>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	6126      	str	r6, [r4, #16]
 800a582:	6165      	str	r5, [r4, #20]
 800a584:	444e      	add	r6, r9
 800a586:	eba5 0509 	sub.w	r5, r5, r9
 800a58a:	6026      	str	r6, [r4, #0]
 800a58c:	60a5      	str	r5, [r4, #8]
 800a58e:	463e      	mov	r6, r7
 800a590:	42be      	cmp	r6, r7
 800a592:	d900      	bls.n	800a596 <__ssputs_r+0x86>
 800a594:	463e      	mov	r6, r7
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	4632      	mov	r2, r6
 800a59a:	4641      	mov	r1, r8
 800a59c:	f000 f966 	bl	800a86c <memmove>
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	1b9b      	subs	r3, r3, r6
 800a5a4:	60a3      	str	r3, [r4, #8]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	4433      	add	r3, r6
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e7db      	b.n	800a568 <__ssputs_r+0x58>
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	f000 f981 	bl	800a8b8 <_realloc_r>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d1e1      	bne.n	800a580 <__ssputs_r+0x70>
 800a5bc:	6921      	ldr	r1, [r4, #16]
 800a5be:	4650      	mov	r0, sl
 800a5c0:	f7ff fec6 	bl	800a350 <_free_r>
 800a5c4:	e7c7      	b.n	800a556 <__ssputs_r+0x46>
	...

0800a5c8 <_svfiprintf_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	4698      	mov	r8, r3
 800a5ce:	898b      	ldrh	r3, [r1, #12]
 800a5d0:	061b      	lsls	r3, r3, #24
 800a5d2:	b09d      	sub	sp, #116	; 0x74
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	d50e      	bpl.n	800a5fa <_svfiprintf_r+0x32>
 800a5dc:	690b      	ldr	r3, [r1, #16]
 800a5de:	b963      	cbnz	r3, 800a5fa <_svfiprintf_r+0x32>
 800a5e0:	2140      	movs	r1, #64	; 0x40
 800a5e2:	f7ff ff21 	bl	800a428 <_malloc_r>
 800a5e6:	6028      	str	r0, [r5, #0]
 800a5e8:	6128      	str	r0, [r5, #16]
 800a5ea:	b920      	cbnz	r0, 800a5f6 <_svfiprintf_r+0x2e>
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f4:	e0d1      	b.n	800a79a <_svfiprintf_r+0x1d2>
 800a5f6:	2340      	movs	r3, #64	; 0x40
 800a5f8:	616b      	str	r3, [r5, #20]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5fe:	2320      	movs	r3, #32
 800a600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a604:	f8cd 800c 	str.w	r8, [sp, #12]
 800a608:	2330      	movs	r3, #48	; 0x30
 800a60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7b4 <_svfiprintf_r+0x1ec>
 800a60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a612:	f04f 0901 	mov.w	r9, #1
 800a616:	4623      	mov	r3, r4
 800a618:	469a      	mov	sl, r3
 800a61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a61e:	b10a      	cbz	r2, 800a624 <_svfiprintf_r+0x5c>
 800a620:	2a25      	cmp	r2, #37	; 0x25
 800a622:	d1f9      	bne.n	800a618 <_svfiprintf_r+0x50>
 800a624:	ebba 0b04 	subs.w	fp, sl, r4
 800a628:	d00b      	beq.n	800a642 <_svfiprintf_r+0x7a>
 800a62a:	465b      	mov	r3, fp
 800a62c:	4622      	mov	r2, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff ff6d 	bl	800a510 <__ssputs_r>
 800a636:	3001      	adds	r0, #1
 800a638:	f000 80aa 	beq.w	800a790 <_svfiprintf_r+0x1c8>
 800a63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a63e:	445a      	add	r2, fp
 800a640:	9209      	str	r2, [sp, #36]	; 0x24
 800a642:	f89a 3000 	ldrb.w	r3, [sl]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80a2 	beq.w	800a790 <_svfiprintf_r+0x1c8>
 800a64c:	2300      	movs	r3, #0
 800a64e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a656:	f10a 0a01 	add.w	sl, sl, #1
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	9307      	str	r3, [sp, #28]
 800a65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a662:	931a      	str	r3, [sp, #104]	; 0x68
 800a664:	4654      	mov	r4, sl
 800a666:	2205      	movs	r2, #5
 800a668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66c:	4851      	ldr	r0, [pc, #324]	; (800a7b4 <_svfiprintf_r+0x1ec>)
 800a66e:	f7f5 fdd7 	bl	8000220 <memchr>
 800a672:	9a04      	ldr	r2, [sp, #16]
 800a674:	b9d8      	cbnz	r0, 800a6ae <_svfiprintf_r+0xe6>
 800a676:	06d0      	lsls	r0, r2, #27
 800a678:	bf44      	itt	mi
 800a67a:	2320      	movmi	r3, #32
 800a67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a680:	0711      	lsls	r1, r2, #28
 800a682:	bf44      	itt	mi
 800a684:	232b      	movmi	r3, #43	; 0x2b
 800a686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68a:	f89a 3000 	ldrb.w	r3, [sl]
 800a68e:	2b2a      	cmp	r3, #42	; 0x2a
 800a690:	d015      	beq.n	800a6be <_svfiprintf_r+0xf6>
 800a692:	9a07      	ldr	r2, [sp, #28]
 800a694:	4654      	mov	r4, sl
 800a696:	2000      	movs	r0, #0
 800a698:	f04f 0c0a 	mov.w	ip, #10
 800a69c:	4621      	mov	r1, r4
 800a69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a2:	3b30      	subs	r3, #48	; 0x30
 800a6a4:	2b09      	cmp	r3, #9
 800a6a6:	d94e      	bls.n	800a746 <_svfiprintf_r+0x17e>
 800a6a8:	b1b0      	cbz	r0, 800a6d8 <_svfiprintf_r+0x110>
 800a6aa:	9207      	str	r2, [sp, #28]
 800a6ac:	e014      	b.n	800a6d8 <_svfiprintf_r+0x110>
 800a6ae:	eba0 0308 	sub.w	r3, r0, r8
 800a6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	9304      	str	r3, [sp, #16]
 800a6ba:	46a2      	mov	sl, r4
 800a6bc:	e7d2      	b.n	800a664 <_svfiprintf_r+0x9c>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	1d19      	adds	r1, r3, #4
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	9103      	str	r1, [sp, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	bfbb      	ittet	lt
 800a6ca:	425b      	neglt	r3, r3
 800a6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d0:	9307      	strge	r3, [sp, #28]
 800a6d2:	9307      	strlt	r3, [sp, #28]
 800a6d4:	bfb8      	it	lt
 800a6d6:	9204      	strlt	r2, [sp, #16]
 800a6d8:	7823      	ldrb	r3, [r4, #0]
 800a6da:	2b2e      	cmp	r3, #46	; 0x2e
 800a6dc:	d10c      	bne.n	800a6f8 <_svfiprintf_r+0x130>
 800a6de:	7863      	ldrb	r3, [r4, #1]
 800a6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e2:	d135      	bne.n	800a750 <_svfiprintf_r+0x188>
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	9203      	str	r2, [sp, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bfb8      	it	lt
 800a6f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a6f4:	3402      	adds	r4, #2
 800a6f6:	9305      	str	r3, [sp, #20]
 800a6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7c4 <_svfiprintf_r+0x1fc>
 800a6fc:	7821      	ldrb	r1, [r4, #0]
 800a6fe:	2203      	movs	r2, #3
 800a700:	4650      	mov	r0, sl
 800a702:	f7f5 fd8d 	bl	8000220 <memchr>
 800a706:	b140      	cbz	r0, 800a71a <_svfiprintf_r+0x152>
 800a708:	2340      	movs	r3, #64	; 0x40
 800a70a:	eba0 000a 	sub.w	r0, r0, sl
 800a70e:	fa03 f000 	lsl.w	r0, r3, r0
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	4303      	orrs	r3, r0
 800a716:	3401      	adds	r4, #1
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71e:	4826      	ldr	r0, [pc, #152]	; (800a7b8 <_svfiprintf_r+0x1f0>)
 800a720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a724:	2206      	movs	r2, #6
 800a726:	f7f5 fd7b 	bl	8000220 <memchr>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d038      	beq.n	800a7a0 <_svfiprintf_r+0x1d8>
 800a72e:	4b23      	ldr	r3, [pc, #140]	; (800a7bc <_svfiprintf_r+0x1f4>)
 800a730:	bb1b      	cbnz	r3, 800a77a <_svfiprintf_r+0x1b2>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	3307      	adds	r3, #7
 800a736:	f023 0307 	bic.w	r3, r3, #7
 800a73a:	3308      	adds	r3, #8
 800a73c:	9303      	str	r3, [sp, #12]
 800a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a740:	4433      	add	r3, r6
 800a742:	9309      	str	r3, [sp, #36]	; 0x24
 800a744:	e767      	b.n	800a616 <_svfiprintf_r+0x4e>
 800a746:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74a:	460c      	mov	r4, r1
 800a74c:	2001      	movs	r0, #1
 800a74e:	e7a5      	b.n	800a69c <_svfiprintf_r+0xd4>
 800a750:	2300      	movs	r3, #0
 800a752:	3401      	adds	r4, #1
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	4619      	mov	r1, r3
 800a758:	f04f 0c0a 	mov.w	ip, #10
 800a75c:	4620      	mov	r0, r4
 800a75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a762:	3a30      	subs	r2, #48	; 0x30
 800a764:	2a09      	cmp	r2, #9
 800a766:	d903      	bls.n	800a770 <_svfiprintf_r+0x1a8>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0c5      	beq.n	800a6f8 <_svfiprintf_r+0x130>
 800a76c:	9105      	str	r1, [sp, #20]
 800a76e:	e7c3      	b.n	800a6f8 <_svfiprintf_r+0x130>
 800a770:	fb0c 2101 	mla	r1, ip, r1, r2
 800a774:	4604      	mov	r4, r0
 800a776:	2301      	movs	r3, #1
 800a778:	e7f0      	b.n	800a75c <_svfiprintf_r+0x194>
 800a77a:	ab03      	add	r3, sp, #12
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	462a      	mov	r2, r5
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <_svfiprintf_r+0x1f8>)
 800a782:	a904      	add	r1, sp, #16
 800a784:	4638      	mov	r0, r7
 800a786:	f7fd ffd9 	bl	800873c <_printf_float>
 800a78a:	1c42      	adds	r2, r0, #1
 800a78c:	4606      	mov	r6, r0
 800a78e:	d1d6      	bne.n	800a73e <_svfiprintf_r+0x176>
 800a790:	89ab      	ldrh	r3, [r5, #12]
 800a792:	065b      	lsls	r3, r3, #25
 800a794:	f53f af2c 	bmi.w	800a5f0 <_svfiprintf_r+0x28>
 800a798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79a:	b01d      	add	sp, #116	; 0x74
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a0:	ab03      	add	r3, sp, #12
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <_svfiprintf_r+0x1f8>)
 800a7a8:	a904      	add	r1, sp, #16
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f7fe fa6a 	bl	8008c84 <_printf_i>
 800a7b0:	e7eb      	b.n	800a78a <_svfiprintf_r+0x1c2>
 800a7b2:	bf00      	nop
 800a7b4:	0800b6fc 	.word	0x0800b6fc
 800a7b8:	0800b706 	.word	0x0800b706
 800a7bc:	0800873d 	.word	0x0800873d
 800a7c0:	0800a511 	.word	0x0800a511
 800a7c4:	0800b702 	.word	0x0800b702

0800a7c8 <_sbrk_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d06      	ldr	r5, [pc, #24]	; (800a7e4 <_sbrk_r+0x1c>)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	f7f7 fa96 	bl	8001d04 <_sbrk>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d102      	bne.n	800a7e2 <_sbrk_r+0x1a>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b103      	cbz	r3, 800a7e2 <_sbrk_r+0x1a>
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	20004d38 	.word	0x20004d38

0800a7e8 <__assert_func>:
 800a7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ea:	4614      	mov	r4, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4b09      	ldr	r3, [pc, #36]	; (800a814 <__assert_func+0x2c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	68d8      	ldr	r0, [r3, #12]
 800a7f6:	b14c      	cbz	r4, 800a80c <__assert_func+0x24>
 800a7f8:	4b07      	ldr	r3, [pc, #28]	; (800a818 <__assert_func+0x30>)
 800a7fa:	9100      	str	r1, [sp, #0]
 800a7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a800:	4906      	ldr	r1, [pc, #24]	; (800a81c <__assert_func+0x34>)
 800a802:	462b      	mov	r3, r5
 800a804:	f000 f80e 	bl	800a824 <fiprintf>
 800a808:	f000 faac 	bl	800ad64 <abort>
 800a80c:	4b04      	ldr	r3, [pc, #16]	; (800a820 <__assert_func+0x38>)
 800a80e:	461c      	mov	r4, r3
 800a810:	e7f3      	b.n	800a7fa <__assert_func+0x12>
 800a812:	bf00      	nop
 800a814:	20000010 	.word	0x20000010
 800a818:	0800b70d 	.word	0x0800b70d
 800a81c:	0800b71a 	.word	0x0800b71a
 800a820:	0800b748 	.word	0x0800b748

0800a824 <fiprintf>:
 800a824:	b40e      	push	{r1, r2, r3}
 800a826:	b503      	push	{r0, r1, lr}
 800a828:	4601      	mov	r1, r0
 800a82a:	ab03      	add	r3, sp, #12
 800a82c:	4805      	ldr	r0, [pc, #20]	; (800a844 <fiprintf+0x20>)
 800a82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a832:	6800      	ldr	r0, [r0, #0]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	f000 f897 	bl	800a968 <_vfiprintf_r>
 800a83a:	b002      	add	sp, #8
 800a83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a840:	b003      	add	sp, #12
 800a842:	4770      	bx	lr
 800a844:	20000010 	.word	0x20000010

0800a848 <__ascii_mbtowc>:
 800a848:	b082      	sub	sp, #8
 800a84a:	b901      	cbnz	r1, 800a84e <__ascii_mbtowc+0x6>
 800a84c:	a901      	add	r1, sp, #4
 800a84e:	b142      	cbz	r2, 800a862 <__ascii_mbtowc+0x1a>
 800a850:	b14b      	cbz	r3, 800a866 <__ascii_mbtowc+0x1e>
 800a852:	7813      	ldrb	r3, [r2, #0]
 800a854:	600b      	str	r3, [r1, #0]
 800a856:	7812      	ldrb	r2, [r2, #0]
 800a858:	1e10      	subs	r0, r2, #0
 800a85a:	bf18      	it	ne
 800a85c:	2001      	movne	r0, #1
 800a85e:	b002      	add	sp, #8
 800a860:	4770      	bx	lr
 800a862:	4610      	mov	r0, r2
 800a864:	e7fb      	b.n	800a85e <__ascii_mbtowc+0x16>
 800a866:	f06f 0001 	mvn.w	r0, #1
 800a86a:	e7f8      	b.n	800a85e <__ascii_mbtowc+0x16>

0800a86c <memmove>:
 800a86c:	4288      	cmp	r0, r1
 800a86e:	b510      	push	{r4, lr}
 800a870:	eb01 0402 	add.w	r4, r1, r2
 800a874:	d902      	bls.n	800a87c <memmove+0x10>
 800a876:	4284      	cmp	r4, r0
 800a878:	4623      	mov	r3, r4
 800a87a:	d807      	bhi.n	800a88c <memmove+0x20>
 800a87c:	1e43      	subs	r3, r0, #1
 800a87e:	42a1      	cmp	r1, r4
 800a880:	d008      	beq.n	800a894 <memmove+0x28>
 800a882:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a88a:	e7f8      	b.n	800a87e <memmove+0x12>
 800a88c:	4402      	add	r2, r0
 800a88e:	4601      	mov	r1, r0
 800a890:	428a      	cmp	r2, r1
 800a892:	d100      	bne.n	800a896 <memmove+0x2a>
 800a894:	bd10      	pop	{r4, pc}
 800a896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a89a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a89e:	e7f7      	b.n	800a890 <memmove+0x24>

0800a8a0 <__malloc_lock>:
 800a8a0:	4801      	ldr	r0, [pc, #4]	; (800a8a8 <__malloc_lock+0x8>)
 800a8a2:	f000 bc1f 	b.w	800b0e4 <__retarget_lock_acquire_recursive>
 800a8a6:	bf00      	nop
 800a8a8:	20004d3c 	.word	0x20004d3c

0800a8ac <__malloc_unlock>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	; (800a8b4 <__malloc_unlock+0x8>)
 800a8ae:	f000 bc1a 	b.w	800b0e6 <__retarget_lock_release_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20004d3c 	.word	0x20004d3c

0800a8b8 <_realloc_r>:
 800a8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8bc:	4680      	mov	r8, r0
 800a8be:	4614      	mov	r4, r2
 800a8c0:	460e      	mov	r6, r1
 800a8c2:	b921      	cbnz	r1, 800a8ce <_realloc_r+0x16>
 800a8c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	f7ff bdad 	b.w	800a428 <_malloc_r>
 800a8ce:	b92a      	cbnz	r2, 800a8dc <_realloc_r+0x24>
 800a8d0:	f7ff fd3e 	bl	800a350 <_free_r>
 800a8d4:	4625      	mov	r5, r4
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8dc:	f000 fc6a 	bl	800b1b4 <_malloc_usable_size_r>
 800a8e0:	4284      	cmp	r4, r0
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	d802      	bhi.n	800a8ec <_realloc_r+0x34>
 800a8e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8ea:	d812      	bhi.n	800a912 <_realloc_r+0x5a>
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff fd9a 	bl	800a428 <_malloc_r>
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d0ed      	beq.n	800a8d6 <_realloc_r+0x1e>
 800a8fa:	42bc      	cmp	r4, r7
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4631      	mov	r1, r6
 800a900:	bf28      	it	cs
 800a902:	463a      	movcs	r2, r7
 800a904:	f7fd fe64 	bl	80085d0 <memcpy>
 800a908:	4631      	mov	r1, r6
 800a90a:	4640      	mov	r0, r8
 800a90c:	f7ff fd20 	bl	800a350 <_free_r>
 800a910:	e7e1      	b.n	800a8d6 <_realloc_r+0x1e>
 800a912:	4635      	mov	r5, r6
 800a914:	e7df      	b.n	800a8d6 <_realloc_r+0x1e>

0800a916 <__sfputc_r>:
 800a916:	6893      	ldr	r3, [r2, #8]
 800a918:	3b01      	subs	r3, #1
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	b410      	push	{r4}
 800a91e:	6093      	str	r3, [r2, #8]
 800a920:	da08      	bge.n	800a934 <__sfputc_r+0x1e>
 800a922:	6994      	ldr	r4, [r2, #24]
 800a924:	42a3      	cmp	r3, r4
 800a926:	db01      	blt.n	800a92c <__sfputc_r+0x16>
 800a928:	290a      	cmp	r1, #10
 800a92a:	d103      	bne.n	800a934 <__sfputc_r+0x1e>
 800a92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a930:	f000 b94a 	b.w	800abc8 <__swbuf_r>
 800a934:	6813      	ldr	r3, [r2, #0]
 800a936:	1c58      	adds	r0, r3, #1
 800a938:	6010      	str	r0, [r2, #0]
 800a93a:	7019      	strb	r1, [r3, #0]
 800a93c:	4608      	mov	r0, r1
 800a93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <__sfputs_r>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	4606      	mov	r6, r0
 800a948:	460f      	mov	r7, r1
 800a94a:	4614      	mov	r4, r2
 800a94c:	18d5      	adds	r5, r2, r3
 800a94e:	42ac      	cmp	r4, r5
 800a950:	d101      	bne.n	800a956 <__sfputs_r+0x12>
 800a952:	2000      	movs	r0, #0
 800a954:	e007      	b.n	800a966 <__sfputs_r+0x22>
 800a956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95a:	463a      	mov	r2, r7
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff ffda 	bl	800a916 <__sfputc_r>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	d1f3      	bne.n	800a94e <__sfputs_r+0xa>
 800a966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a968 <_vfiprintf_r>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	460d      	mov	r5, r1
 800a96e:	b09d      	sub	sp, #116	; 0x74
 800a970:	4614      	mov	r4, r2
 800a972:	4698      	mov	r8, r3
 800a974:	4606      	mov	r6, r0
 800a976:	b118      	cbz	r0, 800a980 <_vfiprintf_r+0x18>
 800a978:	6983      	ldr	r3, [r0, #24]
 800a97a:	b90b      	cbnz	r3, 800a980 <_vfiprintf_r+0x18>
 800a97c:	f000 fb14 	bl	800afa8 <__sinit>
 800a980:	4b89      	ldr	r3, [pc, #548]	; (800aba8 <_vfiprintf_r+0x240>)
 800a982:	429d      	cmp	r5, r3
 800a984:	d11b      	bne.n	800a9be <_vfiprintf_r+0x56>
 800a986:	6875      	ldr	r5, [r6, #4]
 800a988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a98a:	07d9      	lsls	r1, r3, #31
 800a98c:	d405      	bmi.n	800a99a <_vfiprintf_r+0x32>
 800a98e:	89ab      	ldrh	r3, [r5, #12]
 800a990:	059a      	lsls	r2, r3, #22
 800a992:	d402      	bmi.n	800a99a <_vfiprintf_r+0x32>
 800a994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a996:	f000 fba5 	bl	800b0e4 <__retarget_lock_acquire_recursive>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	071b      	lsls	r3, r3, #28
 800a99e:	d501      	bpl.n	800a9a4 <_vfiprintf_r+0x3c>
 800a9a0:	692b      	ldr	r3, [r5, #16]
 800a9a2:	b9eb      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x78>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f000 f96e 	bl	800ac88 <__swsetup_r>
 800a9ac:	b1c0      	cbz	r0, 800a9e0 <_vfiprintf_r+0x78>
 800a9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b0:	07dc      	lsls	r4, r3, #31
 800a9b2:	d50e      	bpl.n	800a9d2 <_vfiprintf_r+0x6a>
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9b8:	b01d      	add	sp, #116	; 0x74
 800a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9be:	4b7b      	ldr	r3, [pc, #492]	; (800abac <_vfiprintf_r+0x244>)
 800a9c0:	429d      	cmp	r5, r3
 800a9c2:	d101      	bne.n	800a9c8 <_vfiprintf_r+0x60>
 800a9c4:	68b5      	ldr	r5, [r6, #8]
 800a9c6:	e7df      	b.n	800a988 <_vfiprintf_r+0x20>
 800a9c8:	4b79      	ldr	r3, [pc, #484]	; (800abb0 <_vfiprintf_r+0x248>)
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	bf08      	it	eq
 800a9ce:	68f5      	ldreq	r5, [r6, #12]
 800a9d0:	e7da      	b.n	800a988 <_vfiprintf_r+0x20>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	0598      	lsls	r0, r3, #22
 800a9d6:	d4ed      	bmi.n	800a9b4 <_vfiprintf_r+0x4c>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9da:	f000 fb84 	bl	800b0e6 <__retarget_lock_release_recursive>
 800a9de:	e7e9      	b.n	800a9b4 <_vfiprintf_r+0x4c>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e4:	2320      	movs	r3, #32
 800a9e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ee:	2330      	movs	r3, #48	; 0x30
 800a9f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abb4 <_vfiprintf_r+0x24c>
 800a9f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9f8:	f04f 0901 	mov.w	r9, #1
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	469a      	mov	sl, r3
 800aa00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa04:	b10a      	cbz	r2, 800aa0a <_vfiprintf_r+0xa2>
 800aa06:	2a25      	cmp	r2, #37	; 0x25
 800aa08:	d1f9      	bne.n	800a9fe <_vfiprintf_r+0x96>
 800aa0a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa0e:	d00b      	beq.n	800aa28 <_vfiprintf_r+0xc0>
 800aa10:	465b      	mov	r3, fp
 800aa12:	4622      	mov	r2, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ff94 	bl	800a944 <__sfputs_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f000 80aa 	beq.w	800ab76 <_vfiprintf_r+0x20e>
 800aa22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa24:	445a      	add	r2, fp
 800aa26:	9209      	str	r2, [sp, #36]	; 0x24
 800aa28:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80a2 	beq.w	800ab76 <_vfiprintf_r+0x20e>
 800aa32:	2300      	movs	r3, #0
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa3c:	f10a 0a01 	add.w	sl, sl, #1
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa48:	931a      	str	r3, [sp, #104]	; 0x68
 800aa4a:	4654      	mov	r4, sl
 800aa4c:	2205      	movs	r2, #5
 800aa4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa52:	4858      	ldr	r0, [pc, #352]	; (800abb4 <_vfiprintf_r+0x24c>)
 800aa54:	f7f5 fbe4 	bl	8000220 <memchr>
 800aa58:	9a04      	ldr	r2, [sp, #16]
 800aa5a:	b9d8      	cbnz	r0, 800aa94 <_vfiprintf_r+0x12c>
 800aa5c:	06d1      	lsls	r1, r2, #27
 800aa5e:	bf44      	itt	mi
 800aa60:	2320      	movmi	r3, #32
 800aa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa66:	0713      	lsls	r3, r2, #28
 800aa68:	bf44      	itt	mi
 800aa6a:	232b      	movmi	r3, #43	; 0x2b
 800aa6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa70:	f89a 3000 	ldrb.w	r3, [sl]
 800aa74:	2b2a      	cmp	r3, #42	; 0x2a
 800aa76:	d015      	beq.n	800aaa4 <_vfiprintf_r+0x13c>
 800aa78:	9a07      	ldr	r2, [sp, #28]
 800aa7a:	4654      	mov	r4, sl
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	f04f 0c0a 	mov.w	ip, #10
 800aa82:	4621      	mov	r1, r4
 800aa84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa88:	3b30      	subs	r3, #48	; 0x30
 800aa8a:	2b09      	cmp	r3, #9
 800aa8c:	d94e      	bls.n	800ab2c <_vfiprintf_r+0x1c4>
 800aa8e:	b1b0      	cbz	r0, 800aabe <_vfiprintf_r+0x156>
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	e014      	b.n	800aabe <_vfiprintf_r+0x156>
 800aa94:	eba0 0308 	sub.w	r3, r0, r8
 800aa98:	fa09 f303 	lsl.w	r3, r9, r3
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	46a2      	mov	sl, r4
 800aaa2:	e7d2      	b.n	800aa4a <_vfiprintf_r+0xe2>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1d19      	adds	r1, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	9103      	str	r1, [sp, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfbb      	ittet	lt
 800aab0:	425b      	neglt	r3, r3
 800aab2:	f042 0202 	orrlt.w	r2, r2, #2
 800aab6:	9307      	strge	r3, [sp, #28]
 800aab8:	9307      	strlt	r3, [sp, #28]
 800aaba:	bfb8      	it	lt
 800aabc:	9204      	strlt	r2, [sp, #16]
 800aabe:	7823      	ldrb	r3, [r4, #0]
 800aac0:	2b2e      	cmp	r3, #46	; 0x2e
 800aac2:	d10c      	bne.n	800aade <_vfiprintf_r+0x176>
 800aac4:	7863      	ldrb	r3, [r4, #1]
 800aac6:	2b2a      	cmp	r3, #42	; 0x2a
 800aac8:	d135      	bne.n	800ab36 <_vfiprintf_r+0x1ce>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	1d1a      	adds	r2, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	9203      	str	r2, [sp, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfb8      	it	lt
 800aad6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aada:	3402      	adds	r4, #2
 800aadc:	9305      	str	r3, [sp, #20]
 800aade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abc4 <_vfiprintf_r+0x25c>
 800aae2:	7821      	ldrb	r1, [r4, #0]
 800aae4:	2203      	movs	r2, #3
 800aae6:	4650      	mov	r0, sl
 800aae8:	f7f5 fb9a 	bl	8000220 <memchr>
 800aaec:	b140      	cbz	r0, 800ab00 <_vfiprintf_r+0x198>
 800aaee:	2340      	movs	r3, #64	; 0x40
 800aaf0:	eba0 000a 	sub.w	r0, r0, sl
 800aaf4:	fa03 f000 	lsl.w	r0, r3, r0
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	4303      	orrs	r3, r0
 800aafc:	3401      	adds	r4, #1
 800aafe:	9304      	str	r3, [sp, #16]
 800ab00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab04:	482c      	ldr	r0, [pc, #176]	; (800abb8 <_vfiprintf_r+0x250>)
 800ab06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab0a:	2206      	movs	r2, #6
 800ab0c:	f7f5 fb88 	bl	8000220 <memchr>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d03f      	beq.n	800ab94 <_vfiprintf_r+0x22c>
 800ab14:	4b29      	ldr	r3, [pc, #164]	; (800abbc <_vfiprintf_r+0x254>)
 800ab16:	bb1b      	cbnz	r3, 800ab60 <_vfiprintf_r+0x1f8>
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	3307      	adds	r3, #7
 800ab1c:	f023 0307 	bic.w	r3, r3, #7
 800ab20:	3308      	adds	r3, #8
 800ab22:	9303      	str	r3, [sp, #12]
 800ab24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab26:	443b      	add	r3, r7
 800ab28:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2a:	e767      	b.n	800a9fc <_vfiprintf_r+0x94>
 800ab2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab30:	460c      	mov	r4, r1
 800ab32:	2001      	movs	r0, #1
 800ab34:	e7a5      	b.n	800aa82 <_vfiprintf_r+0x11a>
 800ab36:	2300      	movs	r3, #0
 800ab38:	3401      	adds	r4, #1
 800ab3a:	9305      	str	r3, [sp, #20]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	f04f 0c0a 	mov.w	ip, #10
 800ab42:	4620      	mov	r0, r4
 800ab44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab48:	3a30      	subs	r2, #48	; 0x30
 800ab4a:	2a09      	cmp	r2, #9
 800ab4c:	d903      	bls.n	800ab56 <_vfiprintf_r+0x1ee>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0c5      	beq.n	800aade <_vfiprintf_r+0x176>
 800ab52:	9105      	str	r1, [sp, #20]
 800ab54:	e7c3      	b.n	800aade <_vfiprintf_r+0x176>
 800ab56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e7f0      	b.n	800ab42 <_vfiprintf_r+0x1da>
 800ab60:	ab03      	add	r3, sp, #12
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	462a      	mov	r2, r5
 800ab66:	4b16      	ldr	r3, [pc, #88]	; (800abc0 <_vfiprintf_r+0x258>)
 800ab68:	a904      	add	r1, sp, #16
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f7fd fde6 	bl	800873c <_printf_float>
 800ab70:	4607      	mov	r7, r0
 800ab72:	1c78      	adds	r0, r7, #1
 800ab74:	d1d6      	bne.n	800ab24 <_vfiprintf_r+0x1bc>
 800ab76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab78:	07d9      	lsls	r1, r3, #31
 800ab7a:	d405      	bmi.n	800ab88 <_vfiprintf_r+0x220>
 800ab7c:	89ab      	ldrh	r3, [r5, #12]
 800ab7e:	059a      	lsls	r2, r3, #22
 800ab80:	d402      	bmi.n	800ab88 <_vfiprintf_r+0x220>
 800ab82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab84:	f000 faaf 	bl	800b0e6 <__retarget_lock_release_recursive>
 800ab88:	89ab      	ldrh	r3, [r5, #12]
 800ab8a:	065b      	lsls	r3, r3, #25
 800ab8c:	f53f af12 	bmi.w	800a9b4 <_vfiprintf_r+0x4c>
 800ab90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab92:	e711      	b.n	800a9b8 <_vfiprintf_r+0x50>
 800ab94:	ab03      	add	r3, sp, #12
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	462a      	mov	r2, r5
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <_vfiprintf_r+0x258>)
 800ab9c:	a904      	add	r1, sp, #16
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7fe f870 	bl	8008c84 <_printf_i>
 800aba4:	e7e4      	b.n	800ab70 <_vfiprintf_r+0x208>
 800aba6:	bf00      	nop
 800aba8:	0800b874 	.word	0x0800b874
 800abac:	0800b894 	.word	0x0800b894
 800abb0:	0800b854 	.word	0x0800b854
 800abb4:	0800b6fc 	.word	0x0800b6fc
 800abb8:	0800b706 	.word	0x0800b706
 800abbc:	0800873d 	.word	0x0800873d
 800abc0:	0800a945 	.word	0x0800a945
 800abc4:	0800b702 	.word	0x0800b702

0800abc8 <__swbuf_r>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	460e      	mov	r6, r1
 800abcc:	4614      	mov	r4, r2
 800abce:	4605      	mov	r5, r0
 800abd0:	b118      	cbz	r0, 800abda <__swbuf_r+0x12>
 800abd2:	6983      	ldr	r3, [r0, #24]
 800abd4:	b90b      	cbnz	r3, 800abda <__swbuf_r+0x12>
 800abd6:	f000 f9e7 	bl	800afa8 <__sinit>
 800abda:	4b21      	ldr	r3, [pc, #132]	; (800ac60 <__swbuf_r+0x98>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	d12b      	bne.n	800ac38 <__swbuf_r+0x70>
 800abe0:	686c      	ldr	r4, [r5, #4]
 800abe2:	69a3      	ldr	r3, [r4, #24]
 800abe4:	60a3      	str	r3, [r4, #8]
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	071a      	lsls	r2, r3, #28
 800abea:	d52f      	bpl.n	800ac4c <__swbuf_r+0x84>
 800abec:	6923      	ldr	r3, [r4, #16]
 800abee:	b36b      	cbz	r3, 800ac4c <__swbuf_r+0x84>
 800abf0:	6923      	ldr	r3, [r4, #16]
 800abf2:	6820      	ldr	r0, [r4, #0]
 800abf4:	1ac0      	subs	r0, r0, r3
 800abf6:	6963      	ldr	r3, [r4, #20]
 800abf8:	b2f6      	uxtb	r6, r6
 800abfa:	4283      	cmp	r3, r0
 800abfc:	4637      	mov	r7, r6
 800abfe:	dc04      	bgt.n	800ac0a <__swbuf_r+0x42>
 800ac00:	4621      	mov	r1, r4
 800ac02:	4628      	mov	r0, r5
 800ac04:	f000 f93c 	bl	800ae80 <_fflush_r>
 800ac08:	bb30      	cbnz	r0, 800ac58 <__swbuf_r+0x90>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	60a3      	str	r3, [r4, #8]
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	6022      	str	r2, [r4, #0]
 800ac16:	701e      	strb	r6, [r3, #0]
 800ac18:	6963      	ldr	r3, [r4, #20]
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	4283      	cmp	r3, r0
 800ac1e:	d004      	beq.n	800ac2a <__swbuf_r+0x62>
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	07db      	lsls	r3, r3, #31
 800ac24:	d506      	bpl.n	800ac34 <__swbuf_r+0x6c>
 800ac26:	2e0a      	cmp	r6, #10
 800ac28:	d104      	bne.n	800ac34 <__swbuf_r+0x6c>
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f000 f927 	bl	800ae80 <_fflush_r>
 800ac32:	b988      	cbnz	r0, 800ac58 <__swbuf_r+0x90>
 800ac34:	4638      	mov	r0, r7
 800ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <__swbuf_r+0x9c>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d101      	bne.n	800ac42 <__swbuf_r+0x7a>
 800ac3e:	68ac      	ldr	r4, [r5, #8]
 800ac40:	e7cf      	b.n	800abe2 <__swbuf_r+0x1a>
 800ac42:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <__swbuf_r+0xa0>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	bf08      	it	eq
 800ac48:	68ec      	ldreq	r4, [r5, #12]
 800ac4a:	e7ca      	b.n	800abe2 <__swbuf_r+0x1a>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 f81a 	bl	800ac88 <__swsetup_r>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d0cb      	beq.n	800abf0 <__swbuf_r+0x28>
 800ac58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac5c:	e7ea      	b.n	800ac34 <__swbuf_r+0x6c>
 800ac5e:	bf00      	nop
 800ac60:	0800b874 	.word	0x0800b874
 800ac64:	0800b894 	.word	0x0800b894
 800ac68:	0800b854 	.word	0x0800b854

0800ac6c <__ascii_wctomb>:
 800ac6c:	b149      	cbz	r1, 800ac82 <__ascii_wctomb+0x16>
 800ac6e:	2aff      	cmp	r2, #255	; 0xff
 800ac70:	bf85      	ittet	hi
 800ac72:	238a      	movhi	r3, #138	; 0x8a
 800ac74:	6003      	strhi	r3, [r0, #0]
 800ac76:	700a      	strbls	r2, [r1, #0]
 800ac78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac7c:	bf98      	it	ls
 800ac7e:	2001      	movls	r0, #1
 800ac80:	4770      	bx	lr
 800ac82:	4608      	mov	r0, r1
 800ac84:	4770      	bx	lr
	...

0800ac88 <__swsetup_r>:
 800ac88:	4b32      	ldr	r3, [pc, #200]	; (800ad54 <__swsetup_r+0xcc>)
 800ac8a:	b570      	push	{r4, r5, r6, lr}
 800ac8c:	681d      	ldr	r5, [r3, #0]
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	b125      	cbz	r5, 800ac9e <__swsetup_r+0x16>
 800ac94:	69ab      	ldr	r3, [r5, #24]
 800ac96:	b913      	cbnz	r3, 800ac9e <__swsetup_r+0x16>
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f000 f985 	bl	800afa8 <__sinit>
 800ac9e:	4b2e      	ldr	r3, [pc, #184]	; (800ad58 <__swsetup_r+0xd0>)
 800aca0:	429c      	cmp	r4, r3
 800aca2:	d10f      	bne.n	800acc4 <__swsetup_r+0x3c>
 800aca4:	686c      	ldr	r4, [r5, #4]
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acac:	0719      	lsls	r1, r3, #28
 800acae:	d42c      	bmi.n	800ad0a <__swsetup_r+0x82>
 800acb0:	06dd      	lsls	r5, r3, #27
 800acb2:	d411      	bmi.n	800acd8 <__swsetup_r+0x50>
 800acb4:	2309      	movs	r3, #9
 800acb6:	6033      	str	r3, [r6, #0]
 800acb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acbc:	81a3      	strh	r3, [r4, #12]
 800acbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acc2:	e03e      	b.n	800ad42 <__swsetup_r+0xba>
 800acc4:	4b25      	ldr	r3, [pc, #148]	; (800ad5c <__swsetup_r+0xd4>)
 800acc6:	429c      	cmp	r4, r3
 800acc8:	d101      	bne.n	800acce <__swsetup_r+0x46>
 800acca:	68ac      	ldr	r4, [r5, #8]
 800accc:	e7eb      	b.n	800aca6 <__swsetup_r+0x1e>
 800acce:	4b24      	ldr	r3, [pc, #144]	; (800ad60 <__swsetup_r+0xd8>)
 800acd0:	429c      	cmp	r4, r3
 800acd2:	bf08      	it	eq
 800acd4:	68ec      	ldreq	r4, [r5, #12]
 800acd6:	e7e6      	b.n	800aca6 <__swsetup_r+0x1e>
 800acd8:	0758      	lsls	r0, r3, #29
 800acda:	d512      	bpl.n	800ad02 <__swsetup_r+0x7a>
 800acdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acde:	b141      	cbz	r1, 800acf2 <__swsetup_r+0x6a>
 800ace0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ace4:	4299      	cmp	r1, r3
 800ace6:	d002      	beq.n	800acee <__swsetup_r+0x66>
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff fb31 	bl	800a350 <_free_r>
 800acee:	2300      	movs	r3, #0
 800acf0:	6363      	str	r3, [r4, #52]	; 0x34
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	2300      	movs	r3, #0
 800acfc:	6063      	str	r3, [r4, #4]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f043 0308 	orr.w	r3, r3, #8
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	b94b      	cbnz	r3, 800ad22 <__swsetup_r+0x9a>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad18:	d003      	beq.n	800ad22 <__swsetup_r+0x9a>
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 fa09 	bl	800b134 <__smakebuf_r>
 800ad22:	89a0      	ldrh	r0, [r4, #12]
 800ad24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad28:	f010 0301 	ands.w	r3, r0, #1
 800ad2c:	d00a      	beq.n	800ad44 <__swsetup_r+0xbc>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60a3      	str	r3, [r4, #8]
 800ad32:	6963      	ldr	r3, [r4, #20]
 800ad34:	425b      	negs	r3, r3
 800ad36:	61a3      	str	r3, [r4, #24]
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	b943      	cbnz	r3, 800ad4e <__swsetup_r+0xc6>
 800ad3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad40:	d1ba      	bne.n	800acb8 <__swsetup_r+0x30>
 800ad42:	bd70      	pop	{r4, r5, r6, pc}
 800ad44:	0781      	lsls	r1, r0, #30
 800ad46:	bf58      	it	pl
 800ad48:	6963      	ldrpl	r3, [r4, #20]
 800ad4a:	60a3      	str	r3, [r4, #8]
 800ad4c:	e7f4      	b.n	800ad38 <__swsetup_r+0xb0>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	e7f7      	b.n	800ad42 <__swsetup_r+0xba>
 800ad52:	bf00      	nop
 800ad54:	20000010 	.word	0x20000010
 800ad58:	0800b874 	.word	0x0800b874
 800ad5c:	0800b894 	.word	0x0800b894
 800ad60:	0800b854 	.word	0x0800b854

0800ad64 <abort>:
 800ad64:	b508      	push	{r3, lr}
 800ad66:	2006      	movs	r0, #6
 800ad68:	f000 fa54 	bl	800b214 <raise>
 800ad6c:	2001      	movs	r0, #1
 800ad6e:	f7f6 ff51 	bl	8001c14 <_exit>
	...

0800ad74 <__sflush_r>:
 800ad74:	898a      	ldrh	r2, [r1, #12]
 800ad76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	0710      	lsls	r0, r2, #28
 800ad7e:	460c      	mov	r4, r1
 800ad80:	d458      	bmi.n	800ae34 <__sflush_r+0xc0>
 800ad82:	684b      	ldr	r3, [r1, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dc05      	bgt.n	800ad94 <__sflush_r+0x20>
 800ad88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dc02      	bgt.n	800ad94 <__sflush_r+0x20>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad96:	2e00      	cmp	r6, #0
 800ad98:	d0f9      	beq.n	800ad8e <__sflush_r+0x1a>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ada0:	682f      	ldr	r7, [r5, #0]
 800ada2:	602b      	str	r3, [r5, #0]
 800ada4:	d032      	beq.n	800ae0c <__sflush_r+0x98>
 800ada6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	075a      	lsls	r2, r3, #29
 800adac:	d505      	bpl.n	800adba <__sflush_r+0x46>
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	1ac0      	subs	r0, r0, r3
 800adb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adb4:	b10b      	cbz	r3, 800adba <__sflush_r+0x46>
 800adb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adb8:	1ac0      	subs	r0, r0, r3
 800adba:	2300      	movs	r3, #0
 800adbc:	4602      	mov	r2, r0
 800adbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adc0:	6a21      	ldr	r1, [r4, #32]
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b0      	blx	r6
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	d106      	bne.n	800adda <__sflush_r+0x66>
 800adcc:	6829      	ldr	r1, [r5, #0]
 800adce:	291d      	cmp	r1, #29
 800add0:	d82c      	bhi.n	800ae2c <__sflush_r+0xb8>
 800add2:	4a2a      	ldr	r2, [pc, #168]	; (800ae7c <__sflush_r+0x108>)
 800add4:	40ca      	lsrs	r2, r1
 800add6:	07d6      	lsls	r6, r2, #31
 800add8:	d528      	bpl.n	800ae2c <__sflush_r+0xb8>
 800adda:	2200      	movs	r2, #0
 800addc:	6062      	str	r2, [r4, #4]
 800adde:	04d9      	lsls	r1, r3, #19
 800ade0:	6922      	ldr	r2, [r4, #16]
 800ade2:	6022      	str	r2, [r4, #0]
 800ade4:	d504      	bpl.n	800adf0 <__sflush_r+0x7c>
 800ade6:	1c42      	adds	r2, r0, #1
 800ade8:	d101      	bne.n	800adee <__sflush_r+0x7a>
 800adea:	682b      	ldr	r3, [r5, #0]
 800adec:	b903      	cbnz	r3, 800adf0 <__sflush_r+0x7c>
 800adee:	6560      	str	r0, [r4, #84]	; 0x54
 800adf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf2:	602f      	str	r7, [r5, #0]
 800adf4:	2900      	cmp	r1, #0
 800adf6:	d0ca      	beq.n	800ad8e <__sflush_r+0x1a>
 800adf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adfc:	4299      	cmp	r1, r3
 800adfe:	d002      	beq.n	800ae06 <__sflush_r+0x92>
 800ae00:	4628      	mov	r0, r5
 800ae02:	f7ff faa5 	bl	800a350 <_free_r>
 800ae06:	2000      	movs	r0, #0
 800ae08:	6360      	str	r0, [r4, #52]	; 0x34
 800ae0a:	e7c1      	b.n	800ad90 <__sflush_r+0x1c>
 800ae0c:	6a21      	ldr	r1, [r4, #32]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4628      	mov	r0, r5
 800ae12:	47b0      	blx	r6
 800ae14:	1c41      	adds	r1, r0, #1
 800ae16:	d1c7      	bne.n	800ada8 <__sflush_r+0x34>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0c4      	beq.n	800ada8 <__sflush_r+0x34>
 800ae1e:	2b1d      	cmp	r3, #29
 800ae20:	d001      	beq.n	800ae26 <__sflush_r+0xb2>
 800ae22:	2b16      	cmp	r3, #22
 800ae24:	d101      	bne.n	800ae2a <__sflush_r+0xb6>
 800ae26:	602f      	str	r7, [r5, #0]
 800ae28:	e7b1      	b.n	800ad8e <__sflush_r+0x1a>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	e7ad      	b.n	800ad90 <__sflush_r+0x1c>
 800ae34:	690f      	ldr	r7, [r1, #16]
 800ae36:	2f00      	cmp	r7, #0
 800ae38:	d0a9      	beq.n	800ad8e <__sflush_r+0x1a>
 800ae3a:	0793      	lsls	r3, r2, #30
 800ae3c:	680e      	ldr	r6, [r1, #0]
 800ae3e:	bf08      	it	eq
 800ae40:	694b      	ldreq	r3, [r1, #20]
 800ae42:	600f      	str	r7, [r1, #0]
 800ae44:	bf18      	it	ne
 800ae46:	2300      	movne	r3, #0
 800ae48:	eba6 0807 	sub.w	r8, r6, r7
 800ae4c:	608b      	str	r3, [r1, #8]
 800ae4e:	f1b8 0f00 	cmp.w	r8, #0
 800ae52:	dd9c      	ble.n	800ad8e <__sflush_r+0x1a>
 800ae54:	6a21      	ldr	r1, [r4, #32]
 800ae56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae58:	4643      	mov	r3, r8
 800ae5a:	463a      	mov	r2, r7
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b0      	blx	r6
 800ae60:	2800      	cmp	r0, #0
 800ae62:	dc06      	bgt.n	800ae72 <__sflush_r+0xfe>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae70:	e78e      	b.n	800ad90 <__sflush_r+0x1c>
 800ae72:	4407      	add	r7, r0
 800ae74:	eba8 0800 	sub.w	r8, r8, r0
 800ae78:	e7e9      	b.n	800ae4e <__sflush_r+0xda>
 800ae7a:	bf00      	nop
 800ae7c:	20400001 	.word	0x20400001

0800ae80 <_fflush_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	690b      	ldr	r3, [r1, #16]
 800ae84:	4605      	mov	r5, r0
 800ae86:	460c      	mov	r4, r1
 800ae88:	b913      	cbnz	r3, 800ae90 <_fflush_r+0x10>
 800ae8a:	2500      	movs	r5, #0
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	b118      	cbz	r0, 800ae9a <_fflush_r+0x1a>
 800ae92:	6983      	ldr	r3, [r0, #24]
 800ae94:	b90b      	cbnz	r3, 800ae9a <_fflush_r+0x1a>
 800ae96:	f000 f887 	bl	800afa8 <__sinit>
 800ae9a:	4b14      	ldr	r3, [pc, #80]	; (800aeec <_fflush_r+0x6c>)
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d11b      	bne.n	800aed8 <_fflush_r+0x58>
 800aea0:	686c      	ldr	r4, [r5, #4]
 800aea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0ef      	beq.n	800ae8a <_fflush_r+0xa>
 800aeaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeac:	07d0      	lsls	r0, r2, #31
 800aeae:	d404      	bmi.n	800aeba <_fflush_r+0x3a>
 800aeb0:	0599      	lsls	r1, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_fflush_r+0x3a>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb6:	f000 f915 	bl	800b0e4 <__retarget_lock_acquire_recursive>
 800aeba:	4628      	mov	r0, r5
 800aebc:	4621      	mov	r1, r4
 800aebe:	f7ff ff59 	bl	800ad74 <__sflush_r>
 800aec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aec4:	07da      	lsls	r2, r3, #31
 800aec6:	4605      	mov	r5, r0
 800aec8:	d4e0      	bmi.n	800ae8c <_fflush_r+0xc>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	059b      	lsls	r3, r3, #22
 800aece:	d4dd      	bmi.n	800ae8c <_fflush_r+0xc>
 800aed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aed2:	f000 f908 	bl	800b0e6 <__retarget_lock_release_recursive>
 800aed6:	e7d9      	b.n	800ae8c <_fflush_r+0xc>
 800aed8:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <_fflush_r+0x70>)
 800aeda:	429c      	cmp	r4, r3
 800aedc:	d101      	bne.n	800aee2 <_fflush_r+0x62>
 800aede:	68ac      	ldr	r4, [r5, #8]
 800aee0:	e7df      	b.n	800aea2 <_fflush_r+0x22>
 800aee2:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <_fflush_r+0x74>)
 800aee4:	429c      	cmp	r4, r3
 800aee6:	bf08      	it	eq
 800aee8:	68ec      	ldreq	r4, [r5, #12]
 800aeea:	e7da      	b.n	800aea2 <_fflush_r+0x22>
 800aeec:	0800b874 	.word	0x0800b874
 800aef0:	0800b894 	.word	0x0800b894
 800aef4:	0800b854 	.word	0x0800b854

0800aef8 <std>:
 800aef8:	2300      	movs	r3, #0
 800aefa:	b510      	push	{r4, lr}
 800aefc:	4604      	mov	r4, r0
 800aefe:	e9c0 3300 	strd	r3, r3, [r0]
 800af02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af06:	6083      	str	r3, [r0, #8]
 800af08:	8181      	strh	r1, [r0, #12]
 800af0a:	6643      	str	r3, [r0, #100]	; 0x64
 800af0c:	81c2      	strh	r2, [r0, #14]
 800af0e:	6183      	str	r3, [r0, #24]
 800af10:	4619      	mov	r1, r3
 800af12:	2208      	movs	r2, #8
 800af14:	305c      	adds	r0, #92	; 0x5c
 800af16:	f7fd fb69 	bl	80085ec <memset>
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <std+0x38>)
 800af1c:	6263      	str	r3, [r4, #36]	; 0x24
 800af1e:	4b05      	ldr	r3, [pc, #20]	; (800af34 <std+0x3c>)
 800af20:	62a3      	str	r3, [r4, #40]	; 0x28
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <std+0x40>)
 800af24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <std+0x44>)
 800af28:	6224      	str	r4, [r4, #32]
 800af2a:	6323      	str	r3, [r4, #48]	; 0x30
 800af2c:	bd10      	pop	{r4, pc}
 800af2e:	bf00      	nop
 800af30:	0800b24d 	.word	0x0800b24d
 800af34:	0800b26f 	.word	0x0800b26f
 800af38:	0800b2a7 	.word	0x0800b2a7
 800af3c:	0800b2cb 	.word	0x0800b2cb

0800af40 <_cleanup_r>:
 800af40:	4901      	ldr	r1, [pc, #4]	; (800af48 <_cleanup_r+0x8>)
 800af42:	f000 b8af 	b.w	800b0a4 <_fwalk_reent>
 800af46:	bf00      	nop
 800af48:	0800ae81 	.word	0x0800ae81

0800af4c <__sfmoreglue>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	2268      	movs	r2, #104	; 0x68
 800af50:	1e4d      	subs	r5, r1, #1
 800af52:	4355      	muls	r5, r2
 800af54:	460e      	mov	r6, r1
 800af56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af5a:	f7ff fa65 	bl	800a428 <_malloc_r>
 800af5e:	4604      	mov	r4, r0
 800af60:	b140      	cbz	r0, 800af74 <__sfmoreglue+0x28>
 800af62:	2100      	movs	r1, #0
 800af64:	e9c0 1600 	strd	r1, r6, [r0]
 800af68:	300c      	adds	r0, #12
 800af6a:	60a0      	str	r0, [r4, #8]
 800af6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af70:	f7fd fb3c 	bl	80085ec <memset>
 800af74:	4620      	mov	r0, r4
 800af76:	bd70      	pop	{r4, r5, r6, pc}

0800af78 <__sfp_lock_acquire>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__sfp_lock_acquire+0x8>)
 800af7a:	f000 b8b3 	b.w	800b0e4 <__retarget_lock_acquire_recursive>
 800af7e:	bf00      	nop
 800af80:	20004d3d 	.word	0x20004d3d

0800af84 <__sfp_lock_release>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__sfp_lock_release+0x8>)
 800af86:	f000 b8ae 	b.w	800b0e6 <__retarget_lock_release_recursive>
 800af8a:	bf00      	nop
 800af8c:	20004d3d 	.word	0x20004d3d

0800af90 <__sinit_lock_acquire>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__sinit_lock_acquire+0x8>)
 800af92:	f000 b8a7 	b.w	800b0e4 <__retarget_lock_acquire_recursive>
 800af96:	bf00      	nop
 800af98:	20004d3e 	.word	0x20004d3e

0800af9c <__sinit_lock_release>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__sinit_lock_release+0x8>)
 800af9e:	f000 b8a2 	b.w	800b0e6 <__retarget_lock_release_recursive>
 800afa2:	bf00      	nop
 800afa4:	20004d3e 	.word	0x20004d3e

0800afa8 <__sinit>:
 800afa8:	b510      	push	{r4, lr}
 800afaa:	4604      	mov	r4, r0
 800afac:	f7ff fff0 	bl	800af90 <__sinit_lock_acquire>
 800afb0:	69a3      	ldr	r3, [r4, #24]
 800afb2:	b11b      	cbz	r3, 800afbc <__sinit+0x14>
 800afb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb8:	f7ff bff0 	b.w	800af9c <__sinit_lock_release>
 800afbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afc0:	6523      	str	r3, [r4, #80]	; 0x50
 800afc2:	4b13      	ldr	r3, [pc, #76]	; (800b010 <__sinit+0x68>)
 800afc4:	4a13      	ldr	r2, [pc, #76]	; (800b014 <__sinit+0x6c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800afca:	42a3      	cmp	r3, r4
 800afcc:	bf04      	itt	eq
 800afce:	2301      	moveq	r3, #1
 800afd0:	61a3      	streq	r3, [r4, #24]
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 f820 	bl	800b018 <__sfp>
 800afd8:	6060      	str	r0, [r4, #4]
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 f81c 	bl	800b018 <__sfp>
 800afe0:	60a0      	str	r0, [r4, #8]
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 f818 	bl	800b018 <__sfp>
 800afe8:	2200      	movs	r2, #0
 800afea:	60e0      	str	r0, [r4, #12]
 800afec:	2104      	movs	r1, #4
 800afee:	6860      	ldr	r0, [r4, #4]
 800aff0:	f7ff ff82 	bl	800aef8 <std>
 800aff4:	68a0      	ldr	r0, [r4, #8]
 800aff6:	2201      	movs	r2, #1
 800aff8:	2109      	movs	r1, #9
 800affa:	f7ff ff7d 	bl	800aef8 <std>
 800affe:	68e0      	ldr	r0, [r4, #12]
 800b000:	2202      	movs	r2, #2
 800b002:	2112      	movs	r1, #18
 800b004:	f7ff ff78 	bl	800aef8 <std>
 800b008:	2301      	movs	r3, #1
 800b00a:	61a3      	str	r3, [r4, #24]
 800b00c:	e7d2      	b.n	800afb4 <__sinit+0xc>
 800b00e:	bf00      	nop
 800b010:	0800b4d8 	.word	0x0800b4d8
 800b014:	0800af41 	.word	0x0800af41

0800b018 <__sfp>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	4607      	mov	r7, r0
 800b01c:	f7ff ffac 	bl	800af78 <__sfp_lock_acquire>
 800b020:	4b1e      	ldr	r3, [pc, #120]	; (800b09c <__sfp+0x84>)
 800b022:	681e      	ldr	r6, [r3, #0]
 800b024:	69b3      	ldr	r3, [r6, #24]
 800b026:	b913      	cbnz	r3, 800b02e <__sfp+0x16>
 800b028:	4630      	mov	r0, r6
 800b02a:	f7ff ffbd 	bl	800afa8 <__sinit>
 800b02e:	3648      	adds	r6, #72	; 0x48
 800b030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b034:	3b01      	subs	r3, #1
 800b036:	d503      	bpl.n	800b040 <__sfp+0x28>
 800b038:	6833      	ldr	r3, [r6, #0]
 800b03a:	b30b      	cbz	r3, 800b080 <__sfp+0x68>
 800b03c:	6836      	ldr	r6, [r6, #0]
 800b03e:	e7f7      	b.n	800b030 <__sfp+0x18>
 800b040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b044:	b9d5      	cbnz	r5, 800b07c <__sfp+0x64>
 800b046:	4b16      	ldr	r3, [pc, #88]	; (800b0a0 <__sfp+0x88>)
 800b048:	60e3      	str	r3, [r4, #12]
 800b04a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b04e:	6665      	str	r5, [r4, #100]	; 0x64
 800b050:	f000 f847 	bl	800b0e2 <__retarget_lock_init_recursive>
 800b054:	f7ff ff96 	bl	800af84 <__sfp_lock_release>
 800b058:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b05c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b060:	6025      	str	r5, [r4, #0]
 800b062:	61a5      	str	r5, [r4, #24]
 800b064:	2208      	movs	r2, #8
 800b066:	4629      	mov	r1, r5
 800b068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b06c:	f7fd fabe 	bl	80085ec <memset>
 800b070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b078:	4620      	mov	r0, r4
 800b07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b07c:	3468      	adds	r4, #104	; 0x68
 800b07e:	e7d9      	b.n	800b034 <__sfp+0x1c>
 800b080:	2104      	movs	r1, #4
 800b082:	4638      	mov	r0, r7
 800b084:	f7ff ff62 	bl	800af4c <__sfmoreglue>
 800b088:	4604      	mov	r4, r0
 800b08a:	6030      	str	r0, [r6, #0]
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d1d5      	bne.n	800b03c <__sfp+0x24>
 800b090:	f7ff ff78 	bl	800af84 <__sfp_lock_release>
 800b094:	230c      	movs	r3, #12
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	e7ee      	b.n	800b078 <__sfp+0x60>
 800b09a:	bf00      	nop
 800b09c:	0800b4d8 	.word	0x0800b4d8
 800b0a0:	ffff0001 	.word	0xffff0001

0800b0a4 <_fwalk_reent>:
 800b0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	4688      	mov	r8, r1
 800b0ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0b0:	2700      	movs	r7, #0
 800b0b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0b6:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ba:	d505      	bpl.n	800b0c8 <_fwalk_reent+0x24>
 800b0bc:	6824      	ldr	r4, [r4, #0]
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	d1f7      	bne.n	800b0b2 <_fwalk_reent+0xe>
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0c8:	89ab      	ldrh	r3, [r5, #12]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d907      	bls.n	800b0de <_fwalk_reent+0x3a>
 800b0ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	d003      	beq.n	800b0de <_fwalk_reent+0x3a>
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	4630      	mov	r0, r6
 800b0da:	47c0      	blx	r8
 800b0dc:	4307      	orrs	r7, r0
 800b0de:	3568      	adds	r5, #104	; 0x68
 800b0e0:	e7e9      	b.n	800b0b6 <_fwalk_reent+0x12>

0800b0e2 <__retarget_lock_init_recursive>:
 800b0e2:	4770      	bx	lr

0800b0e4 <__retarget_lock_acquire_recursive>:
 800b0e4:	4770      	bx	lr

0800b0e6 <__retarget_lock_release_recursive>:
 800b0e6:	4770      	bx	lr

0800b0e8 <__swhatbuf_r>:
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	460e      	mov	r6, r1
 800b0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	b096      	sub	sp, #88	; 0x58
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	461d      	mov	r5, r3
 800b0f8:	da08      	bge.n	800b10c <__swhatbuf_r+0x24>
 800b0fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	602a      	str	r2, [r5, #0]
 800b102:	061a      	lsls	r2, r3, #24
 800b104:	d410      	bmi.n	800b128 <__swhatbuf_r+0x40>
 800b106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b10a:	e00e      	b.n	800b12a <__swhatbuf_r+0x42>
 800b10c:	466a      	mov	r2, sp
 800b10e:	f000 f903 	bl	800b318 <_fstat_r>
 800b112:	2800      	cmp	r0, #0
 800b114:	dbf1      	blt.n	800b0fa <__swhatbuf_r+0x12>
 800b116:	9a01      	ldr	r2, [sp, #4]
 800b118:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b11c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b120:	425a      	negs	r2, r3
 800b122:	415a      	adcs	r2, r3
 800b124:	602a      	str	r2, [r5, #0]
 800b126:	e7ee      	b.n	800b106 <__swhatbuf_r+0x1e>
 800b128:	2340      	movs	r3, #64	; 0x40
 800b12a:	2000      	movs	r0, #0
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	b016      	add	sp, #88	; 0x58
 800b130:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b134 <__smakebuf_r>:
 800b134:	898b      	ldrh	r3, [r1, #12]
 800b136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b138:	079d      	lsls	r5, r3, #30
 800b13a:	4606      	mov	r6, r0
 800b13c:	460c      	mov	r4, r1
 800b13e:	d507      	bpl.n	800b150 <__smakebuf_r+0x1c>
 800b140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	2301      	movs	r3, #1
 800b14a:	6163      	str	r3, [r4, #20]
 800b14c:	b002      	add	sp, #8
 800b14e:	bd70      	pop	{r4, r5, r6, pc}
 800b150:	ab01      	add	r3, sp, #4
 800b152:	466a      	mov	r2, sp
 800b154:	f7ff ffc8 	bl	800b0e8 <__swhatbuf_r>
 800b158:	9900      	ldr	r1, [sp, #0]
 800b15a:	4605      	mov	r5, r0
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7ff f963 	bl	800a428 <_malloc_r>
 800b162:	b948      	cbnz	r0, 800b178 <__smakebuf_r+0x44>
 800b164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b168:	059a      	lsls	r2, r3, #22
 800b16a:	d4ef      	bmi.n	800b14c <__smakebuf_r+0x18>
 800b16c:	f023 0303 	bic.w	r3, r3, #3
 800b170:	f043 0302 	orr.w	r3, r3, #2
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	e7e3      	b.n	800b140 <__smakebuf_r+0xc>
 800b178:	4b0d      	ldr	r3, [pc, #52]	; (800b1b0 <__smakebuf_r+0x7c>)
 800b17a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	6020      	str	r0, [r4, #0]
 800b180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b184:	81a3      	strh	r3, [r4, #12]
 800b186:	9b00      	ldr	r3, [sp, #0]
 800b188:	6163      	str	r3, [r4, #20]
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	6120      	str	r0, [r4, #16]
 800b18e:	b15b      	cbz	r3, 800b1a8 <__smakebuf_r+0x74>
 800b190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b194:	4630      	mov	r0, r6
 800b196:	f000 f8d1 	bl	800b33c <_isatty_r>
 800b19a:	b128      	cbz	r0, 800b1a8 <__smakebuf_r+0x74>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f023 0303 	bic.w	r3, r3, #3
 800b1a2:	f043 0301 	orr.w	r3, r3, #1
 800b1a6:	81a3      	strh	r3, [r4, #12]
 800b1a8:	89a0      	ldrh	r0, [r4, #12]
 800b1aa:	4305      	orrs	r5, r0
 800b1ac:	81a5      	strh	r5, [r4, #12]
 800b1ae:	e7cd      	b.n	800b14c <__smakebuf_r+0x18>
 800b1b0:	0800af41 	.word	0x0800af41

0800b1b4 <_malloc_usable_size_r>:
 800b1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b8:	1f18      	subs	r0, r3, #4
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfbc      	itt	lt
 800b1be:	580b      	ldrlt	r3, [r1, r0]
 800b1c0:	18c0      	addlt	r0, r0, r3
 800b1c2:	4770      	bx	lr

0800b1c4 <_raise_r>:
 800b1c4:	291f      	cmp	r1, #31
 800b1c6:	b538      	push	{r3, r4, r5, lr}
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	d904      	bls.n	800b1d8 <_raise_r+0x14>
 800b1ce:	2316      	movs	r3, #22
 800b1d0:	6003      	str	r3, [r0, #0]
 800b1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1da:	b112      	cbz	r2, 800b1e2 <_raise_r+0x1e>
 800b1dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1e0:	b94b      	cbnz	r3, 800b1f6 <_raise_r+0x32>
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 f830 	bl	800b248 <_getpid_r>
 800b1e8:	462a      	mov	r2, r5
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1f2:	f000 b817 	b.w	800b224 <_kill_r>
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d00a      	beq.n	800b210 <_raise_r+0x4c>
 800b1fa:	1c59      	adds	r1, r3, #1
 800b1fc:	d103      	bne.n	800b206 <_raise_r+0x42>
 800b1fe:	2316      	movs	r3, #22
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	2001      	movs	r0, #1
 800b204:	e7e7      	b.n	800b1d6 <_raise_r+0x12>
 800b206:	2400      	movs	r4, #0
 800b208:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b20c:	4628      	mov	r0, r5
 800b20e:	4798      	blx	r3
 800b210:	2000      	movs	r0, #0
 800b212:	e7e0      	b.n	800b1d6 <_raise_r+0x12>

0800b214 <raise>:
 800b214:	4b02      	ldr	r3, [pc, #8]	; (800b220 <raise+0xc>)
 800b216:	4601      	mov	r1, r0
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	f7ff bfd3 	b.w	800b1c4 <_raise_r>
 800b21e:	bf00      	nop
 800b220:	20000010 	.word	0x20000010

0800b224 <_kill_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d07      	ldr	r5, [pc, #28]	; (800b244 <_kill_r+0x20>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	4611      	mov	r1, r2
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	f7f6 fcdf 	bl	8001bf4 <_kill>
 800b236:	1c43      	adds	r3, r0, #1
 800b238:	d102      	bne.n	800b240 <_kill_r+0x1c>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	b103      	cbz	r3, 800b240 <_kill_r+0x1c>
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	bd38      	pop	{r3, r4, r5, pc}
 800b242:	bf00      	nop
 800b244:	20004d38 	.word	0x20004d38

0800b248 <_getpid_r>:
 800b248:	f7f6 bccc 	b.w	8001be4 <_getpid>

0800b24c <__sread>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	460c      	mov	r4, r1
 800b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b254:	f000 f894 	bl	800b380 <_read_r>
 800b258:	2800      	cmp	r0, #0
 800b25a:	bfab      	itete	ge
 800b25c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b25e:	89a3      	ldrhlt	r3, [r4, #12]
 800b260:	181b      	addge	r3, r3, r0
 800b262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b266:	bfac      	ite	ge
 800b268:	6563      	strge	r3, [r4, #84]	; 0x54
 800b26a:	81a3      	strhlt	r3, [r4, #12]
 800b26c:	bd10      	pop	{r4, pc}

0800b26e <__swrite>:
 800b26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b272:	461f      	mov	r7, r3
 800b274:	898b      	ldrh	r3, [r1, #12]
 800b276:	05db      	lsls	r3, r3, #23
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	4616      	mov	r6, r2
 800b27e:	d505      	bpl.n	800b28c <__swrite+0x1e>
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	2302      	movs	r3, #2
 800b286:	2200      	movs	r2, #0
 800b288:	f000 f868 	bl	800b35c <_lseek_r>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	4632      	mov	r2, r6
 800b29a:	463b      	mov	r3, r7
 800b29c:	4628      	mov	r0, r5
 800b29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	f000 b817 	b.w	800b2d4 <_write_r>

0800b2a6 <__sseek>:
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ae:	f000 f855 	bl	800b35c <_lseek_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	bf15      	itete	ne
 800b2b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2c2:	81a3      	strheq	r3, [r4, #12]
 800b2c4:	bf18      	it	ne
 800b2c6:	81a3      	strhne	r3, [r4, #12]
 800b2c8:	bd10      	pop	{r4, pc}

0800b2ca <__sclose>:
 800b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ce:	f000 b813 	b.w	800b2f8 <_close_r>
	...

0800b2d4 <_write_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d07      	ldr	r5, [pc, #28]	; (800b2f4 <_write_r+0x20>)
 800b2d8:	4604      	mov	r4, r0
 800b2da:	4608      	mov	r0, r1
 800b2dc:	4611      	mov	r1, r2
 800b2de:	2200      	movs	r2, #0
 800b2e0:	602a      	str	r2, [r5, #0]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f7f6 fcbd 	bl	8001c62 <_write>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_write_r+0x1e>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_write_r+0x1e>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	20004d38 	.word	0x20004d38

0800b2f8 <_close_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d06      	ldr	r5, [pc, #24]	; (800b314 <_close_r+0x1c>)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f7f6 fcc9 	bl	8001c9a <_close>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_close_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_close_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	20004d38 	.word	0x20004d38

0800b318 <_fstat_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d07      	ldr	r5, [pc, #28]	; (800b338 <_fstat_r+0x20>)
 800b31c:	2300      	movs	r3, #0
 800b31e:	4604      	mov	r4, r0
 800b320:	4608      	mov	r0, r1
 800b322:	4611      	mov	r1, r2
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	f7f6 fcc4 	bl	8001cb2 <_fstat>
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	d102      	bne.n	800b334 <_fstat_r+0x1c>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	b103      	cbz	r3, 800b334 <_fstat_r+0x1c>
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	bd38      	pop	{r3, r4, r5, pc}
 800b336:	bf00      	nop
 800b338:	20004d38 	.word	0x20004d38

0800b33c <_isatty_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d06      	ldr	r5, [pc, #24]	; (800b358 <_isatty_r+0x1c>)
 800b340:	2300      	movs	r3, #0
 800b342:	4604      	mov	r4, r0
 800b344:	4608      	mov	r0, r1
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	f7f6 fcc3 	bl	8001cd2 <_isatty>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_isatty_r+0x1a>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b103      	cbz	r3, 800b356 <_isatty_r+0x1a>
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	20004d38 	.word	0x20004d38

0800b35c <_lseek_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d07      	ldr	r5, [pc, #28]	; (800b37c <_lseek_r+0x20>)
 800b360:	4604      	mov	r4, r0
 800b362:	4608      	mov	r0, r1
 800b364:	4611      	mov	r1, r2
 800b366:	2200      	movs	r2, #0
 800b368:	602a      	str	r2, [r5, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	f7f6 fcbc 	bl	8001ce8 <_lseek>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_lseek_r+0x1e>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_lseek_r+0x1e>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	20004d38 	.word	0x20004d38

0800b380 <_read_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d07      	ldr	r5, [pc, #28]	; (800b3a0 <_read_r+0x20>)
 800b384:	4604      	mov	r4, r0
 800b386:	4608      	mov	r0, r1
 800b388:	4611      	mov	r1, r2
 800b38a:	2200      	movs	r2, #0
 800b38c:	602a      	str	r2, [r5, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	f7f6 fc4a 	bl	8001c28 <_read>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_read_r+0x1e>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_read_r+0x1e>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	20004d38 	.word	0x20004d38

0800b3a4 <_init>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	bf00      	nop
 800b3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3aa:	bc08      	pop	{r3}
 800b3ac:	469e      	mov	lr, r3
 800b3ae:	4770      	bx	lr

0800b3b0 <_fini>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	bf00      	nop
 800b3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b6:	bc08      	pop	{r3}
 800b3b8:	469e      	mov	lr, r3
 800b3ba:	4770      	bx	lr
